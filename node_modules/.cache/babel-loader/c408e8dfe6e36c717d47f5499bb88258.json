{"remainingRequest":"E:\\ty_project\\xasw-yy\\revenue\\xasw-mobile\\node_modules\\babel-loader\\lib\\index.js!E:\\ty_project\\xasw-yy\\revenue\\xasw-mobile\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!E:\\ty_project\\xasw-yy\\revenue\\xasw-mobile\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\ty_project\\xasw-yy\\revenue\\xasw-mobile\\src\\views\\inspectionManage\\daily-task.vue?vue&type=script&lang=js","dependencies":[{"path":"E:\\ty_project\\xasw-yy\\revenue\\xasw-mobile\\src\\views\\inspectionManage\\daily-task.vue","mtime":1705912915829},{"path":"E:\\ty_project\\xasw-yy\\revenue\\xasw-mobile\\babel.config.js","mtime":1705912799600},{"path":"E:\\ty_project\\xasw-yy\\revenue\\xasw-mobile\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\ty_project\\xasw-yy\\revenue\\xasw-mobile\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"E:\\ty_project\\xasw-yy\\revenue\\xasw-mobile\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\ty_project\\xasw-yy\\revenue\\xasw-mobile\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["bus","axios","dayjs","MapComp","keyPointList","request","api","Toast","Dialog","turf","Uploader","problemCardInfo","API","mapObj","map","mapInstance","name","components","data","ifTips","reportDataIsLoaded","allTaskLines","isView","active","deviceName","hasSignIn","showPopover","actions","text","currentRate","pointListShow","startRecordTimer","navbarTitle","reportFailTrackPoints","isShowRoute","inspBusinessType","recordData","currentPosition","lines","userInfo","ifRecording","endRecordShow","selectEventType","eventTypeList","signShow","attachment","signForm","deviceStatus","inspImagesList","remark","isReport","taskId","pointId","taskDetail","coverage","reportRate","planEndTime","engInfoDTO","taskRestTime","reportFooterShow","feature","planDetail","inspRangeList","rangeList","keyDetailList","isRunList","value","reportChose","rules","previewURL","upimgPreview","headers","url","uploadFile","findFile","pollingFlag","pollingGapTime","trackPointList","trackPointTimeList","overSpeedTrackLineList","trackLocation_start","trackLocation_end","showVisible","isMask","reportShow","accessToken","$storage","get","header","formToken","problemDataList1","problemDataList2","computed","created","getCardListData","mounted","$store","state","console","log","isStart","localStorage","setItem","$on","startSignIn","$route","query","id","getTaskById","getTrackRecordsById","that","computedPosition","gapTimer","gap","Date","getTime","locTime","t","setTimeout","methods","VUE_APP_WPG_URL","method","params","token","Authorization","then","res","status","resultData","getProblemDataList","commonParams","Object","assign","sysCode","page","current","size","params1","smallType","params2","problemPointFeatures","getAxiosData","allProblem","concat","forEach","it","push","type","geometry","coordinates","lnglat","properties","title","$refs","mymap","addInspEventLayer","problemDataList","Promise","resolve","reject","records","item","_item$formValue","_item$formValue2","_item$formValue3","ticketStatusName","handleType","formValue","createByName","createTime","substring","defectFrom","faultTypes","fileUrl","handleImgs","files","appealLng","appealLat","device_type","questionDescribe","toDetailPanel","cardDetail","window","location","href","flyToPoint","flyTo","center","zoom","reportClick","setLayoutProperty","message","duration","handleClose","fileChange","file","fileList","fileId","response","groupToken","imagesName","endTask","hasInspKp","changeToInspCount","allInspKp","changeToAllInspCount","confirm","endRecordConfirm","catch","endRecordCancel","openPopup","onSelect","val","off","signInBuffer","on","selectReportPoint","selectFlawPoint","e","features","queryRenderedFeatures","point","length","source","addEventObjMarker","gridId","gridName","getRestTime","time","includes","Number","split","changeToRate","insp","uninsp","toFixed","mapLoaded","yuanchu","locationAMap","requestSingleLocation","JSON","parse","stringify","param","setInspUserPosition","err","refreshMap","clearBufferTrack","classNames","document","getElementsByClassName","i","parentNode","removeChild","ids","engId","removeKeyPointMarker","getSource","setSourceData","getLayer","removeLayer","removeSource","removeEventObjMarker","removeRangeMVT","error","refreshTask","pageNum","pageSize","loading","forbidClick","recordLines","recordedPipeLine","pipeId","inspTask","inspPlan","detailList","range","isNew","taskStatus","stratOrEndTaskRecord","getAllTaskLines","devType","list","geom","setAllInspLineSource","kpRes","bizScope","taskType","keys","completion","taskName","timer","setInterval","clearInterval","isOnLoaded","addKeyPoints","addRangeList","extParam","task_id","addInspRecordTileLineSource","icon","postAppData","result2","inspectionTrackMultiple","resetTrackPoints","uniWebView","postMessage","action","trackData","getEventAll","inspectionEventAll","eventItemText","$set","computeCenter","eventType","getEventTypeList","sons","code","label","children","polling","requestLocations","direction","longitude","latitude","date_now","format","lastPoint","currentPoint","distance","GetDistance","jsonLine","coord","parseFloat","jsonLineFeatureCollection","setData","addSource","addLayer","layout","visibility","paint","changeInspLineSourceBySpeed","postTrackData_Point","drawOverSpeedTrack","gapTime","overSpeedTrackLineCollection","overSpeedTrackLineFeatureCollection","drawStartPoint","position","tempPointList","pointData","p","inspTime","inspDate","inspector","userFullName","inspectionTrack","jsonPoint","jsonPointFeatureCollection","drawEndPoint","stopRequestLocations","postFailTrackData","uploadFiledPipeIdList","recordInspLine","timeData","userFullname","planId","taskCode","changeTaskStatus","addMapImg","loadImage","require","image","hasImage","addImage","startInspRecord","startLocation","endRecord","diff","Math","floor","setLocalStorage","sourceData","findHadInspFeature","caliber","guid","filter","x","every","y","$api","postAction","inspRecordData","getAppInspData","superMapParamsToFeature","points","featureToObject","names","values","obj","index","goEventOrFlawDetail","deviceId","bigType","bizType","lng","startLongitude","lat","startLatitude","road_name","road","$router","msg","onConfirm","copySignForm","deepClone","ext1","signIn","onCancel","warning","engGeom","buffered","buffer","unit","isInBuffer","inside","deviceType","result","att","eventTypeConfirm","event","inspItemId","reportEvent","path","coordArray1","coordArray2","lng1","lat1","lng2","lat2","radLat1","PI","radLat2","a","b","s","asin","sqrt","pow","sin","cos","round","showRoute","getLayoutProperty","resetMapView","resetNorthPitch","clickReportEvent","pos","undefined","taskRangerGeom","isInKeyPointBuffer","_item$inspectionTaskD","detail","inspectionTaskDetailDTO","inspectionTaskDetail","watch","beforeRouteLeave","to","from","next","beforeDestroy","removeItem","$off","onBackPress","onNavigationBarButtonTap"],"sources":["src/views/inspectionManage/daily-task.vue"],"sourcesContent":["<template>\r\n  <div class=\"task-map full-width\">\r\n    <!-- 导航栏 -->\r\n    <div class=\"navbar-box\">\r\n      <fm-nav-bar\r\n        :title=\"navbarTitle\"\r\n        left-arrow\r\n        @click-left=\"$router.go(-1)\"\r\n        @click-right=\"openPopup\"\r\n      >     \r\n        <template #right>\r\n          <fm-popover\r\n            :visible.sync=\"showPopover\"\r\n            trigger=\"click\"\r\n            :actions=\"actions\"\r\n            @select=\"onSelect\"\r\n            placement=\"bottom-end\"\r\n          >\r\n            <template #reference>\r\n              <img style=\"width: 34px\" :src=\"require('@/assets/img/inspection/增加.png')\" />\r\n            </template>\r\n          </fm-popover>\r\n        </template>\r\n      </fm-nav-bar>\r\n    </div>\r\n    <!-- 地图 -->\r\n    <MapComp\r\n      ref=\"mymap\"\r\n      :ifInspection=\"true\"\r\n      @mapLoaded=\"mapLoaded\"\r\n    ></MapComp>\r\n    <!-- <fm-popup\r\n      :visible.sync=\"pointListShow\"\r\n      close-on-click-modal\r\n      :close-on-popstate=\"true\"\r\n      position=\"bottom\"\r\n      safe-area-inset-bottom\r\n    >\r\n      <fm-tabs type=\"card\" style=\"padding-top: 20px\">\r\n        <fm-tab label=\"未上报关键点\">\r\n          <fm-empty v-if=\"keyDetailList.length <= 0\" description=\"暂无数据\" mode=\"list\"></fm-empty>\r\n        </fm-tab>\r\n        <fm-tab label=\"已上报关键点\">\r\n          <fm-empty v-if=\"keyDetailList.length <= 0\" description=\"暂无数据\" mode=\"list\"></fm-empty>\r\n        </fm-tab>\r\n      </fm-tabs>\r\n    </fm-popup> -->\r\n    <!-- 开始记录与结束记录 -->\r\n    <div class=\"start-record\">\r\n      <img\r\n        v-if=\"!ifRecording\"\r\n        :src=\"require('@/assets/img/inspection/暂停.png')\"\r\n        @click=\"startInspRecord\"\r\n      />\r\n      <img v-else :src=\"require('@/assets/img/inspection/开始.png')\" @click=\"endRecord\" />\r\n      <!-- <fm-button\r\n        v-if=\"!ifRecording\"\r\n        :loading=\"recordButtonLoading\"\r\n        :disabled=\"recordButtonLoading\"\r\n        class=\"start-button\"\r\n        type=\"primary\"\r\n        @click=\"startInspRecord\"\r\n      >开始记录</fm-button>\r\n      <fm-button\r\n        v-else\r\n        :loading=\"recordButtonLoading\"\r\n        :disabled=\"recordButtonLoading\"\r\n        class=\"start-button\"\r\n        type=\"primary\"\r\n        @click=\"endRecord\"\r\n      >结束记录</fm-button> -->\r\n    </div>\r\n    <!-- 数据面板 -->\r\n    <div class=\"controlCard\">\r\n      <div class=\"controlContent\">\r\n        <div class=\"infoContent\">\r\n          <div class=\"endControl\">\r\n            <div class=\"leftText\">\r\n              <img :src=\"require('@/assets/img/inspection/剩余时间.png')\" />\r\n              <fm-count-down\r\n                style=\"margin: auto\"\r\n                :time=\"getRestTime(taskDetail.planEndTime)\"\r\n                format=\"DD天HH小时\"\r\n              />\r\n            </div>\r\n            <div class=\"rightButton\">\r\n              <fm-button v-show=\"ifRecording\" class=\"endBtn\" round @click=\"endTask\">结束</fm-button>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"bottomSide\">\r\n            <div class=\"block\">\r\n              <div class=\"rate\" style=\"font-size: 18px\">\r\n                <div class=\"centerStyle\">\r\n                  {{ changeToRate(taskDetail.coverage) }}\r\n                </div>\r\n              </div>\r\n              <div class=\"name\" style=\"font-size: 14px\">覆盖率</div>\r\n            </div>\r\n\r\n            <div class=\"block\">\r\n              <div class=\"rate\">\r\n                <div class=\"centerStyle\">\r\n                  <div class=\"inspKp\" style=\"font-size: 19px\">\r\n                    {{ changeToInspCount(taskDetail.reportRate) }}\r\n                  </div>\r\n                  <div class=\"uninspKp\" style=\"font-size: 14px\">\r\n                    /{{ changeToAllInspCount(taskDetail.reportRate) }}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"name\" style=\"font-size: 14px\">关键点</div>\r\n            </div>\r\n\r\n            <div class=\"block\" @click=\"reportClick\" style=\"cursor: pointer;\">\r\n              <div class=\"rate\" style=\"font-size: 18px\">\r\n                <div class=\"centerStyle\">\r\n                  {{ problemDataList1.length + problemDataList2.length }}\r\n                </div>\r\n              </div>\r\n              <div class=\"name\" style=\"font-size: 14px\">上报</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <!-- 轨迹显示与定位功能 -->\r\n    <div class=\"tool-box\">\r\n      <!-- 地图旋转、俯视角度重置 -->\r\n      <!-- <div class=\"refresh\" @click=\"resetMapView\">\r\n        <fm-image class=\"refresh-image\" :src=\"require('@/assets/img/inspection/reset.png')\"></fm-image>\r\n      </div>\r\n      <div class=\"route\" @click=\"showRoute\">\r\n        <fm-image\r\n          v-if=\"isShowRoute\"\r\n          class=\"route-image\"\r\n          :src=\"require('@/assets/img/inspection/route2.png')\"\r\n        ></fm-image>\r\n        <fm-image v-else class=\"route-image\" :src=\"require('@/assets/img/inspection/route.png')\"></fm-image>\r\n      </div> -->\r\n      <div class=\"location\" @click=\"startLocation\">\r\n        <fm-image\r\n          class=\"location-image\"\r\n          :src=\"require('@/assets/img/inspection/location.png')\"\r\n        ></fm-image>\r\n      </div>\r\n    </div>\r\n    <!-- 签到框 -->\r\n    <fm-popup\r\n      :visible.sync=\"signShow\"\r\n      :modal=\"false\"\r\n      round\r\n      position=\"bottom\"\r\n      :style=\"{ height: signForm.deviceStatus == '1' ? '76%' : '62%' }\"\r\n    >\r\n      <div class=\"popup-view\">\r\n        <fm-form ref=\"signForm\">\r\n          <div class=\"title\">\r\n            <img :src=\"require('@/assets/img/inspection/sideIcon.png')\" />\r\n            <div class=\"deviceId\">{{ deviceName }}</div>\r\n          </div>\r\n          <fm-field :name=\"signForm.deviceStatus\" label=\"运行情况\" required>\r\n            <template #input>\r\n              <fm-radio-group v-model=\"signForm.deviceStatus\" direction=\"horizontal\">\r\n                <fm-radio name=\"0\">正常</fm-radio>\r\n                <fm-radio name=\"1\">异常</fm-radio>\r\n              </fm-radio-group>\r\n            </template>\r\n          </fm-field>\r\n          <fm-field v-if=\"signForm.deviceStatus == '1'\" label=\"是否上报\" required>\r\n          </fm-field>\r\n          <fm-field :name=\"signForm.isReport\" v-if=\"signForm.deviceStatus == '1'\">\r\n            <template #input>\r\n              <fm-radio-group v-model=\"signForm.isReport\" direction=\"horizontal\">\r\n                <fm-radio v-for=\"(item, index) in reportChose\" :key=\"index\" :name=\"item.value\"\r\n                  >{{ item.name }}\r\n                </fm-radio>\r\n              </fm-radio-group>\r\n            </template>\r\n          </fm-field>\r\n          <uploader\r\n            v-model=\"attachment\"\r\n            @fileChange=\"fileChange\"\r\n            multiple\r\n            :maxImagesCount=\"2\"\r\n            type=\"image\"\r\n          />\r\n          <fm-field label=\"备注\" type=\"textarea\" placehold=\"请输入\" v-model=\"signForm.remark\">\r\n          </fm-field>\r\n        </fm-form>\r\n      </div>\r\n      <div class=\"btnArea\" v-show=\"!hasSignIn\">\r\n        <fm-button class=\"btn1\" @click=\"onCancel\" round type=\"default\">取消</fm-button>\r\n        <fm-button class=\"btn2\" @click=\"onConfirm\" round type=\"primary\">提交</fm-button>\r\n      </div>\r\n      <div class=\"btnArea\" v-show=\"hasSignIn\">\r\n        <fm-button class=\"btn\" @click=\"onCancel\" round type=\"default\">关闭</fm-button>\r\n      </div>\r\n    </fm-popup>\r\n    <fm-popup :visible.sync=\"reportShow\" @close=\"handleClose\" round position=\"bottom\" :overlay-style=\"{ background: 'rgba(0, 0, 0, 0.1)' }\" :style=\"{ height: '50%' }\">\r\n      <fm-tabs v-model=\"active\" swipeable style=\"height: 100%\">\r\n        <fm-tab label=\"问题上报\">\r\n          <div v-for=\"(item, index) in problemDataList1\" :key=\"index\">\r\n            <problemCardInfo\r\n              type=\"001\"\r\n              :cardInfo=\"item\"\r\n              @toDetailPanel=\"toDetailPanel\"\r\n              @flyToPoint=\"flyToPoint\"\r\n            ></problemCardInfo>\r\n          </div>\r\n        </fm-tab>\r\n        <fm-tab label=\"设施缺陷\">\r\n          <div v-for=\"(item, index) in problemDataList2\" :key=\"index\">\r\n            <problemCardInfo\r\n              type=\"002\"\r\n              :cardInfo=\"item\"\r\n              @toDetailPanel=\"toDetailPanel\"\r\n              @flyToPoint=\"flyToPoint\"\r\n            ></problemCardInfo>\r\n          </div>\r\n        </fm-tab>\r\n      </fm-tabs>\r\n    </fm-popup>\r\n    \r\n    <!-- 提示层 -->\r\n    <div v-show=\"ifTips\" class=\"tip-tools\">\r\n      <img :src=\"require('@/assets/img/tips.png')\" class=\"tipImg\" />\r\n      <div class=\"context\">请在地图上选择设施或者点位</div>\r\n    </div>\r\n  </div>\r\n</template>\r\n<script>\r\nimport bus from '../../views/inspectMap/utils/Bus.js'\r\nimport axios from 'axios'\r\nimport dayjs from 'dayjs'\r\nimport MapComp from '../../views/inspectMap/index.vue'\r\nimport keyPointList from './keypoint-list.vue'\r\nimport request from '@/utils/request'\r\nimport * as api from './api'\r\nimport { Toast, Dialog } from 'fawkes-mobile-lib'\r\nimport * as turf from '@turf/turf'\r\nimport Uploader from '@/components/upload/Uploader.vue'\r\nimport problemCardInfo from './problemCardInfo';\r\nimport API from \"@/common/config.js\";\r\nconst mapObj = {\r\n  map: null,\r\n  mapInstance: null,\r\n}\r\nexport default {\r\n  name: 'daily-task',\r\n  components: {\r\n    MapComp,\r\n    keyPointList,\r\n    Uploader,\r\n    problemCardInfo,\r\n  },\r\n  data() {\r\n    return {\r\n      ifTips: false,\r\n      reportDataIsLoaded: false,\r\n      // 巡检任务下所有巡检管线\r\n      allTaskLines: [],\r\n      isView: true,\r\n      active: 0,\r\n      deviceName: '',\r\n      hasSignIn: false,\r\n      showPopover: false,\r\n      actions: [\r\n        {\r\n          text: '问题上报',\r\n        },\r\n        {\r\n          text: '设施缺陷',\r\n        },\r\n      ],\r\n      currentRate: 0,\r\n      // 控制关键点列表显隐\r\n      pointListShow: false,\r\n      // 全局发声函数\r\n      // 记录开始巡检的时间，用于判断是否在开始巡检的10s内\r\n      startRecordTimer: '',\r\n      navbarTitle: '日常任务',\r\n      // 上报失败的巡检轨迹点位数组\r\n      reportFailTrackPoints: [],\r\n      isShowRoute: true,\r\n      inspBusinessType: '',\r\n      recordData: [],\r\n      // 当前巡检员所处位置\r\n      currentPosition: null,\r\n      lines: [],\r\n      // 巡检员信息\r\n      userInfo: {},\r\n      ifRecording: false,\r\n      endRecordShow: false,\r\n      selectEventType: false,\r\n      eventTypeList: [],\r\n      signShow: false,\r\n      attachment: '',\r\n      signForm: {\r\n        deviceStatus: '1',\r\n        inspImagesList: [],\r\n        remark: '',\r\n        isReport: '',\r\n        taskId: '',\r\n        pointId: '',\r\n      },\r\n      taskDetail: {\r\n        coverage: '0/0',\r\n        reportRate: '0/0',\r\n        planEndTime: '',\r\n      },\r\n      engInfoDTO: {},\r\n      taskRestTime: 0,\r\n      reportFooterShow: false,\r\n      feature: {},\r\n      planDetail: {},\r\n      // 用于地图中显示范围和关键点\r\n      inspRangeList: [],\r\n      rangeList: [],\r\n      keyDetailList: [],\r\n      isRunList: [\r\n        {\r\n          name: '正常',\r\n          value: '1',\r\n        },\r\n        {\r\n          name: '异常',\r\n          value: '0',\r\n        },\r\n      ],\r\n      reportChose: [\r\n        {\r\n          name: '问题上报',\r\n          value: '问题上报',\r\n        },\r\n        {\r\n          name: '新增缺陷',\r\n          value: '新增缺陷',\r\n        },\r\n        {\r\n          name: '无需上报',\r\n          value: '无需上报',\r\n        },\r\n      ],\r\n      rules: {\r\n      },\r\n      previewURL: '/sys-storage/download_image?f8s=',\r\n      upimgPreview: [],\r\n      headers: {},\r\n      url: {\r\n        // 本页面使用到的url\r\n        uploadFile: 'sys-storage/upload',\r\n        findFile: 'ecidi-cmp/file/cmpFileGroup/findFilesByGroupId',\r\n      },\r\n      pollingFlag: false,\r\n      pollingGapTime: 3,\r\n      trackPointList: [],\r\n      trackPointTimeList: [],\r\n      overSpeedTrackLineList: [],\r\n      trackLocation_start: '',\r\n      trackLocation_end: '',\r\n      showVisible: false,\r\n      isMask: false, //是否显示遮罩层\r\n      reportShow: false, // 问题上报面板显示\r\n      accessToken: this.$storage.get('access_token'),\r\n      header: {},\r\n      formToken: '',\r\n      // 问题上报list\r\n      problemDataList1: [],\r\n      // 设施缺陷list\r\n      problemDataList2: []\r\n    }\r\n  },\r\n  computed: {\r\n  },\r\n  created() {\r\n    // 获取问题上报和设施缺陷数据\r\n    this.getCardListData()\r\n  },\r\n  mounted() {\r\n    this.userInfo = this.$store.state.userInfo\r\n    console.log('this.userInfo: ', this.userInfo);\r\n    this.isStart = false\r\n    localStorage.setItem('startRecordLines', 'end')\r\n    this.navbarTitle = '日常任务'\r\n    bus.$on('startSignIn', (feature) => {\r\n      this.startSignIn(feature)\r\n    })\r\n    this.isView = this.$route.query.isView\r\n    const id = this.$route.query.taskId\r\n    this.getTaskById(id)\r\n    this.getTrackRecordsById(id)\r\n    // this.getAppInspData(id)\r\n    let that = this\r\n    !(function computedPosition() {\r\n      let gapTimer = 10\r\n      if (that.currentPosition) {\r\n        // 计算当前时间与当前插件返回的时间的间隔\r\n        let gap = (new Date().getTime() - new Date(that.currentPosition.locTime).getTime()) / 1000\r\n        // 如果间隔时间大于某一值，则说明在gapTimer时间内没有收到来自插件的新点位\r\n        if (gap > gapTimer) {\r\n          // 开启提示\r\n          // Notify.warning({ message: '当前GPS信号较弱,位置和轨迹更新可能缓慢', duration: 5000 })\r\n          let t = setTimeout(() => {\r\n            // 提示结束，并开始下次调用\r\n            computedPosition()\r\n          }, 15000)\r\n        } else {\r\n          // 开始下次调用\r\n          let t = setTimeout(() => {\r\n            computedPosition()\r\n          }, 10000)\r\n        }\r\n      } else {\r\n        // Notify.warning({ message: '当前GPS无信', duration: 5000 })\r\n        let t = setTimeout(() => {\r\n          computedPosition()\r\n        }, 10000)\r\n      }\r\n    })()\r\n  },\r\n  methods: {\r\n    // 获取问题上报和设施缺陷数据\r\n    getCardListData() {\r\n      // 获取header，查询工单用\r\n      axios({\r\n        url: API.VUE_APP_WPG_URL + '/main/userCenterApi/sso/tokenByToken',\r\n        method: 'post',\r\n        params: {\r\n          token: this.accessToken,\r\n        },\r\n        headers: {\r\n          Authorization: 'Basic b3V0d29yazp3cGcyMDIw',\r\n        },\r\n      }).then((res) => {\r\n        if (res.status == 200) {\r\n          this.formToken = res.data.resultData.token\r\n          this.header = {\r\n            'Content-Type': 'application/json',\r\n            Authorization: 'Bearer ' + this.formToken,\r\n          }\r\n        }\r\n      })\r\n    },\r\n    // 问题上报(smallType: 'abnormal_inform')、设施缺陷(smallType: \"defect\")使用同一接口\r\n    async getProblemDataList(params) {\r\n      this.problemDataList1 = []\r\n      this.problemDataList2 = []\r\n\r\n      let commonParams = Object.assign({\r\n        sysCode: 'outwork',\r\n        // token: this.accessToken,\r\n        page: {\r\n          current: 1,\r\n          size: 99999, // 查全部\r\n        }\r\n      }, params)\r\n      // 问题上报\r\n      let params1 = {\r\n        ...commonParams,\r\n        smallType: 'abnormal_inform'\r\n      }\r\n      // 设施缺陷\r\n      let params2 = {\r\n        ...commonParams,\r\n        smallType: 'defect'\r\n      }\r\n      let problemPointFeatures = []\r\n      // 问题上报\r\n      await this.getAxiosData(params1, this.problemDataList1)\r\n      // 设施缺陷\r\n      await this.getAxiosData(params2, this.problemDataList2)\r\n      let allProblem = this.problemDataList1.concat(this.problemDataList2)\r\n      allProblem.forEach(it => {\r\n        problemPointFeatures.push({\r\n          type: 'Feature',\r\n          geometry: {\r\n            type: 'Point',\r\n            coordinates: it.lnglat\r\n          },\r\n          properties: {\r\n            id: it.id,\r\n            title: it.title\r\n          }\r\n        })\r\n      })\r\n      this.$refs.mymap.addInspEventLayer(problemPointFeatures)\r\n      this.reportDataIsLoaded = true\r\n    },\r\n    getAxiosData(params, problemDataList) {\r\n      return new Promise((resolve, reject) => {\r\n        axios({\r\n          url: API.VUE_APP_WPG_URL + '/main/outworkapi/ticketStatisticClient/getTicketList',\r\n          method: 'post',\r\n          data: params,\r\n          headers: this.header,\r\n        }).then((res) => {\r\n          if (res.status == 200) {\r\n            res.data.resultData.records.forEach((item) => {\r\n              problemDataList.push({\r\n                id: item.id, // 工单ID\r\n                title: item.title, // 工单标题\r\n                ticketStatusName: item.ticketStatusName,\r\n                handleType: item.formValue.handleType, // 描述\r\n                createByName: item.createByName, // 创建人\r\n                createTime: item.createTime.substring(0, 10), // 创建时间\r\n                defectFrom: item.formValue.defectFrom,\r\n                faultTypes: item.formValue.faultTypes,\r\n                fileUrl: item.formValue?.handleImgs?.[0]?.fileUrl,\r\n                // 图片地址\r\n                url: item.formValue?.files?.[0]?.url,\r\n                // 发生经纬度\r\n                lnglat: [item.appealLng, item.appealLat],\r\n                device_type: item.formValue?.device_type || [],\r\n                questionDescribe: item.formValue.questionDescribe,\r\n              })\r\n            })\r\n            resolve()\r\n          }\r\n          // problemDataList.forEach((item) => {\r\n          //   // console.log('图片地址', item.url)\r\n          // })\r\n        })\r\n      })\r\n    },\r\n    // 问题上报点击标题、设施缺陷点击卡片进入详情页\r\n    toDetailPanel(cardDetail) {\r\n      window.location.href =\r\n        'http://172.20.79.70/outworkApp/#/pages/ticket/detail/index?id=' +\r\n        cardDetail.id +\r\n        '&sysCode=outwork' +\r\n        '&token=' +\r\n        this.formToken\r\n    },\r\n    // 卡片定位\r\n    flyToPoint(lnglat) {\r\n      mapObj.map.flyTo({ center: lnglat, zoom: 17.5 })\r\n    },\r\n    // 上报\r\n    reportClick() {\r\n      if (this.reportDataIsLoaded) {\r\n        this.reportShow = true\r\n        mapObj.map.setLayoutProperty('eventPointsLayer', 'visibility', 'visible')\r\n      } else {\r\n        Toast({\r\n          message: '上报数据加载中。。。',\r\n          duration: 1500\r\n        })\r\n        return\r\n      }\r\n    },\r\n    handleClose() {\r\n      mapObj.map.setLayoutProperty('eventPointsLayer', 'visibility', 'none')\r\n    },\r\n    fileChange(file) {\r\n      this.signForm.inspImagesList = []\r\n      file.fileList.forEach(it => {\r\n        this.signForm.inspImagesList.push(\r\n          {\r\n            fileId: it.response.groupToken,\r\n            imagesName: it.url\r\n          }\r\n        )\r\n      })\r\n      console.log(this.signForm)\r\n    },\r\n    async endTask() {\r\n      if (this.isView) {\r\n        Toast({\r\n          message: '该巡检任务已结束',\r\n          duration: 1500\r\n        })\r\n        return\r\n      }\r\n      await this.getTaskById(this.$route.query.taskId)\r\n      let hasInspKp = this.changeToInspCount(this.taskDetail.reportRate)\r\n      let allInspKp = this.changeToAllInspCount(this.taskDetail.reportRate)\r\n      Dialog.confirm({\r\n        title: '提示',\r\n        message: `您还有${allInspKp - hasInspKp}个关键点未打卡，确定结束巡检任务？`,\r\n      })\r\n        .then(() => {\r\n          this.endRecordConfirm('task')\r\n        })\r\n        .catch(() => {\r\n          this.endRecordCancel()\r\n        })\r\n    },\r\n    openPopup() {\r\n      this.showPopover = true\r\n    },\r\n    onSelect(val) {\r\n      if (this.isView) {\r\n        Toast({\r\n          message: '该巡检任务已结束',\r\n          duration: '1500'\r\n        })\r\n        return\r\n      }\r\n      // Toast({\r\n      //   message: '请在地图上选择设施或者点位',\r\n      //   duration: 1500\r\n      // });\r\n      this.ifTips = true\r\n      setTimeout(() => {\r\n        this.ifTips = false\r\n      }, 2500)\r\n      mapObj.map.off('click', 'keypointsLayer', this.$refs.mymap.signInBuffer)\r\n      val.text == '问题上报' ? mapObj.map.on('click', this.selectReportPoint) : mapObj.map.on('click', this.selectFlawPoint)\r\n    },\r\n    selectReportPoint(e) {\r\n      let features = mapObj.map.queryRenderedFeatures(e.point)\r\n      console.log(features)\r\n      if (features.length > 0) {\r\n        if (\r\n        features[0].source != \"inspUser\" \r\n        && features[0].source != \"initInspLineSource\" \r\n        && features[0].source != \"keypoints\" \r\n        &&(features[0].geometry.type === \"Point\")\r\n        ) {\r\n        this.$refs.mymap.addEventObjMarker(features[0], 'event', { gridId: this.planDetail.gridId, gridName: this.planDetail.gridName });\r\n        } else if (features.length > 1 \r\n          && features[1].source !=\"eventPoints\" \r\n          && features[1].source != \"inspUser\" \r\n          && features[1].source != \"keypoints\" \r\n          && (features[1].geometry.type === \"Point\")\r\n          ) {\r\n          this.$refs.mymap.addEventObjMarker(features[1], 'event', { gridId: this.planDetail.gridId, gridName: this.planDetail.gridName });\r\n        }\r\n      }\r\n      mapObj.map.on('click', 'keypointsLayer', this.$refs.mymap.signInBuffer)\r\n      mapObj.map.off('click', this.selectReportPoint)\r\n    },\r\n    selectFlawPoint(e) {\r\n      let features = mapObj.map.queryRenderedFeatures(e.point)\r\n      console.log(features)\r\n      if (features.length > 0) {\r\n        if (\r\n        features[0].source !=\"eventPoints\"\r\n        && features[0].source != \"inspUser\" \r\n        && features[0].source != \"initInspLineSource\" \r\n        && features[0].source != \"keypoints\" \r\n        &&(features[0].geometry.type === \"Point\")\r\n        ) {\r\n        this.$refs.mymap.addEventObjMarker(features[0], 'flaw', { gridId: this.planDetail.gridId, gridName: this.planDetail.gridName });\r\n        } else if (features.length > 1 \r\n          && features[1].source !=\"eventPoints\"\r\n          && features[1].source != \"inspUser\" \r\n          && features[1].source != \"keypoints\"\r\n          && (features[1].geometry.type === \"Point\")\r\n          ) {\r\n          this.$refs.mymap.addEventObjMarker(features[1], 'flaw', { gridId: this.planDetail.gridId, gridName: this.planDetail.gridName });\r\n        }\r\n      }\r\n      mapObj.map.on('click', 'keypointsLayer', this.$refs.mymap.signInBuffer)\r\n      mapObj.map.off('click', this.selectFlawPoint)\r\n    },\r\n    getRestTime(time) {\r\n      return time ? new Date(time).getTime() - new Date().getTime() : 0\r\n    },\r\n    changeToInspCount(reportRate) {\r\n      if (reportRate.includes('/')) {\r\n        return Number(reportRate.split('/')[0])\r\n      } else {\r\n        return 0\r\n      }\r\n    },\r\n    changeToAllInspCount(reportRate) {\r\n      if (reportRate.includes('/')) {\r\n        return Number(reportRate.split('/')[1])\r\n      } else {\r\n        return 0\r\n      }\r\n    },\r\n    changeToRate(coverage) {\r\n      if (coverage.includes('/')) {\r\n        let insp = Number(coverage.split('/')[0])\r\n        let uninsp = Number(coverage.split('/')[1])\r\n        if (uninsp) {\r\n          return ((insp / uninsp) * 100).toFixed(2) + '%'\r\n        } else {\r\n          return '0%'\r\n        }\r\n      } else {\r\n        return '0%'\r\n      }\r\n    },\r\n    mapLoaded(mapInstance) {\r\n      console.log('mapLoadedddddddd')\r\n      let that = this\r\n      mapObj.mapInstance = mapInstance\r\n      mapObj.map = mapInstance.map\r\n      // this.$refs.mymap.setInspUserPosition({\r\n      //   longitude: 115.854563,\r\n      //   latitude: 39.043407\r\n      // })\r\n      yuanchu.locationAMap.requestSingleLocation(\r\n        ['1'],\r\n        (res) => {\r\n          that.currentPosition = JSON.parse(JSON.stringify(res))\r\n          const param = {\r\n            ...that.currentPosition,\r\n          }\r\n          this.$refs.mymap.setInspUserPosition(param)\r\n        },\r\n        (err) => {\r\n          console.log('err=', err)\r\n        }\r\n      )\r\n    },\r\n    // 刷新地图\r\n    refreshMap() {\r\n      try {\r\n        this.clearBufferTrack()\r\n        // 清空所有的popup\r\n        let classNames = document.getElementsByClassName('mapboxgl-popup-anchor-bottom')\r\n        for (let i = classNames.length - 1; i >= 0; i--) {\r\n          if (classNames[i] != null) {\r\n            classNames[i].parentNode.removeChild(classNames[i])\r\n          }\r\n        }\r\n        // 清空所有关键点marker\r\n        let ids = []\r\n        this.keyDetailList.forEach((item) => {\r\n          if (item.engInfoDTO) {\r\n            ids.push(item.engInfoDTO.engId)\r\n          }\r\n        })\r\n        mapObj.mapInstance && this.$refs.mymap.removeKeyPointMarker(ids)\r\n        // 清空巡检范围图层\r\n        mapObj.map.getSource('rangeSource') &&\r\n          mapObj.mapInstance.setSourceData('rangeSource', {\r\n            type: 'FeatureCollection',\r\n            features: [],\r\n          })\r\n        // 清空巡检管线图层\r\n        mapObj.map.getSource('initInspLineSource') &&\r\n          mapObj.mapInstance.setSourceData('initInspLineSource', {\r\n            type: 'FeatureCollection',\r\n            features: [],\r\n          })\r\n        mapObj.map.getSource('unInspLineSource') &&\r\n          mapObj.mapInstance.setSourceData('unInspLineSource', {\r\n            type: 'FeatureCollection',\r\n            features: [],\r\n          })\r\n        mapObj.map.getSource('inspLineSource') &&\r\n          mapObj.mapInstance.setSourceData('inspLineSource', {\r\n            type: 'FeatureCollection',\r\n            features: [],\r\n          })\r\n        mapObj.map.getSource('inspUserLineSource') &&\r\n          mapObj.mapInstance.setSourceData('inspUserLineSource', {\r\n            type: 'FeatureCollection',\r\n            features: [],\r\n          })\r\n        mapObj.map.getSource('inspUser') &&\r\n          mapObj.mapInstance.setSourceData('inspUser', {\r\n            type: 'FeatureCollection',\r\n            features: [],\r\n          })\r\n        mapObj.map.getSource('buffered') &&\r\n          mapObj.mapInstance.setSourceData('buffered', {\r\n            type: 'FeatureCollection',\r\n            features: [],\r\n          })\r\n        // 如果存在事件图层，就移除该图层\r\n        mapObj.map.getLayer('eventPointsLayer') && mapObj.map.removeLayer('eventPointsLayer')\r\n        mapObj.map.getSource('eventPoints') && mapObj.map.removeSource('eventPoints')\r\n        this.$refs.mymap.removeEventObjMarker()\r\n        this.$refs.mymap.removeRangeMVT()\r\n      } catch (error) {\r\n        console.log(error)\r\n      }\r\n    },\r\n    // 刷新任务\r\n    refreshTask() {\r\n      // let ids = []\r\n      // this.keyDetailList.forEach((item) => {\r\n      //   if (item.engInfoDTO) {\r\n      //     ids.push(item.engInfoDTO.engId)\r\n      //   }\r\n      // })\r\n      // mapObj.mapInstance && this.$refs.mymap.removeKeyPointMarker(ids)\r\n      const id = this.$route.query.taskId\r\n      this.getTaskById(id, 'refresh')\r\n      // await this.getAppInspData(id)\r\n    },\r\n    async getTrackRecordsById(id) {\r\n      const res = await request({\r\n        url: '/xasw-pipe-operation/inspTask/track',\r\n        method: 'get',\r\n        params: { id, pageNum: 1, pageSize: 9999 },\r\n      })\r\n      if (res && res.status) {\r\n        console.log(res)\r\n      }\r\n    },\r\n    // 根据任务id获取巡检状况\r\n    async getTaskById(id, type=null) {\r\n      Toast.loading({\r\n        message: '地图加载中...',\r\n        forbidClick: true,\r\n      })\r\n      this.isMask = true\r\n      // await this.postAppData(id);\r\n      // 处理已巡检管线的接口\r\n      const recordLines = await api.recordedPipeLine({\r\n        taskId: id,\r\n        page: 1,\r\n        size: 9999\r\n      })\r\n      this.lines = []\r\n      if (recordLines.status) {\r\n        this.lines = recordLines.data.records.map((item) => item.pipeId)\r\n      }\r\n      this.reportFooterShow = false // 事件上报弹窗开关\r\n      const res = await request({\r\n        url: '/xasw-pipe-operation/inspTask/getById',\r\n        method: 'get',\r\n        params: { id },\r\n      })\r\n      // let point = turf.point([115.854546, 39.043415])\r\n      // this.$refs.mymap.drawBuffer(point, 5)\r\n      if (res && res.status) {\r\n        this.taskDetail = res.data.inspTask\r\n        this.planDetail = res.data.inspPlan\r\n        this.inspRangeList = res.data.detailList.map((range) => {\r\n          return {\r\n            taskId: id,\r\n            ...range,\r\n          }\r\n        })\r\n        // 修改未巡检(0)任务状态至巡检中(1)\r\n        if (this.$route.query.isNew && this.taskDetail.taskStatus != 1) {\r\n          this.stratOrEndTaskRecord(1)\r\n        }\r\n        if (type != 'refresh') {\r\n          const allTaskLines = await api.getAllTaskLines({\r\n            devType: '管线',\r\n            gridId: this.planDetail.gridId,\r\n            pageNum: 1,\r\n            pageSize: 99999\r\n          })\r\n          if (allTaskLines.status) {\r\n            allTaskLines.data.list.forEach(item => {\r\n              this.allTaskLines.push({\r\n                type: 'Feature',\r\n                id: item.id,\r\n                geometry: JSON.parse(item.geom),\r\n                properties: {\r\n                  id: item.id,\r\n                  length: item['length']\r\n                }\r\n              })\r\n            })\r\n            this.$refs.mymap.setAllInspLineSource(this.allTaskLines)\r\n          }\r\n        }\r\n        const kpRes = await request({\r\n          url: '/xasw-pipe-operation/inspTask/point',\r\n          method: 'get',\r\n          params: { id, gridId: this.planDetail.gridId, pageNum: 1, pageSize: 9999, bizScope: this.$route.query.taskType },\r\n        })\r\n        this.keyDetailList = []\r\n        if (kpRes && kpRes.status) {\r\n          let keys = Object.keys(kpRes.data)\r\n          keys.forEach((item) => {\r\n            this.keyDetailList.push(...kpRes.data[item].list)\r\n          })\r\n        }\r\n        let completion = this.changeToRate(this.taskDetail.coverage)\r\n        this.navbarTitle = this.taskDetail.taskName\r\n        try {\r\n          const that = this\r\n          let timer = setInterval(function () {\r\n            // 30s后取消\r\n            setTimeout(() => {\r\n              clearInterval(timer)\r\n            }, 30000)\r\n            if (that.$refs.mymap.isOnLoaded()) {\r\n              clearInterval(timer)\r\n              that.$refs.mymap.addKeyPoints(that.keyDetailList)\r\n              if (type != 'refresh') {\r\n                that.$refs.mymap.addRangeList(that.inspRangeList)\r\n              }\r\n              const params = {\r\n                extParam: {\r\n                  task_id: that.$route.query.taskId\r\n                }\r\n              }\r\n              // that.getEventAll(params);\r\n              // 问题上报、设施缺陷接口\r\n              that.getProblemDataList(params)\r\n              // let reslines = that.lines.concat(that.recordData);\r\n              // 图层回显方式改变\r\n              that.$refs.mymap.addInspRecordTileLineSource(that.lines, completion)\r\n              if (!that.currentPosition) return\r\n              const param = {\r\n                ...that.currentPosition,\r\n              }\r\n              that.$refs.mymap.setInspUserPosition(param)\r\n            }\r\n          }, 500)\r\n        } catch (e) {\r\n          console.log(e)\r\n          if (this.isMask) {\r\n            this.isMask = false\r\n          }\r\n        }\r\n      } else {\r\n        if (this.isMask) {\r\n          this.isMask = false\r\n        }\r\n        Toast({\r\n          message: '网络状态较差，加载任务失败',\r\n          icon: 'warn',\r\n          duration: 3000,\r\n        })\r\n      }\r\n    },\r\n    // 获取从app端传来的数据\r\n    postAppData(id) {\r\n      let that = this\r\n      return new Promise(async function (resolve, reject) {\r\n        /** 2021/9/22 取消缓存在app端的数据上报\r\n        const result = await that.$api.postAction(\"/ops-inspection/api/inspectionRecordMultiple\", that.recordData);\r\n        if (result.status) {\r\n          console.log(\"上报缓存在app的数据\");\r\n        };\r\n        */\r\n        if (that.reportFailTrackPoints.length <= 0) {\r\n          resolve()\r\n          return\r\n        }\r\n        const result2 = await inspectionTrackMultiple(that.reportFailTrackPoints)\r\n        if (result2 && result2.status) {\r\n          console.log('上报缓存在app端的轨迹点数据')\r\n          let resetTrackPoints = []\r\n          that.reportFailTrackPoints = resetTrackPoints\r\n          uniWebView.postMessage({\r\n            data: {\r\n              action: 'saveTrackPoints',\r\n              trackData: JSON.stringify(resetTrackPoints),\r\n              taskId: id,\r\n            },\r\n          })\r\n        }\r\n        resolve()\r\n      })\r\n    },\r\n    // 获取巡检事件\r\n    async getEventAll(params) {\r\n      const res = await inspectionEventAll(params)\r\n      if (res && res.status) {\r\n        let features = []\r\n        res.data.forEach((item) => {\r\n          if (item.eventItemText) {\r\n            const geom = JSON.parse(item.eventItemText)\r\n            let feature = {\r\n              geometry: geom.type === 'Feature' ? geom.geometry : geom,\r\n              properties: {},\r\n            }\r\n            this.$set(feature, 'geometry', this.computeCenter(feature.geometry))\r\n            this.$set(feature, 'id', item.id)\r\n            this.$set(feature.properties, 'eventType', item.eventType)\r\n            // this.$set(feature, \"eventType\", item.eventType);\r\n            // this.$refs.mymap.addInspEventMarker(feature);\r\n            features.push(feature)\r\n          }\r\n        })\r\n        this.$refs.mymap.addInspEventLayer(features)\r\n      }\r\n    },\r\n    // 获取事件类型\r\n    getEventTypeList() {\r\n      getEventTypeList()\r\n        .then((res) => {\r\n          this.eventTypeList = res.data.sons.map((item) => {\r\n            return {\r\n              value: item.code,\r\n              label: item.name,\r\n              children: item.sons.map((item) => {\r\n                return {\r\n                  value: item.code,\r\n                  label: item.name,\r\n                  children: item.sons.map((item) => {\r\n                    return {\r\n                      value: item.code,\r\n                      label: item.name,\r\n                    }\r\n                  }),\r\n                }\r\n              }),\r\n            }\r\n          })\r\n        })\r\n        .catch(() => {\r\n          Toast({\r\n            message: '字典加载失败',\r\n          })\r\n        })\r\n    },\r\n    // 轮询 currentPosition，绘制轨迹线\r\n    polling() {\r\n      let that = this\r\n      if (that.pollingFlag) {\r\n        yuanchu.locationAMap.requestLocations(\r\n          ['5', '1', '10', '30', '0', true],\r\n          (res) => {\r\n            that.currentPosition = JSON.parse(JSON.stringify(res))\r\n            that.currentPosition = Object.assign(that.currentPosition, {\r\n              direction: 0\r\n            })\r\n            if (!that.currentPosition) {\r\n              Toast({\r\n                message: '当前GPS信号弱',\r\n                duration: 1500\r\n              })\r\n              return\r\n            }\r\n            if (\r\n              that.trackPointList.length != 0 &&\r\n              that.trackPointList[that.trackPointList.length - 1][0] !=\r\n                that.currentPosition.longitude &&\r\n              that.trackPointList[that.trackPointList.length - 1][1] !=\r\n                that.currentPosition.latitude\r\n            ) {\r\n              // 新一次轮询的当前时间\r\n              let date_now = dayjs().format('YYYY-MM-DD HH:mm:ss')\r\n              // 上次最后的点位\r\n              let lastPoint = that.trackPointList[that.trackPointList.length - 1]\r\n              // 当前点位\r\n              let currentPoint = [that.currentPosition.longitude, that.currentPosition.latitude]\r\n              let distance = (Number(that.GetDistance(lastPoint, currentPoint))) * 1000\r\n              that.trackPointList.push([\r\n                that.currentPosition.longitude,\r\n                that.currentPosition.latitude\r\n              ])\r\n              that.trackPointTimeList.push(date_now)\r\n              console.log(that.trackPointList, this.trackPointTimeList)\r\n\r\n              // 构造临时线对象\r\n              let jsonLine = {\r\n                type: 'Feature',\r\n                properties: {},\r\n                geometry: {\r\n                  type: 'LineString',\r\n                  coordinates: that.trackPointList,\r\n                },\r\n              }\r\n              const coord = [parseFloat(that.currentPosition.longitude), parseFloat(that.currentPosition.latitude)];\r\n              const point = turf.point(coord);\r\n              mapObj.mapInstance.setSourceData(\"inspUser\", {\r\n                type: \"FeatureCollection\",\r\n                features: [point]\r\n              })\r\n              let jsonLineFeatureCollection = {\r\n                type: 'FeatureCollection',\r\n                features: [jsonLine],\r\n              }\r\n              if (mapObj.map.getSource('trackLineSource_now')) {\r\n                mapObj.map.getSource('trackLineSource_now').setData(jsonLineFeatureCollection)\r\n              } else {\r\n                mapObj.map.addSource('trackLineSource_now', {\r\n                  type: 'geojson',\r\n                  data: jsonLineFeatureCollection,\r\n                })\r\n              }\r\n              if (mapObj.map.getLayer('trackLineLayer_now')) {\r\n              } else {\r\n                mapObj.map.addLayer({\r\n                  id: 'trackLineLayer_now',\r\n                  type: 'line',\r\n                  source: 'trackLineSource_now',\r\n                  layout: {\r\n                    'line-cap': 'round',\r\n                    'line-join': 'round',\r\n                    'line-sort-key': 1,\r\n                    visibility: 'visible',\r\n                    // visibility: \"none\"\r\n                  },\r\n                  paint: {\r\n                    'line-color': '#addd52',\r\n                    'line-width': 5,\r\n                    'line-opacity': 0.8,\r\n                  },\r\n                }, 'inspUserLayer')\r\n              }\r\n              let param = {\r\n                ...that.currentPosition,\r\n              }\r\n              // that.$refs.mymap.setInspUserPosition(param)\r\n              if (mapObj.map.getLayer('trackLineLayer_arrow')) {\r\n              } else {\r\n                mapObj.map.addLayer({\r\n                  id: 'trackLineLayer_arrow',\r\n                  type: 'symbol',\r\n                  source: 'trackLineSource_now',\r\n                  layout: {\r\n                    'symbol-placement': 'line',\r\n                    'symbol-spacing': 20,\r\n                    'icon-image': 'arrowIcon',\r\n                    'icon-size': 0.5,\r\n                    'icon-allow-overlap': true,\r\n                    'symbol-sort-key': 3,\r\n                    visibility: 'visible',\r\n                    // visibility: \"none\"\r\n                  },\r\n                }, 'inspUserLayer')\r\n              }\r\n              // 改变管线颜色\r\n              that.$refs.mymap.changeInspLineSourceBySpeed(that.currentPosition)\r\n              // 记录过程点\r\n              that.postTrackData_Point(\r\n                that.trackPointList[that.trackPointList.length - 1],\r\n                that.trackPointTimeList[that.trackPointTimeList.length - 1],\r\n                distance\r\n              )\r\n            } else {\r\n              Toast({\r\n                message: '当前GPS信号弱,无法获取最新定位数据',\r\n                duration: 1500\r\n              })\r\n            }\r\n          },\r\n          (err) => {\r\n            Toast({\r\n              message: 'err' + err,\r\n              duration: 2000,\r\n            })\r\n          }\r\n        )\r\n        // this.uploadInspRoute()\r\n      }\r\n    },\r\n    // 绘制超速线段\r\n    drawOverSpeedTrack(lastPoint, currentPoint, gapTime = 3) {\r\n      let that = this\r\n      if ((that.GetDistance(lastPoint, currentPoint) * 1000) / gapTime > 10) {\r\n        that.overSpeedTrackLineList.push([lastPoint, currentPoint])\r\n        let overSpeedTrackLineCollection = {\r\n          type: 'Feature',\r\n          properties: {},\r\n          geometry: {\r\n            type: 'MultiLineString',\r\n            coordinates: that.overSpeedTrackLineList,\r\n          },\r\n        }\r\n        let overSpeedTrackLineFeatureCollection = {\r\n          type: 'FeatureCollection',\r\n          features: [overSpeedTrackLineCollection],\r\n        }\r\n        if (mapObj.map.getSource('trackLineSource_overSpeed')) {\r\n          mapObj.map\r\n            .getSource('trackLineSource_overSpeed')\r\n            .setData(overSpeedTrackLineFeatureCollection)\r\n        } else {\r\n          mapObj.map.addSource('trackLineSource_overSpeed', {\r\n            type: 'geojson',\r\n            data: overSpeedTrackLineFeatureCollection,\r\n          })\r\n        }\r\n        if (mapObj.map.getLayer('trackLineLayer_overSpeed')) {\r\n        } else {\r\n          mapObj.map.addLayer({\r\n            id: 'trackLineLayer_overSpeed',\r\n            type: 'line',\r\n            source: 'trackLineSource_overSpeed',\r\n            layout: {\r\n              'line-cap': 'round',\r\n              'line-join': 'round',\r\n              'line-sort-key': 2,\r\n              visibility: 'visible',\r\n              // visibility: \"none\"\r\n            },\r\n            paint: {\r\n              'line-color': '#FFB13B',\r\n              'line-width': 5,\r\n              'line-opacity': 1,\r\n            },\r\n          })\r\n        }\r\n      }\r\n    },\r\n    // 绘制起始点\r\n    drawStartPoint() {\r\n      let that = this\r\n      return new Promise(async function (resolve, reject) {\r\n        yuanchu.locationAMap.requestSingleLocation(\r\n          ['1'],\r\n          (res) => {\r\n            that.currentPosition = JSON.parse(JSON.stringify(res))\r\n            const param = {\r\n              ...that.currentPosition,\r\n            }\r\n            that.$refs.mymap.setInspUserPosition(param)\r\n          },\r\n          (err) => {\r\n            console.log('err=', err)\r\n          }\r\n        )\r\n        if (that.currentPosition != null) {\r\n          // 临时记录起始点和起始时间\r\n          let position = that.currentPosition\r\n          let tempPointList = []\r\n          tempPointList.push([position.longitude, position.latitude])\r\n          let date_now = dayjs().format('YYYY-MM-DD HH:mm:ss')\r\n          // 进行第一个点位上报\r\n          let pointData = tempPointList[tempPointList.length - 1]\r\n\r\n          // 经纬度数字化\r\n          for (let p = 0; p < pointData.length; p++) {\r\n            pointData[p] = Number(pointData[p])\r\n          }\r\n          let recordData = []\r\n          recordData.push({\r\n            taskId: that.taskDetail.id, // 任务id\r\n            longitude: pointData[0],\r\n            latitude: pointData[1],\r\n            inspTime: date_now,\r\n            distance: 0, // 第一个点距离为0\r\n            inspDate: date_now,\r\n            inspector: that.userInfo.userFullName,\r\n          })\r\n          // 使用上报点位作为起点\r\n          that.trackPointList.push([position.longitude, position.latitude])\r\n          that.trackPointTimeList.push(date_now)\r\n          // let jsonPoint = {\r\n          //   type: 'Feature',\r\n          //   properties: {},\r\n          //   geometry: {\r\n          //     type: 'Point',\r\n          //     coordinates: [position.longitude, position.latitude],\r\n          //   },\r\n          // }\r\n          // let jsonPointFeatureCollection = {\r\n          //   type: 'FeatureCollection',\r\n          //   features: [jsonPoint],\r\n          // }\r\n          // if (mapObj.map.getSource('startPointSource_now')) {\r\n          //   mapObj.map\r\n          //     .getSource('startPointSource_now')\r\n          //     .setData(jsonPointFeatureCollection)\r\n          // } else {\r\n          //   mapObj.map.addSource('startPointSource_now', {\r\n          //     type: 'geojson',\r\n          //     data: jsonPointFeatureCollection,\r\n          //   })\r\n          // }\r\n          // if (mapObj.map.getLayer('startPointLayer_now')) {\r\n          // } else {\r\n          //   mapObj.map.addLayer({\r\n          //     id: 'startPointLayer_now',\r\n          //     type: 'circle',\r\n          //     source: 'startPointSource_now',\r\n          //     layout: {\r\n          //       'circle-sort-key': 5,\r\n          //       visibility: 'visible',\r\n          //       // visibility: \"none\"\r\n          //     },\r\n          //     paint: {\r\n          //       'circle-radius': 3,\r\n          //       'circle-stroke-width': 5,\r\n          //       'circle-stroke-color': '#2A83E6',\r\n          //       'circle-color': 'white',\r\n          //     },\r\n          //   })\r\n          // }\r\n          // // label\r\n          // if (mapObj.map.getLayer('startPoint_label')) {\r\n          // } else {\r\n          //   mapObj.map.addLayer({\r\n          //     id: 'startPoint_label',\r\n          //     type: 'symbol',\r\n          //     source: 'startPointSource_now',\r\n          //     layout: {\r\n          //       'symbol-placement': 'point',\r\n          //       'icon-image': 'start_point',\r\n          //       'icon-size': 0.6,\r\n          //       'icon-offset': [0, -35],\r\n          //       'icon-allow-overlap': true,\r\n          //       'symbol-sort-key': 2,\r\n          //       visibility: 'visible',\r\n          //       // visibility: \"none\"\r\n          //     },\r\n          //   })\r\n          // }\r\n          // resolve(true)\r\n          await api\r\n            .inspectionTrack(recordData)\r\n            .then((res) => {\r\n              if (res && res.status) {\r\n                console.log('轨迹存储成功')\r\n                // 使用上报点位作为起点\r\n                // that.trackPointList.push([\r\n                //   position.longitude,\r\n                //   position.latitude\r\n                // ]);\r\n                // that.trackPointTimeList.push(date_now);\r\n                let jsonPoint = {\r\n                  type: 'Feature',\r\n                  properties: {},\r\n                  geometry: {\r\n                    type: 'Point',\r\n                    coordinates: [position.longitude, position.latitude],\r\n                  },\r\n                }\r\n                let jsonPointFeatureCollection = {\r\n                  type: 'FeatureCollection',\r\n                  features: [jsonPoint],\r\n                }\r\n                if (mapObj.map.getSource('startPointSource_now')) {\r\n                  mapObj.map.getSource('startPointSource_now').setData(jsonPointFeatureCollection)\r\n                } else {\r\n                  mapObj.map.addSource('startPointSource_now', {\r\n                    type: 'geojson',\r\n                    data: jsonPointFeatureCollection,\r\n                  })\r\n                }\r\n                if (mapObj.map.getLayer('startPointLayer_now')) {\r\n                } else {\r\n                  mapObj.map.addLayer({\r\n                    id: 'startPointLayer_now',\r\n                    type: 'circle',\r\n                    source: 'startPointSource_now',\r\n                    layout: {\r\n                      'circle-sort-key': 5,\r\n                      visibility: 'visible',\r\n                      // visibility: \"none\"\r\n                    },\r\n                    paint: {\r\n                      'circle-radius': 3,\r\n                      'circle-stroke-width': 5,\r\n                      'circle-stroke-color': '#2A83E6',\r\n                      'circle-color': 'white',\r\n                    },\r\n                  }, 'inspUserLayer')\r\n                }\r\n                // label\r\n                if (mapObj.map.getLayer('startPoint_label')) {\r\n                } else {\r\n                  mapObj.map.addLayer({\r\n                    id: 'startPoint_label',\r\n                    type: 'symbol',\r\n                    source: 'startPointSource_now',\r\n                    layout: {\r\n                      'symbol-placement': 'point',\r\n                      'icon-image': 'start_point',\r\n                      'icon-size': 0.6,\r\n                      'icon-offset': [0, -35],\r\n                      'icon-allow-overlap': true,\r\n                      'symbol-sort-key': 2,\r\n                      visibility: 'visible',\r\n                      // visibility: \"none\"\r\n                    },\r\n                  })\r\n                }\r\n                resolve(true)\r\n              } else {\r\n                // console.log(\"轨迹存储失败\");\r\n                resolve(false)\r\n              }\r\n            })\r\n            .catch((err) => {\r\n              // console.log(\"轨迹存储失败err\", err);\r\n              reject(err)\r\n            })\r\n        }\r\n      })\r\n    },\r\n    // 绘制终止点\r\n    async drawEndPoint(type = null) {\r\n      let that = this\r\n      yuanchu.locationAMap.stopRequestLocations()\r\n      if (that.currentPosition != null) {\r\n        let lastPoint = that.trackPointList[that.trackPointList.length - 1]\r\n        let currentPoint = [that.currentPosition.longitude, that.currentPosition.latitude]\r\n        let distance = (Number(that.GetDistance(lastPoint, currentPoint))) * 1000\r\n        that.trackPointList.push([that.currentPosition.longitude, that.currentPosition.latitude])\r\n        let date_now = dayjs().format('YYYY-MM-DD HH:mm:ss')\r\n        that.trackPointTimeList.push(date_now)\r\n        let jsonPoint = {\r\n          type: 'Feature',\r\n          properties: {},\r\n          geometry: {\r\n            type: 'Point',\r\n            coordinates: [that.currentPosition.longitude, that.currentPosition.latitude],\r\n          },\r\n        }\r\n        let jsonPointFeatureCollection = {\r\n          type: 'FeatureCollection',\r\n          features: [jsonPoint],\r\n        }\r\n        if (mapObj.map.getSource('endPointSource_now')) {\r\n          mapObj.map.getSource('endPointSource_now').setData(jsonPointFeatureCollection)\r\n        } else {\r\n          mapObj.map.addSource('endPointSource_now', {\r\n            type: 'geojson',\r\n            data: jsonPointFeatureCollection,\r\n          })\r\n        }\r\n        if (mapObj.map.getLayer('endPointLayer_now')) {\r\n        } else {\r\n          mapObj.map.addLayer({\r\n            id: 'endPointLayer_now',\r\n            type: 'circle',\r\n            source: 'endPointSource_now',\r\n            layout: {\r\n              'circle-sort-key': 5,\r\n              visibility: 'visible',\r\n              // visibility: \"none\"\r\n            },\r\n            paint: {\r\n              'circle-radius': 3,\r\n              'circle-stroke-width': 5,\r\n              'circle-stroke-color': '#addd52',\r\n              'circle-color': 'white',\r\n            },\r\n          }, 'inspUserLayer')\r\n        }\r\n\r\n        // 补充trackline\r\n        let jsonLine = {\r\n          type: 'Feature',\r\n          properties: {},\r\n          geometry: {\r\n            type: 'LineString',\r\n            coordinates: that.trackPointList,\r\n          },\r\n        }\r\n        let jsonLineFeatureCollection = {\r\n          type: 'FeatureCollection',\r\n          features: [jsonLine],\r\n        }\r\n        if (mapObj.map.getSource('trackLineSource_now')) {\r\n          mapObj.map.getSource('trackLineSource_now').setData(jsonLineFeatureCollection)\r\n        } else {\r\n          mapObj.map.addSource('trackLineSource_now', {\r\n            type: 'geojson',\r\n            data: jsonLineFeatureCollection,\r\n          })\r\n        }\r\n        if (mapObj.map.getLayer('trackLineLayer_now')) {\r\n        } else {\r\n          mapObj.map.addLayer({\r\n            id: 'trackLineLayer_now',\r\n            type: 'line',\r\n            source: 'trackLineSource_now',\r\n            layout: {\r\n              'line-cap': 'round',\r\n              'line-join': 'round',\r\n              visibility: 'visible',\r\n              // visibility: \"none\"\r\n            },\r\n            paint: {\r\n              'line-color': '#addd52',\r\n              'line-width': 5,\r\n              'line-opacity': 0.8,\r\n            },\r\n          }, 'inspUserLayer')\r\n        }\r\n        // label\r\n        if (mapObj.map.getLayer('endPoint_label')) {\r\n        } else {\r\n          mapObj.map.addLayer({\r\n            id: 'endPoint_label',\r\n            type: 'symbol',\r\n            source: 'endPointSource_now',\r\n            layout: {\r\n              'symbol-placement': 'point',\r\n              'icon-image': 'end_point',\r\n              'icon-size': 0.6,\r\n              'icon-offset': [0, -35],\r\n              'icon-allow-overlap': true,\r\n              'symbol-sort-key': 2,\r\n              visibility: 'visible',\r\n              // visibility: \"none\"\r\n            },\r\n          })\r\n        }\r\n        that.pollingFlag = false\r\n        // 记录终止点\r\n        that.postTrackData_Point(\r\n          that.trackPointList[that.trackPointList.length - 1],\r\n          that.trackPointTimeList[that.trackPointTimeList.length - 1],\r\n          distance\r\n        )\r\n        // 上传之前上传失败的点位\r\n        that.reportFailTrackPoints.length > 0 && that.postFailTrackData()\r\n        that.$refs.mymap.uploadFiledPipeIdList.length > 0 && api.recordInspLine(that.$refs.mymap.uploadFiledPipeIdList).then(res => {\r\n          if (res.status) {\r\n            console.log('管线补充上传成功')\r\n          }\r\n        })\r\n        if (type == 'task') {\r\n          this.stratOrEndTaskRecord(2) // 已巡检状态 '2'\r\n        }\r\n      } else {\r\n        let type = type\r\n        let timer = setTimeout(() => {\r\n          that.drawEndPoint(type)\r\n        }, 1000)\r\n      }\r\n    },\r\n    async postFailTrackData() {\r\n      let that = this\r\n      await api\r\n        .inspectionTrack(that.reportFailTrackPoints)\r\n        .then((res) => {\r\n          if (res && res.status) {\r\n            console.log('轨迹存储成功')\r\n          } else {\r\n            // 上传失败的点位，暂时存在app端\r\n            let timer = setTimeout(() => {\r\n              that.postFailTrackData()\r\n            }, 2000)\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          console.log('巡检轨迹存储失败：' + err)\r\n        })\r\n    },\r\n\r\n    // 单点-后端记录轨迹数据\r\n    async postTrackData_Point(pointData, timeData, distance) {\r\n      let that = this\r\n      for (let p = 0; p < pointData.length; p++) {\r\n        pointData[p] = Number(pointData[p])\r\n      }\r\n      let date_now = dayjs().format('YYYY-MM-DD HH:mm:ss')\r\n      let recordData = []\r\n      recordData.push({\r\n        taskId: that.taskDetail.id,\r\n        inspDate: timeData,\r\n        inspTime: date_now,\r\n        distance,\r\n        inspector: that.userInfo.userFullname,\r\n        longitude: pointData[0],\r\n        latitude: pointData[1],\r\n      })\r\n      await api\r\n        .inspectionTrack(recordData)\r\n        .then((res) => {\r\n          if (res && res.status) {\r\n            console.log('轨迹存储成功', recordData)\r\n          } else {\r\n            // 上传失败的点位，暂时存在app端\r\n            that.reportFailTrackPoints.push(recordData)\r\n            console.log('that.reportFailTrackPoints: ', that.reportFailTrackPoints);\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          console.log('巡检轨迹存储失败：' + err)\r\n        })\r\n    },\r\n    stratOrEndTaskRecord(status) {\r\n      let data = {\r\n        planId: this.planDetail.planId,\r\n        taskName: this.taskDetail.taskName,\r\n        taskCode: this.taskDetail.taskCode,\r\n        taskStatus: status,\r\n        id: this.taskDetail.id,\r\n        taskType: this.taskDetail.taskType\r\n      }\r\n      api.changeTaskStatus(data).then((res) => {\r\n        if (res.status) {\r\n          console.log(res)\r\n        }\r\n      })\r\n    },\r\n    // 清除缓存的轨迹数据\r\n    clearBufferTrack() {\r\n      let that = this\r\n      //数组归零\r\n      that.trackPointList = []\r\n      that.trackPointTimeList = []\r\n      that.overSpeedTrackLineList = []\r\n      //数据源清空\r\n      if (mapObj.map.getSource('trackLineSource_now')) {\r\n        mapObj.map.getSource('trackLineSource_now').setData({\r\n          type: 'FeatureCollection',\r\n          features: [],\r\n        })\r\n      }\r\n      if (mapObj.map.getSource('trackLineSource_overSpeed')) {\r\n        mapObj.map.getSource('trackLineSource_overSpeed').setData({\r\n          type: 'FeatureCollection',\r\n          features: [],\r\n        })\r\n      }\r\n      if (mapObj.map.getSource('startPointSource_now')) {\r\n        mapObj.map.getSource('startPointSource_now').setData({\r\n          type: 'FeatureCollection',\r\n          features: [],\r\n        })\r\n      }\r\n\r\n      if (mapObj.map.getSource('endPointSource_now')) {\r\n        mapObj.map.getSource('endPointSource_now').setData({\r\n          type: 'FeatureCollection',\r\n          features: [],\r\n        })\r\n      }\r\n    },\r\n    addMapImg() {\r\n      let that = this\r\n      mapObj.map.loadImage(\r\n        require('@assets/img/inspection/white_arrow_right.png'),\r\n        function (error, image) {\r\n          if (error) throw error\r\n          if (!mapObj.map.hasImage('arrowIcon')) {\r\n            mapObj.map.addImage('arrowIcon', image, {})\r\n          }\r\n        }\r\n      )\r\n      mapObj.map.loadImage(\r\n        require('@assets/img/inspection/icon_starting_point.png'),\r\n        function (error, image) {\r\n          if (error) throw error\r\n          if (!mapObj.map.hasImage('start_point')) {\r\n            mapObj.map.addImage('start_point', image, {})\r\n          }\r\n        }\r\n      )\r\n      mapObj.map.loadImage(\r\n        require('@assets/img/inspection/icon_at_end.png'),\r\n        function (error, image) {\r\n          if (error) throw error\r\n          if (!mapObj.map.hasImage('end_point')) {\r\n            mapObj.map.addImage('end_point', image, {})\r\n          }\r\n        }\r\n      )\r\n    },\r\n    // 开始记录 上传起点成功后才进入巡检过程\r\n    startInspRecord() {\r\n      if (this.isView) {\r\n        Toast({\r\n          message: '该巡检任务已结束',\r\n          duration: 1500\r\n        })\r\n        return\r\n      }\r\n      if (!this.currentPosition || !this.currentPosition.longitude) {\r\n        Toast({\r\n          message: '当前GPS信号弱，无法开始任务',\r\n          duration: 1000,\r\n        })\r\n        return\r\n      }\r\n      this.ifRecording = true\r\n      this.clearBufferTrack()\r\n      this.addMapImg()\r\n      this.drawStartPoint()\r\n        .then((res) => {\r\n          if (res) {\r\n            Toast({\r\n              message: '开始记录',\r\n              duration: 1000,\r\n            })\r\n            this.pollingFlag = true\r\n            this.ifRecording = true\r\n            this.startLocation()\r\n            localStorage.setItem('startRecordLines', 'start')\r\n            // 开始轮询\r\n            this.polling()\r\n            // 记录当前时间\r\n            this.startRecordTimer = new Date()\r\n          } else {\r\n            Toast({\r\n              message: '网络状态异常，无法开始任务',\r\n              duration: 3000,\r\n            })\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          console.log(err)\r\n          // Toast({\r\n          //   message: `${err}`,\r\n          //   duration: 3000\r\n          // });\r\n        })\r\n    },\r\n    // 结束记录\r\n    endRecord(type = null) {\r\n      let diff = Math.floor((new Date() - this.startRecordTimer) / 1000)\r\n\r\n      if (diff <= 10) {\r\n        Toast({\r\n          message: `结束太快了,请${10 - diff}秒后再试`,\r\n          duration: 1000,\r\n        })\r\n        return\r\n      }\r\n      Dialog.confirm({\r\n        title: '标题',\r\n        message: '确定结束本次巡检？',\r\n      })\r\n        .then(() => {\r\n          this.endRecordConfirm(type)\r\n        })\r\n        .catch(() => {\r\n          this.endRecordCancel()\r\n        })\r\n    },\r\n    // uploadInspRoute() {\r\n    //   try {\r\n    //     const that = this;\r\n    //     // 定时器\r\n    //     let timer = setInterval(function () {\r\n    //       // 清除定时器\r\n    //       // clearInterval(timer);\r\n    //       let tempTrackPolntList = JSON.parse(JSON.stringify(this.trackPointList))\r\n    //       if (tempTrackPolntList.length > 0) {\r\n\r\n    //       }\r\n    //     }, 1000 * 60 * 60 * 24 * 1)\r\n    //   } catch (e) {\r\n    //     console.log(e)\r\n    //   }\r\n    // },\r\n    // 结束记录取消\r\n    endRecordCancel() {\r\n      this.endRecordShow = false\r\n    },\r\n    // 结束记录确认\r\n    async endRecordConfirm(type = null) {\r\n      this.endRecordShow = false\r\n      this.pollingFlag = false\r\n      yuanchu.locationAMap.stopRequestLocations()\r\n      await this.drawEndPoint(type)\r\n      this.ifRecording = false\r\n      localStorage.setItem('startRecordLines', 'end')\r\n      if (type != 'leave') {\r\n        this.refreshTask()\r\n      }\r\n      Toast({\r\n        message: '结束成功',\r\n        duration: 2000\r\n      })\r\n      /** 2021/9/22 取消上报已巡检管线\r\n      // 上报巡检记录\r\n      // 需过滤出已巡检管线\r\n      let sourceData = await this.$refs.mymap.findHadInspFeature();\r\n      let recordData = sourceData.map((item) => {\r\n        return {\r\n          caliber:  item.properties.caliber,\r\n          guid: item.properties.guid,\r\n          length: item.properties.length,\r\n          taskId: this.taskDetail.taskId,\r\n        };\r\n      });\r\n      recordData = recordData.filter(x => this.lines.every(y => y.guid != x.guid));\r\n      if (recordData.length <= 0) {\r\n        uni.showToast({\r\n          title: \"结束记录\",\r\n          duration: 3000,\r\n        });\r\n        let t = setTimeout(()=>{\r\n          this.recordButtonLoading = false;\r\n        }, 1000);\r\n        return;\r\n      }\r\n      this.$api.postAction(\"/ops-inspection/api/inspectionRecordMultiple\", recordData)\r\n        .then((res) => {\r\n          if (res && res.status) {\r\n            console.log(\"新增巡检记录成功\");\r\n            // 结束记录后就删除本地缓存\r\n            uniWebView.postMessage({\r\n              data: {\r\n                action: \"removeInspRecord\",\r\n                taskId: this.taskDetail.taskId\r\n              }\r\n            })\r\n          } else {\r\n            if (recordData.length > 0) {\r\n              uniWebView.postMessage({\r\n                data: {\r\n                  action: \"saveInspRecord\",\r\n                  inspRecordData: JSON.stringify(recordData),\r\n                  taskId: this.taskDetail.taskId,\r\n                },\r\n              });\r\n            }\r\n          }\r\n        })\r\n        .finally(()=>{\r\n          uni.showToast({\r\n            title: \"结束记录\",\r\n            duration: 3000,\r\n          });\r\n          let t = setTimeout(()=>{\r\n            this.recordButtonLoading = false;\r\n          }, 1000);\r\n        })\r\n      */\r\n    },\r\n\r\n    // 定时向本机发送存储信息\r\n    async setLocalStorage() {\r\n      let that = this\r\n      if (this.pollingFlag) {\r\n        /* let storageTrackData = {\r\n          trackPointList: that.trackPointList,\r\n          trackPointTimeList: that.trackPointTimeList,\r\n          overSpeedTrackLineList: that.overSpeedTrackLineList,\r\n        };\r\n\r\n        uniWebView.postMessage({\r\n          data: {\r\n            action: \"saveInspTrack\",\r\n            inspTrackData: JSON.stringify(storageTrackData),\r\n            taskId: that.taskDetail.taskId,\r\n          },\r\n        }); */\r\n\r\n        // 上报巡检记录\r\n        let sourceData = await this.$refs.mymap.findHadInspFeature()\r\n        let recordData = sourceData.map((item) => {\r\n          return {\r\n            caliber: item.properties.caliber,\r\n            guid: item.properties.guid,\r\n            length: item.properties.length,\r\n            taskId: this.taskDetail.taskId,\r\n          }\r\n        })\r\n        recordData = recordData.filter((x) => this.lines.every((y) => y.guid != x.guid))\r\n        if (recordData.length > 0) {\r\n          this.$api\r\n            .postAction('/ops-inspection/api/inspectionRecordMultiple', recordData)\r\n            .then((res) => {\r\n              if (res && res.status) {\r\n                console.log('新增巡检记录成功')\r\n              } else {\r\n                uniWebView.postMessage({\r\n                  data: {\r\n                    action: 'saveInspRecord',\r\n                    inspRecordData: JSON.stringify(recordData),\r\n                    taskId: this.taskDetail.taskId,\r\n                  },\r\n                })\r\n              }\r\n            })\r\n        }\r\n        let timer = setTimeout(() => {\r\n          this.setLocalStorage()\r\n        }, 15000)\r\n      }\r\n    },\r\n    // 查询app端存储的该任务的巡检记录和轨迹点位数据\r\n    getAppInspData(id) {\r\n      return new Promise(function (resolve) {\r\n        /** 2021/9/22 取消获取app端缓存的数据\r\n        uniWebView.postMessage({\r\n          data: {\r\n            action: \"getInspRecord\",\r\n            taskId: id,\r\n          },\r\n        });\r\n        */\r\n        // uniWebView.postMessage({\r\n        //   data: {\r\n        //     action: \"getTrackPoints\",\r\n        //     taskId: id\r\n        //   }\r\n        // })\r\n        resolve()\r\n      })\r\n    },\r\n    // 开始定位\r\n    startLocation() {\r\n      if (!this.currentPosition || !this.currentPosition.longitude || !this.currentPosition.latitude) {\r\n        Toast({\r\n          message: '获取位置失败!',\r\n          duration: 2000\r\n        })\r\n        return\r\n      } else {\r\n        const coord = [parseFloat(this.currentPosition.longitude), parseFloat(this.currentPosition.latitude)]\r\n        this.flyToPoint(coord)\r\n      }\r\n    },\r\n    /**\r\n     * 超图坐标转换为feature\r\n     */\r\n    superMapParamsToFeature(geometry) {\r\n      let coord\r\n      let type\r\n      switch (geometry.type) {\r\n        case 'POINT':\r\n          type = 'Point'\r\n          coord = [geometry.points[0].x, geometry.points[0].y]\r\n          break\r\n        case 'LINE':\r\n          type = 'LineString'\r\n          coord = geometry.points.map((point) => [point.x, point.y])\r\n          break\r\n        case 'REGION':\r\n          type = 'Polygon'\r\n          coord = [geometry.points.map((point) => [point.x, point.y])]\r\n          break\r\n      }\r\n      return {\r\n        type: 'Feature',\r\n        geometry: {\r\n          type,\r\n          coordinates: coord,\r\n        },\r\n      }\r\n    },\r\n    featureToObject(names, values) {\r\n      let obj = {}\r\n      names.forEach((name, index) => {\r\n        obj[name] = values[index]\r\n      })\r\n      return obj\r\n    },\r\n    goEventOrFlawDetail(feature, type) {\r\n      let currentPoint = feature\r\n      currentPoint = feature\r\n      currentPoint.code = feature.deviceId || ''\r\n      currentPoint.bigType = feature.bizType || ''\r\n      currentPoint.lng = feature.startLongitude\r\n      currentPoint.lat = feature.startLatitude\r\n      // 要素所在图层ID和属性信息\r\n      // currentPoint.layerID = feature.layer.id || ''\r\n      // currentPoint.layerType = feature.layer.type || ''\r\n      // currentPoint.properties = feature.properties || ''\r\n      // 底图要素name_local或设施要素road_name,id\r\n      currentPoint.road_name = feature.road\r\n      // currentPoint.id = feature.properties.id\r\n      if (type == 'event') {\r\n        // this.$router.push({\r\n        //   name: 'addProblemIndex',\r\n        //   query: { msg: currentPoint, token: this.formToken, taskId: this.$route.query.taskId },\r\n        //   params: { type: 'add' }\r\n        // })\r\n        this.$router.push({\r\n          name: 'addProblemIndex',\r\n          query: { msg: currentPoint, token: this.formToken, taskId: this.$route.query.taskId },\r\n          params: { type: 'add' },\r\n        })\r\n      } else {\r\n        this.$router.push({\r\n          name: 'addFlaws',\r\n          query: { msg: currentPoint, token: this.formToken, taskId: this.$route.query.taskId },\r\n          params: { type: 'add' }\r\n        })\r\n      }\r\n    },\r\n    // 确认\r\n    onConfirm() {\r\n      if (true) {\r\n        let feature = this.signForm.feature\r\n        let copySignForm = this.deepClone(this.signForm)\r\n        copySignForm.inspDate = dayjs().format('YYYY-MM-DD HH:mm:ss')\r\n        copySignForm.ext1 = copySignForm.remark // 备注\r\n        delete copySignForm.feature\r\n        api.signIn(copySignForm).then((res) => {\r\n          if (res && res.status) {\r\n            Toast({\r\n              message: '此关键点签到成功',\r\n              duration: 2000,\r\n            })\r\n            // 巡检事件上报\r\n            if (copySignForm.isReport == '问题上报') {\r\n              this.goEventOrFlawDetail(feature, 'event');\r\n            } else if (copySignForm.isReport == '新增缺陷') {\r\n              this.goEventOrFlawDetail(feature, 'flaw');\r\n            }\r\n          } else {\r\n            Toast({\r\n              message: '此关键点签到失败',\r\n              duration: 2000,\r\n            })\r\n          }\r\n        })\r\n        this.signShow = false\r\n        this.signForm.remark = ''\r\n        this.signForm.deviceStatus = '0'\r\n        this.signForm.isReport = ''\r\n        this.signForm.inspImagesList = []\r\n        this.attachment = ''\r\n        mapObj.mapInstance.setSourceData('buffered', {\r\n          type: 'FeatureCollection',\r\n          features: [],\r\n        })\r\n        // localStorage.setItem(\"isReportEvent\", false);\r\n        this.refreshTask()\r\n      } else {\r\n        console.log('验证失败')\r\n      }\r\n    },\r\n    // 取消\r\n    onCancel() {\r\n      console.log('click cancel')\r\n      // localStorage.setItem(\"isReportEvent\", false);\r\n      this.signShow = false\r\n      mapObj.mapInstance.setSourceData('buffered', {\r\n        type: 'FeatureCollection',\r\n        features: [],\r\n      })\r\n    },\r\n    // 签到\r\n    async startSignIn(feature) {\r\n      // 利用feature来判断是否处于35m范围内，如果处于，可以进行签到，否则不能进行签到\r\n      const position = this.currentPosition\r\n      if (!position) {\r\n        Toast.warning({\r\n          message: '获取不到巡检人位置',\r\n          duration: 2000,\r\n        })\r\n        return\r\n      }\r\n      const coord = [\r\n        parseFloat(position.longitude),\r\n        parseFloat(position.latitude),\r\n      ]\r\n      const point = turf.point(coord)\r\n      const engGeom = feature.geom\r\n      const buffered = turf.buffer(engGeom, 0.035, { unit: 'kilometers' })\r\n      const isInBuffer = turf.inside(point, buffered)\r\n      if (!isInBuffer) {\r\n        Toast({\r\n          message: '未处于该关键点范围内',\r\n          duration: 2000,\r\n        })\r\n        return\r\n      }\r\n      Toast.loading({\r\n        message: '正在加载',\r\n        forbidClick: true,\r\n      })\r\n      this.signShow = true\r\n      this.pointListShow = false\r\n      this.attachment = ''\r\n      this.isReport = ''\r\n      this.deviceName = feature.deviceType + (feature.deviceId || '')\r\n      if (!feature.deviceStatus || feature.deviceStatus == '2') {\r\n        // 未巡检\r\n        this.hasSignIn = false\r\n        this.signForm.remark = ''\r\n        this.signForm.deviceStatus = '0'\r\n        this.signForm.inspImagesList = []\r\n        this.signForm.pointId = feature.id\r\n        this.signForm.taskId = this.$route.query.taskId,\r\n        this.signForm.feature = feature\r\n      } else {\r\n        this.hasSignIn = true\r\n        let params = {\r\n          page: 1,\r\n          size: 999,\r\n          deviceStatus: feature.deviceStatus,\r\n          pointId: feature.id,\r\n          taskId: this.$route.query.taskId,\r\n        }\r\n        const res = await request({\r\n          url: '/xasw-pipe-operation/inspPointRecord/page',\r\n          method: 'get',\r\n          params: params,\r\n        })\r\n        if (res && res.status) {\r\n          let result = res.data.records[0]\r\n          this.signForm.deviceStatus = result.deviceStatus\r\n          this.signForm.remark = result.ext1\r\n          this.signForm.isReport = result.isReport\r\n          const att = await request({\r\n            url: '/xasw-pipe-operation/inspPointRecord',\r\n            method: 'get',\r\n            params: { id: result.id }\r\n          })\r\n          if (att && att.status) {\r\n            this.signForm.inspImagesList = att.data.inspImagesList\r\n            this.attachment = att.data.inspImagesList[0].fileId\r\n          }\r\n        }\r\n      }\r\n      console.log('signForm', this.signForm)\r\n    },\r\n    // 事件类型选择确认\r\n    eventTypeConfirm(event) {\r\n      this.$set(this.signForm, 'eventType', event[1].label)\r\n      this.signForm.inspItemId = event[1].value\r\n    },\r\n    // 深拷贝\r\n    deepClone(data) {\r\n      return JSON.parse(JSON.stringify(data))\r\n    },\r\n    // 计算中心点\r\n    computeCenter(feature) {\r\n      let position\r\n      if (feature.type === 'Polygon' || feature.type === 'MultiPolygon') {\r\n        const center = turf.center(feature)\r\n        position = center.geometry\r\n      } else if (feature.type === 'LineString') {\r\n        const center = turf.center(feature)\r\n        position = center.geometry\r\n      } else if (feature.type === 'Point') {\r\n        position = feature\r\n      }\r\n      return position\r\n    },\r\n    reportEvent(feature) {\r\n      this.reportFooterShow = false\r\n      this.$router.push({\r\n        path: '/pages/inspectionManage/add-event',\r\n        query: {\r\n          taskId: this.taskDetail.taskId,\r\n          feature: feature,\r\n          rangeList: this.rangeList,\r\n          taskDetail: this.taskDetail,\r\n        },\r\n      })\r\n    },\r\n    GetDistance(coordArray1, coordArray2) {\r\n      let lng1 = coordArray1[0]\r\n      let lat1 = coordArray1[1]\r\n      let lng2 = coordArray2[0]\r\n      let lat2 = coordArray2[1]\r\n      let radLat1 = (lat1 * Math.PI) / 180.0\r\n      let radLat2 = (lat2 * Math.PI) / 180.0\r\n      let a = radLat1 - radLat2\r\n      let b = (lng1 * Math.PI) / 180.0 - (lng2 * Math.PI) / 180.0\r\n      let s =\r\n        2 *\r\n        Math.asin(\r\n          Math.sqrt(\r\n            Math.pow(Math.sin(a / 2), 2) +\r\n              Math.cos(radLat1) * Math.cos(radLat2) * Math.pow(Math.sin(b / 2), 2)\r\n          )\r\n        )\r\n      s = s * 6378.137 // EARTH_RADIUS;\r\n      s = Math.round(s * 10000) / 10000\r\n      return s\r\n    },\r\n    showRoute() {\r\n      this.isShowRoute = !this.isShowRoute\r\n      if (mapObj.map.getLayoutProperty('trackLineLayer_now', 'visibility') === 'visible') {\r\n        mapObj.map.setLayoutProperty('trackLineLayer_now', 'visibility', 'none')\r\n      } else {\r\n        mapObj.map.setLayoutProperty('trackLineLayer_now', 'visibility', 'visible')\r\n      }\r\n      if (mapObj.map.getLayoutProperty('trackLineLayer_arrow', 'visibility') === 'visible') {\r\n        mapObj.map.setLayoutProperty('trackLineLayer_arrow', 'visibility', 'none')\r\n      } else {\r\n        mapObj.map.setLayoutProperty('trackLineLayer_arrow', 'visibility', 'visible')\r\n      }\r\n      if (mapObj.map.getLayoutProperty('trackLineLayer_overSpeed', 'visibility') === 'visible') {\r\n        mapObj.map.setLayoutProperty('trackLineLayer_overSpeed', 'visibility', 'none')\r\n      } else {\r\n        mapObj.map.setLayoutProperty('trackLineLayer_overSpeed', 'visibility', 'visible')\r\n      }\r\n      if (mapObj.map.getLayoutProperty('startPointLayer_now', 'visibility') === 'visible') {\r\n        mapObj.map.setLayoutProperty('startPointLayer_now', 'visibility', 'none')\r\n      } else {\r\n        mapObj.map.setLayoutProperty('startPointLayer_now', 'visibility', 'visible')\r\n      }\r\n      if (mapObj.map.getLayoutProperty('endPointLayer_now', 'visibility') === 'visible') {\r\n        mapObj.map.setLayoutProperty('endPointLayer_now', 'visibility', 'none')\r\n      } else {\r\n        mapObj.map.setLayoutProperty('endPointLayer_now', 'visibility', 'visible')\r\n      }\r\n      if (mapObj.map.getLayoutProperty('startPoint_label', 'visibility') === 'visible') {\r\n        mapObj.map.setLayoutProperty('startPoint_label', 'visibility', 'none')\r\n      } else {\r\n        mapObj.map.setLayoutProperty('startPoint_label', 'visibility', 'visible')\r\n      }\r\n      if (mapObj.map.getLayoutProperty('endPoint_label', 'visibility') === 'visible') {\r\n        mapObj.map.setLayoutProperty('endPoint_label', 'visibility', 'none')\r\n      } else {\r\n        mapObj.map.setLayoutProperty('endPoint_label', 'visibility', 'visible')\r\n      }\r\n    },\r\n    resetMapView() {\r\n      this.$refs.mymap && mapObj.map.resetNorthPitch()\r\n    },\r\n    clickReportEvent() {\r\n      console.log('click the clickReportEvent')\r\n      let position = []\r\n      if (!this.currentPosition) {\r\n        let pos = undefined\r\n        if (this.rangeList.length > 0) {\r\n          let feature = JSON.parse(this.rangeList[0].taskRangerGeom)\r\n          if (feature.geometry.type === 'Polygon' || feature.geometry.type === 'MultiPolygon') {\r\n            const center = turf.center(feature.geometry)\r\n            pos = center.geometry\r\n          } else if (feature.geometry.type === 'LineString') {\r\n            const center = turf.center(feature.geometry)\r\n\r\n            pos = center.geometry\r\n          } else if (feature.geometry.type === 'Point') {\r\n            pos = feature.geometry\r\n          }\r\n          if (pos) {\r\n            position = pos.coordinates\r\n          } else {\r\n            position = [119.96123559772968, 30.27094691991806]\r\n          }\r\n        }\r\n      } else {\r\n        position = [\r\n          parseFloat(this.currentPosition.longitude),\r\n          parseFloat(this.currentPosition.latitude),\r\n        ]\r\n      }\r\n      this.signShow = false\r\n      this.$router.push({\r\n        name: 'addEvent',\r\n        query: {\r\n          taskId: this.taskDetail.taskId,\r\n          rangeList: this.rangeList,\r\n          taskDetail: this.taskDetail,\r\n          position: position,\r\n        },\r\n      })\r\n    },\r\n    // 系统提示音\r\n    // speech() {\r\n    //   // 私有变量timer\r\n    //   let timer = new Date();\r\n    //   // 第一次进入\r\n    //   let isFirstIn = true;\r\n    //   return {\r\n    //     publicSpeech: function () {\r\n    //       if (isFirstIn || (new Date() - timer)/1000 > 20) {\r\n    //         const innerAudioContext = uni.createInnerAudioContext();\r\n    //         innerAudioContext.autoplay = true;\r\n    //         innerAudioContext.src = require(\"@static/audio/tips.mp3\");\r\n    //         innerAudioContext.onPlay(() => {\r\n    //           console.log(\"开始播放\");\r\n    //         });\r\n    //         innerAudioContext.onError((res) => {\r\n    //           console.log(res?.errMsg);\r\n    //           console.log(res?.errCode);\r\n    //         })\r\n    //         innerAudioContext.play();\r\n    //         // 对私有变量进行赋值\r\n    //         isFirstIn = false;\r\n    //         timer = new Date();\r\n    //       }\r\n    //     },\r\n    //     resetFirstIn: function () {\r\n    //       isFirstIn = true;\r\n    //     }\r\n    //   };\r\n    // },\r\n    // 判断是否在关键点范围内\r\n    isInKeyPointBuffer() {\r\n      const position = this.currentPosition\r\n      this.keyDetailList.forEach((item) => {\r\n        let detail = item?.inspectionTaskDetailDTO?.inspectionTaskDetail\r\n        if (true) {\r\n          const coord = [parseFloat(position.longitude), parseFloat(position.latitude)]\r\n          const point = turf.point(coord)\r\n          const engGeom =\r\n            typeof item.engInfoDTO.engGeom !== 'object'\r\n              ? JSON.parse(item.engInfoDTO.engGeom)\r\n              : item.engInfoDTO.engGeom\r\n          const buffered = turf.buffer(engGeom, 0.035, 'kilometers')\r\n          const isInBuffer = turf.inside(point, buffered)\r\n        }\r\n      })\r\n    },\r\n  },\r\n  watch: {\r\n    // $route: {\r\n    //   handler(to, from, next) {\r\n    //     if (from.path === '/preview-image') {\r\n    //       this.showVisible = true\r\n    //     } else {\r\n    //       this.showVisible = false\r\n    //     }\r\n    //   },\r\n    // },\r\n  },\r\n  beforeRouteLeave(to, from, next) {\r\n    if (to.name == 'Inspection' && from.name == 'InspectionManage') {\r\n      if (this.ifRecording) {\r\n        this.endRecord('leave')\r\n      } else {\r\n        next()\r\n      }\r\n    } else {\r\n      next()\r\n    }\r\n  },\r\n  beforeDestroy() {\r\n    localStorage.removeItem('startRecordLines')\r\n    bus.$off('startSignIn')\r\n    // bus.$off(\"reportInspEvent\");\r\n  },\r\n  // 返回到列表页面\r\n  onBackPress() {\r\n    // uni.redirectTo(\"/pages/projectManagement/projectListPage\");\r\n    return true\r\n  },\r\n  onNavigationBarButtonTap: function (e) {},\r\n}\r\n</script>\r\n<style lang=\"less\" scoped>\r\n/deep/.mapboxgl-popup-content {\r\n  width: auto;\r\n  min-width: 280px;\r\n  height: 50px;\r\n  padding: 24px 36px;\r\n  border-radius: 18px;\r\n  box-shadow: 10px 10px 30px rgba(0, 0, 0, 0.1);\r\n}\r\n.task-map {\r\n  width: 100%;\r\n  height: 100%;\r\n  overflow: hidden;\r\n\r\n  .tip-tools {\r\n    position: fixed;\r\n    display: flex;\r\n    top: 140px;\r\n    left: 200px;\r\n    border-radius: 16px;\r\n    padding: 24px;\r\n    background: #FFFFFF;\r\n    box-shadow: 0px 10px 18px 0px rgba(0,0,0,0.06);\r\n    border: 2px solid rgba(23,144,254,0.6);\r\n    .tipImg {\r\n      width: 32px;\r\n      height: 32px;\r\n      margin-right: 16px;\r\n    }\r\n    .context {\r\n      font-size: 24px;\r\n      font-family: MicrosoftYaHei;\r\n      color: #1B67D8;\r\n      line-height: 31px;\r\n    }\r\n  }\r\n\r\n  .alert {\r\n    top: 2.22rem;\r\n    position: fixed;\r\n    width: 100%;\r\n    z-index: 4;\r\n    background-color: #62707c;\r\n    opacity: 0.5;\r\n    font-size: 1rem;\r\n\r\n    .u-alert-content {\r\n      width: 100%;\r\n    }\r\n  }\r\n\r\n  .progress {\r\n    width: 80%;\r\n    height: 1rem;\r\n    background-color: #fff;\r\n    box-shadow: 0 0.4rem 0.6rem 0 rgba(0, 0, 0, 0.2);\r\n    border-radius: 0.1rem;\r\n    margin: 0 0.3rem;\r\n    padding: 0.1rem 0.15rem;\r\n    position: fixed;\r\n    top: 2.5rem;\r\n\r\n    &-box {\r\n      width: 100%;\r\n      margin: 0.3rem 0;\r\n      display: flex;\r\n\r\n      .pro-dot {\r\n        width: 0.3rem;\r\n        height: 0.3rem;\r\n        border-radius: 50%;\r\n        float: left;\r\n        margin: auto 0.3rem;\r\n      }\r\n\r\n      .pro-text {\r\n        line-height: 0.5rem;\r\n        display: flex;\r\n        font-size: 12px;\r\n        float: left;\r\n      }\r\n    }\r\n  }\r\n\r\n  .pro-circle {\r\n    position: fixed;\r\n    width: 1rem;\r\n    height: 1rem;\r\n    right: 0.1rem;\r\n    padding: 0.1rem;\r\n    top: 2.5rem;\r\n    // margin: 0.27rem 0rem;\r\n    background-color: #fff;\r\n    z-index: 3;\r\n    box-shadow: 0rem 0.22rem 0.61rem 0rem rgba(0, 0, 0, 0.2);\r\n    border-radius: 0.1rem;\r\n\r\n    .progress-text-view {\r\n      font-size: 0.4rem;\r\n      z-index: 4;\r\n\r\n      .progress-text-up {\r\n        color: #306cc8;\r\n      }\r\n\r\n      .progress-text-down {\r\n        border-top: 0.05rem solid #555555;\r\n      }\r\n    }\r\n  }\r\n\r\n  .point-list {\r\n    position: fixed;\r\n    width: 1.2rem;\r\n    height: 1.2rem;\r\n    left: 0.3rem;\r\n    bottom: 2rem;\r\n    background-color: #fff;\r\n    z-index: 3;\r\n    box-shadow: 0rem 0.22rem 0.61rem 0rem rgba(0, 0, 0, 0.2);\r\n    border-radius: 0.27rem;\r\n\r\n    .list-image {\r\n      margin: 0.18rem;\r\n      width: 0.82rem;\r\n      height: 0.82rem;\r\n    }\r\n  }\r\n\r\n  .footer {\r\n    width: inherit;\r\n    padding: 1.11rem 0.83rem;\r\n    color: #333333;\r\n    background-color: #ffffff;\r\n    height: 3.55rem;\r\n    z-index: 4;\r\n    position: fixed;\r\n    bottom: 0rem;\r\n\r\n    &-content {\r\n      float: left;\r\n    }\r\n\r\n    &-btn {\r\n      float: right;\r\n      width: 4.44rem;\r\n      height: 1.77rem;\r\n      line-height: 1.77rem;\r\n      border-radius: 0.88rem;\r\n    }\r\n  }\r\n\r\n  .start-record {\r\n    position: absolute;\r\n    z-index: 3;\r\n    left: 50%;\r\n    bottom: 235px;\r\n    transform: translate(-50%, 0);\r\n\r\n    img {\r\n      width: 140px;\r\n      height: 140px;\r\n    }\r\n  }\r\n\r\n  .controlCard {\r\n    width: 100%;\r\n    height: 328px;\r\n    position: absolute;\r\n    bottom: 0;\r\n    background-image: url('~@/assets/img/inspection/controlBg.png');\r\n    background-repeat: no-repeat;\r\n    background-size: 100%;\r\n\r\n    .controlContent {\r\n      margin: 60px 30px 0;\r\n      display: flex;\r\n      flex-direction: column;\r\n\r\n      .infoContent {\r\n        display: flex;\r\n        flex-direction: column;\r\n        justify-content: space-around;\r\n        margin-bottom: 24px;\r\n\r\n        .block {\r\n          text-align: center;\r\n          width: 210px;\r\n          height: 160px;\r\n          display: flex;\r\n          flex-direction: column;\r\n          align-items: center;\r\n          background: rgba(27, 103, 216, 0.05);\r\n          border-radius: 16px;\r\n          // margin: 0 20px;\r\n\r\n          .rate {\r\n            width: 100%;\r\n            height: 50%;\r\n            display: flex;\r\n            align-items: center;\r\n            margin: auto;\r\n            font-size: 48px;\r\n            font-family: Helvetica-Bold, Helvetica;\r\n            font-weight: bold;\r\n            color: #306cc8;\r\n\r\n            .centerStyle {\r\n              margin: auto;\r\n              display: flex;\r\n              align-items: center;\r\n              font-size: 38px;\r\n              font-family: Helvetica-Bold, Helvetica;\r\n              font-weight: bold;\r\n\r\n              .inspKp {\r\n                padding-bottom: 3px;\r\n                padding-right: 3px;\r\n                color: #306cc8;\r\n              }\r\n\r\n              .uninspKp {\r\n                color: #191919;\r\n                letter-spacing: 3px;\r\n              }\r\n            }\r\n          }\r\n\r\n          .name {\r\n            font-size: 14px;\r\n            font-family: PingFangSC-Regular, PingFang SC;\r\n            font-weight: 400;\r\n            color: #555555;\r\n            width: 100%;\r\n            height: 33%;\r\n          }\r\n        }\r\n      }\r\n\r\n      .bottomSide {\r\n        width: 100%;\r\n        display: flex;\r\n        margin-top: 24px;\r\n        justify-content: space-around;\r\n      }\r\n\r\n      .endControl {\r\n        display: flex;\r\n        justify-content: space-between;\r\n        align-items: center;\r\n\r\n        .leftText {\r\n          width: 27%;\r\n          display: flex;\r\n          justify-content: space-around;\r\n          align-items: center;\r\n\r\n          img {\r\n            width: 32px;\r\n            height: 32px;\r\n            margin: auto;\r\n          }\r\n\r\n          /deep/.fm-count-down {\r\n            font-size: 24px;\r\n            color: #306cc8;\r\n          }\r\n        }\r\n\r\n        .rightButton {\r\n          display: flex;\r\n\r\n          .endBtn {\r\n            font-size: 24px;\r\n            width: 120px;\r\n            height: 60px;\r\n            background: #ffffff;\r\n            color: #306cc8;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  .tool-box {\r\n    position: fixed;\r\n    width: 1.2rem;\r\n    height: auto;\r\n    right: 0.3rem;\r\n    bottom: 350px;\r\n\r\n    .refresh {\r\n      width: 1.2rem;\r\n      height: 1.2rem;\r\n      margin-bottom: 0.55rem;\r\n      background-color: #fff;\r\n      z-index: 3;\r\n      box-shadow: 0rem 0.22rem 0.61rem 0rem rgba(0, 0, 0, 0.2);\r\n      border-radius: 0.27rem;\r\n\r\n      &-image {\r\n        margin: 0.18rem;\r\n        width: 0.82rem;\r\n        height: 0.82rem;\r\n      }\r\n    }\r\n\r\n    .route {\r\n      width: 1.2rem;\r\n      height: 1.2rem;\r\n      margin-bottom: 0.55rem;\r\n      background-color: #fff;\r\n      z-index: 3;\r\n      box-shadow: 0rem 0.22rem 0.61rem 0rem rgba(0, 0, 0, 0.2);\r\n      border-radius: 0.27rem;\r\n\r\n      &-image {\r\n        margin: 0.18rem;\r\n        width: 0.82rem;\r\n        height: 0.82rem;\r\n      }\r\n    }\r\n\r\n    .location {\r\n      width: 1.2rem;\r\n      height: 1.2rem;\r\n      background-color: #fff;\r\n      z-index: 3;\r\n      box-shadow: 0rem 0.22rem 0.61rem 0rem rgba(0, 0, 0, 0.2);\r\n      border-radius: 60px;\r\n\r\n      &-image {\r\n        margin: 0.18rem;\r\n        width: 0.82rem;\r\n        height: 0.82rem;\r\n      }\r\n    }\r\n  }\r\n\r\n  /deep/.fm-popup {\r\n    background: #f5f7f9;\r\n  }\r\n\r\n  .popup-view {\r\n    height: auto;\r\n    width: auto;\r\n    margin: 32px;\r\n    overflow: scroll;\r\n    border-radius: 32px;\r\n    background-color: #fff;\r\n\r\n    /deep/.fm-radio--horizontal {\r\n      margin-right: 20px;\r\n    }\r\n\r\n    .title {\r\n      display: flex;\r\n      margin-top: 32px;\r\n      padding-bottom: 32px;\r\n      border-bottom: 1px #f5f5f5 solid;\r\n\r\n      img {\r\n        width: 6px;\r\n        height: 40px;\r\n      }\r\n\r\n      .deviceId {\r\n        margin-left: 32px;\r\n        font-size: 36px;\r\n        font-family: PingFangSC-Semibold, PingFang SC;\r\n        font-weight: 600;\r\n        color: #191919;\r\n        line-height: 50px;\r\n      }\r\n    }\r\n\r\n    /deep/.fm-uploader__wrapper {\r\n      margin-left: 16px;\r\n    }\r\n\r\n    .preview-cover {\r\n      position: absolute;\r\n      bottom: 0;\r\n      box-sizing: border-box;\r\n      width: 100%;\r\n      padding: 4px;\r\n      color: #fff;\r\n      font-size: 12px;\r\n      text-align: center;\r\n      background: rgba(0, 0, 0, 0.3);\r\n    }\r\n  }\r\n\r\n  .btnArea {\r\n    display: flex;\r\n\r\n    .btn {\r\n      width: 94%;\r\n      margin: 0 auto;\r\n    }\r\n\r\n    .btn1 {\r\n      width: 44%;\r\n      margin: 0 12px 0 30px;\r\n    }\r\n\r\n    .btn2 {\r\n      width: 44%;\r\n      margin: 0 30px 0 12px;\r\n    }\r\n  }\r\n\r\n  .confirm-pop {\r\n    .title {\r\n      border-left: 0.22rem solid #306cc8;\r\n      margin: 0.27rem;\r\n      padding-left: 0.55rem;\r\n    }\r\n\r\n    .content {\r\n      border-top: 0.027rem solid rgba(128, 128, 128, 0.322);\r\n      width: 11.66rem;\r\n      padding: 1.33rem;\r\n      text-align: center;\r\n      background-color: #fff;\r\n\r\n      &-view {\r\n        font-size: 0.88rem;\r\n      }\r\n\r\n      .confirm-btn {\r\n        margin-top: 2.22rem;\r\n        justify-items: center;\r\n\r\n        .popup-btn {\r\n          float: left;\r\n          width: 3.33rem;\r\n          height: 1.77rem;\r\n          border-radius: 0.27rem;\r\n\r\n          &-l {\r\n            margin-left: 0.55rem;\r\n            margin-right: 0.55rem;\r\n          }\r\n\r\n          &-r {\r\n            margin-left: 0.55rem;\r\n            margin-right: 0.55rem;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n</style>\r\n"],"mappings":";AAwOA,OAAAA,GAAA;AACA,OAAAC,KAAA;AACA,OAAAC,KAAA;AACA,OAAAC,OAAA;AACA,OAAAC,YAAA;AACA,OAAAC,OAAA;AACA,YAAAC,GAAA;AACA,SAAAC,KAAA,EAAAC,MAAA;AACA,YAAAC,IAAA;AACA,OAAAC,QAAA;AACA,OAAAC,eAAA;AACA,OAAAC,GAAA;AACA,MAAAC,MAAA;EACAC,GAAA;EACAC,WAAA;AACA;AACA;EACAC,IAAA;EACAC,UAAA;IACAd,OAAA;IACAC,YAAA;IACAM,QAAA;IACAC;EACA;EACAO,KAAA;IACA;MACAC,MAAA;MACAC,kBAAA;MACA;MACAC,YAAA;MACAC,MAAA;MACAC,MAAA;MACAC,UAAA;MACAC,SAAA;MACAC,WAAA;MACAC,OAAA,GACA;QACAC,IAAA;MACA,GACA;QACAA,IAAA;MACA,EACA;MACAC,WAAA;MACA;MACAC,aAAA;MACA;MACA;MACAC,gBAAA;MACAC,WAAA;MACA;MACAC,qBAAA;MACAC,WAAA;MACAC,gBAAA;MACAC,UAAA;MACA;MACAC,eAAA;MACAC,KAAA;MACA;MACAC,QAAA;MACAC,WAAA;MACAC,aAAA;MACAC,eAAA;MACAC,aAAA;MACAC,QAAA;MACAC,UAAA;MACAC,QAAA;QACAC,YAAA;QACAC,cAAA;QACAC,MAAA;QACAC,QAAA;QACAC,MAAA;QACAC,OAAA;MACA;MACAC,UAAA;QACAC,QAAA;QACAC,UAAA;QACAC,WAAA;MACA;MACAC,UAAA;MACAC,YAAA;MACAC,gBAAA;MACAC,OAAA;MACAC,UAAA;MACA;MACAC,aAAA;MACAC,SAAA;MACAC,aAAA;MACAC,SAAA,GACA;QACAjD,IAAA;QACAkD,KAAA;MACA,GACA;QACAlD,IAAA;QACAkD,KAAA;MACA,EACA;MACAC,WAAA,GACA;QACAnD,IAAA;QACAkD,KAAA;MACA,GACA;QACAlD,IAAA;QACAkD,KAAA;MACA,GACA;QACAlD,IAAA;QACAkD,KAAA;MACA,EACA;MACAE,KAAA,GACA;MACAC,UAAA;MACAC,YAAA;MACAC,OAAA;MACAC,GAAA;QACA;Q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IAAA,CAAAC,GAAA;QACA,IAAAA,GAAA;UACAvH,KAAA;YACAwL,OAAA;YACAC,QAAA;UACA;UACA,KAAArH,WAAA;UACA,KAAAnC,WAAA;UACA,KAAAgV,aAAA;UACAnR,YAAA,CAAAC,OAAA;UACA;UACA,KAAA0N,OAAA;UACA;UACA,KAAAjS,gBAAA,OAAAmF,IAAA;QACA;UACA3G,KAAA;YACAwL,OAAA;YACAC,QAAA;UACA;QACA;MACA,GACAgB,KAAA,CAAAqC,GAAA;QACAnJ,OAAA,CAAAC,GAAA,CAAAkJ,GAAA;QACA;QACA;QACA;QACA;MACA;IACA;IACA;IACAoI,UAAAtO,IAAA;MACA,IAAAuO,IAAA,GAAAC,IAAA,CAAAC,KAAA,MAAA1Q,IAAA,UAAAnF,gBAAA;MAEA,IAAA2V,IAAA;QACAnX,KAAA;UACAwL,OAAA,iBAAA2L,IAAA;UACA1L,QAAA;QACA;QACA;MACA;MACAxL,MAAA,CAAAsM,OAAA;QACAtD,KAAA;QACAuC,OAAA;MACA,GACAlE,IAAA;QACA,KAAAkF,gBAAA,CAAA5D,IAAA;MACA,GACA6D,KAAA;QACA,KAAAC,eAAA;MACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACAA,gBAAA;MACA,KAAAxK,aAAA;IACA;IACA;IACA,MAAAsK,iBAAA5D,IAAA;MACA,KAAA1G,aAAA;MACA,KAAAkC,WAAA;MACAkK,OAAA,CAAAC,YAAA,CAAA0H,oBAAA;MACA,WAAAD,YAAA,CAAApN,IAAA;MACA,KAAA3G,WAAA;MACA6D,YAAA,CAAAC,OAAA;MACA,IAAA6C,IAAA;QACA,KAAAsH,WAAA;MACA;MACAlQ,KAAA;QACAwL,OAAA;QACAC,QAAA;MACA;MACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA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"}]}