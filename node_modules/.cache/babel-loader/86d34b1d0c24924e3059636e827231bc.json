{"remainingRequest":"E:\\ty_project\\xasw-yy\\revenue\\xasw-mobile\\node_modules\\babel-loader\\lib\\index.js!E:\\ty_project\\xasw-yy\\revenue\\xasw-mobile\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!E:\\ty_project\\xasw-yy\\revenue\\xasw-mobile\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\ty_project\\xasw-yy\\revenue\\xasw-mobile\\src\\views\\inspectionManage\\daily-task.vue?vue&type=script&lang=js","dependencies":[{"path":"E:\\ty_project\\xasw-yy\\revenue\\xasw-mobile\\src\\views\\inspectionManage\\daily-task.vue","mtime":1708928163428},{"path":"E:\\ty_project\\xasw-yy\\revenue\\xasw-mobile\\babel.config.js","mtime":1705912799600},{"path":"E:\\ty_project\\xasw-yy\\revenue\\xasw-mobile\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\ty_project\\xasw-yy\\revenue\\xasw-mobile\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"E:\\ty_project\\xasw-yy\\revenue\\xasw-mobile\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\ty_project\\xasw-yy\\revenue\\xasw-mobile\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["bus","axios","dayjs","MapComp","request","api","Toast","Dialog","Notify","turf","Uploader","problemCardInfo","API","_cloneDeep","mapObj","map","mapInstance","pauseStateTrackPoints","pauseStatePipeIdList","name","components","data","showKeyList","buttonList","unInspKeyDetailList","loading","finished","currentSelect","isResume","ifLeaveTask","stopReason","ifEndTask","legendConfig","ifTips","reportDataIsLoaded","allTaskLines","isView","active","deviceName","hasSignIn","showPopover","actions","text","currentRate","pointListShow","startRecordTimer","navbarTitle","reportFailTrackPoints","isShowRoute","inspBusinessType","recordData","currentPosition","lines","userInfo","ifRecording","selectEventType","eventTypeList","signShow","attachment","signForm","deviceStatus","inspImagesList","remark","isReport","taskId","pointId","liquidLevel","taskDetail","coverage","reportRate","planEndTime","engInfoDTO","taskRestTime","reportFooterShow","feature","planDetail","inspRangeList","rangeList","keyDetailList","isRunList","value","reportChose","rules","previewURL","upimgPreview","headers","url","uploadFile","findFile","pollingFlag","pollingGapTime","trackPointList","trackPointTimeList","overSpeedTrackLineList","trackLocation_start","trackLocation_end","showVisible","reportShow","accessToken","$storage","get","header","formToken","problemDataList1","problemDataList2","waterLevelShow","keyPointsInspectionList","computed","buttonAreaStyle","length","created","getCardListData","mounted","document","addEventListener","pause","resume","$store","state","console","log","isStart","localStorage","setItem","that","$off","$on","startSignIn","$route","query","id","getTaskById","getTrackRecordsById","methods","openKeyPointList","goToDeal","obj","startLongitude","startLatitude","flyToPoint","warning","message","duration","changeBizType","type","filter","it","bizType","process","env","VUE_APP_THIRD_REQUEST_URL","method","params","token","Authorization","then","res","status","resultData","getProblemDataList","commonParams","Object","assign","sysCode","page","current","size","params1","smallType","params2","problemPointFeatures","getAxiosData","allProblem","concat","forEach","push","geometry","coordinates","lnglat","properties","title","$refs","mymap","addInspEventLayer","problemDataList","Promise","resolve","reject","records","item","_item$formValue$detai","_item$formValue","_item$formValue2","_item$formValue3","ticketStatusName","handleType","formValue","createByName","createTime","substring","defectFrom","faultTypes","detail","defectType","files","appealLng","appealLat","deviceDetail","longitude","latitude","deviceType","device_type","questionDescribe","toDetailPanel","cardDetail","$router","flyTo","center","zoom","reportClick","setLayoutProperty","loadingType","handleClose","fileChange","file","fileList","fileId","response","groupToken","imagesName","continueTask","stopTask","endRecordConfirm","endTask","hasInspKp","changeToInspCount","allInspKp","changeToAllInspCount","changeToRate","openPopup","onSelect","val","off","signInBuffer","on","selectReportPoint","selectFlawPoint","e","features","queryRenderedFeatures","point","source","addEventObjMarker","gridId","gridName","gridManager","fullName","username","userName","userId","lngLat","getRestTime","time","Date","getTime","includes","Number","split","insp","uninsp","toFixed","mapLoaded","addMapImg","yuanchu","locationAMap","requestSingleLocation","JSON","parse","stringify","param","setInspUserPosition","err","refreshTask","pageNum","pageSize","toast","forbidClick","recordLines","recordedPipeLine","pipeId","bizScope","taskType","inspTask","inspPlan","detailList","range","setTimeout","label","clickFlag","isNew","taskStatus","startOrEndTaskRecord","getAllTaskLines","devType","list","geom","setAllInspLineSource","kpRes","keys","completion","taskName","timer","setInterval","clearInterval","isOnLoaded","addKeyPoints","addRangeList","extParam","task_id","addInspRecordTileLineSource","clear","icon","upLoadPauseStateTrackPoints","deepClone","upLoadPauseStatePipeIdList","recordInspLine","splice","uploadFiledPipeIdList","catch","inspectionTrack","polling","requestLocations","drawInspLine","position","direction","locType","lastPoint","distance","GetDistance","postTrackData_Point","promise","changeInspLineSourceBySpeed","r","locTime","jsonLine","coord","parseFloat","setSourceData","jsonLineFeatureCollection","getSource","setData","addSource","getLayer","addLayer","layout","visibility","paint","buffered","buffer","unit","changeInspLineState","geoTransToPixel","polygonBox","bbox","southWest","northEast","southWestPointPixel","project","northEastPointPixel","x","y","chunk","boxFeatures","layers","tempPipeList","feat","result","booleanDisjoint","isInsp","setFeatureState","date","$dayjs","format","inspDate","ext3","pipeLength","error","drawStartPoint","inspTime","inspector","userFullName","jsonPoint","jsonPointFeatureCollection","drawEndPoint","close","info","stopRequestLocations","postFailTrackData","success","go","pointData","timeData","p","date_now","userFullname","planId","taskCode","ext1","planStartTime","changeTaskStatus","onClose","clearBufferTrack","loadImage","require","image","hasImage","addImage","startInspRecord","endRecord","diff","Math","floor","startLocation","goEventOrFlawDetail","currentPoint","bigType","lng","lat","road_name","road","code","deviceId","msg","from","onConfirm","copySignForm","ext2","resultList","textInFlag","mainId","mainPoint","mainValue","inputType","i","trim","signIn","onCancel","cancelLeave","confirmLeave","clickBack","engGeom","isInBuffer","inside","params4","objectType","inspPointCheckList","_res$data","mainStatus","iT","indexOf","$set","finally","att","_att$data","reportEvent","path","coordArray1","coordArray2","lng1","lat1","lng2","lat2","radLat1","PI","radLat2","a","b","s","asin","sqrt","pow","sin","cos","round","resetMapView","resetNorthPitch","beforeDestroy","removeEventListener","removeItem"],"sources":["src/views/inspectionManage/daily-task.vue"],"sourcesContent":["<template>\r\n  <div class=\"task-map full-width\">\r\n    <!-- 导航栏 -->\r\n    <div class=\"navbar-box\">\r\n      <fm-nav-bar :title=\"navbarTitle\" left-arrow @click-left=\"clickBack\" @click-right=\"openPopup\">\r\n        <template #right>\r\n          <fm-popover :visible.sync=\"showPopover\" trigger=\"click\" :actions=\"actions\" @select=\"onSelect\"\r\n            placement=\"bottom-end\">\r\n            <template #reference>\r\n              <img style=\"width: 34px\" v-if=\"!isView\" :src=\"require('@/assets/img/inspection/增加.png')\" />\r\n            </template>\r\n          </fm-popover>\r\n        </template>\r\n      </fm-nav-bar>\r\n    </div>\r\n    <!-- 地图 -->\r\n    <MapComp ref=\"mymap\" :ifInspection=\"true\" @mapLoaded=\"mapLoaded\" :legendConfig=\"legendConfig\"></MapComp>\r\n    <!-- <fm-popup\r\n      :visible.sync=\"pointListShow\"\r\n      close-on-click-modal\r\n      :close-on-popstate=\"true\"\r\n      position=\"bottom\"\r\n      safe-area-inset-bottom\r\n    >\r\n      <fm-tabs type=\"card\" style=\"padding-top: 20px\">\r\n        <fm-tab label=\"未上报关键点\">\r\n          <fm-empty v-if=\"keyDetailList.length <= 0\" description=\"暂无数据\" mode=\"list\"></fm-empty>\r\n        </fm-tab>\r\n        <fm-tab label=\"已上报关键点\">\r\n          <fm-empty v-if=\"keyDetailList.length <= 0\" description=\"暂无数据\" mode=\"list\"></fm-empty>\r\n        </fm-tab>\r\n      </fm-tabs>\r\n    </fm-popup> -->\r\n    <!-- 开始记录与结束记录 -->\r\n    <div class=\"start-record\" v-show=\"!isView\">\r\n      <img v-if=\"!ifRecording\" :src=\"require('@/assets/img/inspection/暂停.png')\" @click=\"startInspRecord\" />\r\n      <img v-else :src=\"require('@/assets/img/inspection/开始.png')\" @click=\"endRecord('pause')\" />\r\n    </div>\r\n    <!-- 数据面板 -->\r\n    <div class=\"controlCard\" v-show=\"!isView\">\r\n      <div class=\"controlContent\">\r\n        <div class=\"infoContent\">\r\n          <div class=\"endControl\">\r\n            <div class=\"leftText\">\r\n              <img :src=\"require('@/assets/img/inspection/剩余时间.png')\" />\r\n              <fm-count-down style=\"margin: auto\" :time=\"getRestTime(taskDetail.taskEndTime)\" format=\"DD天HH小时\" />\r\n            </div>\r\n            <div class=\"rightButton\">\r\n              <fm-button v-show=\"ifRecording\" class=\"endBtn\" round @click=\"endTask\">结束</fm-button>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"bottomSide\">\r\n            <div class=\"block\">\r\n              <div class=\"rate\" style=\"font-size: 18px\">\r\n                <div class=\"centerStyle\">\r\n                  {{ changeToRate(taskDetail.coverage) }}\r\n                </div>\r\n              </div>\r\n              <div class=\"name\" style=\"font-size: 14px\">覆盖率</div>\r\n            </div>\r\n\r\n            <div class=\"block\" @click=\"openKeyPointList\" style=\"cursor: pointer;\">\r\n              <div class=\"rate\">\r\n                <div class=\"centerStyle\">\r\n                  <div class=\"inspKp\" style=\"font-size: 19px\">\r\n                    {{ changeToInspCount(taskDetail.reportRate) }}\r\n                  </div>\r\n                  <div class=\"uninspKp\" style=\"font-size: 14px\">\r\n                    /{{ changeToAllInspCount(taskDetail.reportRate) }}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"name\" style=\"font-size: 14px\">关键点</div>\r\n            </div>\r\n\r\n            <div class=\"block\" @click=\"reportClick\" style=\"cursor: pointer;\">\r\n              <div class=\"rate\" style=\"font-size: 18px\">\r\n                <div class=\"centerStyle\">\r\n                  {{ problemDataList1.length + problemDataList2.length }}\r\n                </div>\r\n              </div>\r\n              <div class=\"name\" style=\"font-size: 14px\">上报</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"viewCard\" v-show=\"isView\">\r\n      <div class=\"controlContent\">\r\n        <div class=\"infoContent\">\r\n          <div class=\"bottomSide\">\r\n            <div class=\"block\">\r\n              <div class=\"rate\" style=\"font-size: 18px\">\r\n                <div class=\"centerStyle\">\r\n                  {{ changeToRate(taskDetail.coverage) }}\r\n                </div>\r\n              </div>\r\n              <div class=\"name\" style=\"font-size: 14px\">覆盖率</div>\r\n            </div>\r\n\r\n            <div class=\"block\" @click=\"openKeyPointList\" style=\"cursor: pointer;\">\r\n              <div class=\"rate\">\r\n                <div class=\"centerStyle\">\r\n                  <div class=\"inspKp\" style=\"font-size: 19px\">\r\n                    {{ changeToInspCount(taskDetail.reportRate) }}\r\n                  </div>\r\n                  <div class=\"uninspKp\" style=\"font-size: 14px\">\r\n                    /{{ changeToAllInspCount(taskDetail.reportRate) }}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"name\" style=\"font-size: 14px\">关键点</div>\r\n            </div>\r\n\r\n            <div class=\"block\" @click=\"reportClick\" style=\"cursor: pointer;\">\r\n              <div class=\"rate\" style=\"font-size: 18px\">\r\n                <div class=\"centerStyle\">\r\n                  {{ problemDataList1.length + problemDataList2.length }}\r\n                </div>\r\n              </div>\r\n              <div class=\"name\" style=\"font-size: 14px\">上报</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <!-- 轨迹显示与定位功能 -->\r\n    <div class=\"tool-box\">\r\n      <div class=\"location\" @click=\"startLocation\">\r\n        <fm-image class=\"location-image\" :src=\"require('@/assets/img/inspection/location.png')\"></fm-image>\r\n      </div>\r\n    </div>\r\n    <!-- 签到框 -->\r\n    <fm-popup :visible.sync=\"signShow\" :modal=\"false\" round position=\"bottom\"\r\n      :style=\"{ height: signForm.deviceStatus == '1' ? '60%' : '50%' }\">\r\n      <div class=\"popup-view\">\r\n        <fm-form ref=\"signForm\">\r\n          <div class=\"title\">\r\n            <img :src=\"require('@/assets/img/inspection/sideIcon.png')\" />\r\n            <div class=\"deviceId\">{{ deviceName }}</div>\r\n          </div>\r\n          <fm-field :name=\"signForm.deviceStatus\" error label=\"运行情况\" required>\r\n            <template #input>\r\n              <fm-radio-group v-model=\"signForm.deviceStatus\" :disabled=\"hasSignIn\" direction=\"horizontal\">\r\n                <fm-radio name=\"0\">正常</fm-radio>\r\n                <fm-radio name=\"1\">异常</fm-radio>\r\n              </fm-radio-group>\r\n            </template>\r\n          </fm-field>\r\n          <fm-field v-if=\"signForm.deviceStatus == '1'\" :disabled=\"hasSignIn\" label=\"是否上报\" required>\r\n          </fm-field>\r\n          <fm-field :name=\"signForm.isReport\" v-if=\"signForm.deviceStatus == '1'\">\r\n            <template #input>\r\n              <fm-radio-group v-model=\"signForm.isReport\" :disabled=\"hasSignIn\" direction=\"horizontal\">\r\n                <fm-radio v-for=\"(item, index) in reportChose\" :key=\"index\" :name=\"item.value\">{{ item.name }}\r\n                </fm-radio>\r\n              </fm-radio-group>\r\n            </template>\r\n          </fm-field>\r\n\r\n          <!--\r\n            { value: \"正常/异常\", label: \"正常/异常\" },\r\n            { value: \"开启/关闭\", label: \"开启/关闭\" },\r\n            { value: \"是/否\", label: \"是/否\" },\r\n            { value: \"数值\", label: \"数值\" },\r\n          -->\r\n          <!-- 巡检要点list，已巡检和未巡检要点从不同接口中获取 -->\r\n          <fm-field v-for=\"(item, index) in keyPointsInspectionList\" :key=\"item.id\" :label=\"item.mainPoint\" required>\r\n            <template #input>\r\n              <fm-radio-group v-if=\"item.inputType == '正常/异常' || item.ext1 == '正常/异常'\" v-model=\"item.mainValue\" :disabled=\"hasSignIn\">\r\n                <fm-radio name=\"正常\">正常</fm-radio>\r\n                <fm-radio name=\"异常\">异常</fm-radio>\r\n              </fm-radio-group>\r\n              <fm-radio-group v-if=\"item.inputType == '开启/关闭' || item.ext1 == '开启/关闭'\" v-model=\"item.mainValue\" :disabled=\"hasSignIn\">\r\n                <fm-radio name=\"开启\">开启</fm-radio>\r\n                <fm-radio name=\"关闭\">关闭</fm-radio>\r\n              </fm-radio-group>\r\n              <fm-radio-group v-if=\"item.inputType == '是/否' || item.ext1 == '是/否'\" v-model=\"item.mainValue\" :disabled=\"hasSignIn\">\r\n                <fm-radio name=\"是\">是</fm-radio>\r\n                <fm-radio name=\"否\">否</fm-radio>\r\n              </fm-radio-group>\r\n              <fm-field v-if=\"item.inputType == '数值' || item.ext1 == '数值'\" type=\"number\" v-model=\"item.mainValue\" :disabled=\"hasSignIn\" />\r\n            </template>\r\n          </fm-field>\r\n\r\n          <uploader v-model=\"attachment\" @fileChange=\"fileChange\" multiple :maxImagesCount=\"2\" :deletable=\"!hasSignIn\" :disabled=\"hasSignIn\"\r\n            type=\"image\" />\r\n          <fm-field v-if=\"waterLevelShow\" label=\"液位（米）\" type=\"number\" required name=\"liquidLevel\" placehold=\"请输入液位\" :disabled=\"hasSignIn\"\r\n            v-model=\"signForm.liquidLevel\">\r\n          </fm-field>\r\n          <fm-field label=\"备注\" name=\"remark\" type=\"textarea\" placehold=\"请输入\" :disabled=\"hasSignIn\"\r\n            v-model=\"signForm.remark\">\r\n          </fm-field>\r\n        </fm-form>\r\n      </div>\r\n      <div class=\"btnArea\" v-show=\"!hasSignIn\">\r\n        <fm-button class=\"btn1\" @click=\"onCancel\" round type=\"default\">取消</fm-button>\r\n        <fm-button class=\"btn2\" @click=\"onConfirm\" round type=\"primary\">提交</fm-button>\r\n      </div>\r\n      <div class=\"btnArea\" v-show=\"hasSignIn\">\r\n        <fm-button class=\"btn\" @click=\"onCancel\" round type=\"default\">关闭</fm-button>\r\n      </div>\r\n    </fm-popup>\r\n    <fm-popup :visible.sync=\"reportShow\" @close=\"handleClose\" round position=\"bottom\"\r\n      :overlay-style=\"{ background: 'rgba(0, 0, 0, 0.1)' }\" :style=\"{ height: '50%' }\">\r\n      <fm-tabs v-model=\"active\" swipeable style=\"height: 100%\">\r\n        <fm-tab label=\"问题上报\">\r\n          <div v-for=\"(item, index) in problemDataList1\" :key=\"index\">\r\n            <problemCardInfo type=\"001\" :cardInfo=\"item\" @toDetailPanel=\"toDetailPanel\" @flyToPoint=\"flyToPoint\">\r\n            </problemCardInfo>\r\n          </div>\r\n        </fm-tab>\r\n        <fm-tab label=\"设施缺陷\">\r\n          <div v-for=\"(item, index) in problemDataList2\" :key=\"index\">\r\n            <problemCardInfo type=\"002\" :cardInfo=\"item\" @toDetailPanel=\"toDetailPanel\" @flyToPoint=\"flyToPoint\">\r\n            </problemCardInfo>\r\n          </div>\r\n        </fm-tab>\r\n      </fm-tabs>\r\n    </fm-popup>\r\n\r\n    <!-- 提示层 -->\r\n    <div v-show=\"ifTips\" class=\"tip-tools\">\r\n      <img :src=\"require('@/assets/img/tips.png')\" class=\"tipImg\" />\r\n      <div class=\"context\">请在地图上选择设施或者点位</div>\r\n    </div>\r\n    <fm-overlay :show=\"ifEndTask\" z-index=\"10\">\r\n      <div class=\"confirm-tip\">\r\n        <div class=\"contentSelf\">\r\n          <div class=\"icon\">\r\n            <img :src=\"require('@/assets/img/inspection/终止.png')\" width=\"60\" style=\"margin: auto\" />\r\n          </div>\r\n          <div class=\"info\">\r\n            <span>{{ `您还有${changeToAllInspCount(taskDetail.reportRate) - changeToInspCount(taskDetail.reportRate)}个关键点未打卡，确定提前中止巡检任务？` }}</span>\r\n          </div>\r\n          <div class=\"input\">\r\n            <fm-field v-model=\"stopReason\" placeholder=\"请输入终止原因\" rows=\"3\" autosize type=\"textarea\" maxlength=\"200\" show-word-limit></fm-field>\r\n          </div>\r\n        </div>\r\n        <div class=\"confirm_btn\">\r\n          <div class=\"btn1 btn2\" @click=\"continueTask\">继续任务</div>\r\n          <div class=\"btn1\" @click=\"stopTask\">中止任务</div>\r\n        </div>\r\n      </div>\r\n    </fm-overlay>\r\n    <fm-overlay :show=\"ifLeaveTask\" z-index=\"10\">\r\n      <div class=\"confirm-tip\">\r\n        <div class=\"contentSelf\">\r\n          <div class=\"icon\">\r\n            <img :src=\"require('@/assets/img/inspection/终止.png')\" width=\"60\" style=\"margin: auto\" />\r\n          </div>\r\n          <div class=\"info\">\r\n            <span>{{ '当前为巡检状态，继续退出会暂停巡检，请确定是否退出?' }}</span>\r\n          </div>\r\n        </div>\r\n        <div class=\"confirm_btn\">\r\n          <div class=\"btn1 btn2\" @click=\"cancelLeave\">取消</div>\r\n          <div class=\"btn1\" @click=\"confirmLeave\">退出</div>\r\n        </div>\r\n      </div>\r\n    </fm-overlay>\r\n    <!-- 关键点列表 -->\r\n    <div class=\"content\" :class=\"showKeyList ? '' : 'inactive'\">\r\n      <div class=\"contentArea\">\r\n        <div style=\"overflow-x: scroll; height: 74px;\">\r\n          <div class=\"buttonArea\" :style=\"buttonAreaStyle\">\r\n            <fm-button\r\n              round\r\n              v-for=\"it of buttonList\"\r\n              :key=\"it\"\r\n              class=\"button\"\r\n              :style=\"currentSelect == it ? { 'color': '#1B67D8', 'background': '#DDE8F9' } : {}\"\r\n              @click=\"changeBizType(it)\"\r\n            >{{ it }}</fm-button>\r\n          </div>\r\n        </div>\r\n        <div class=\"listArea\">\r\n          <fm-list\r\n            v-model=\"loading\"\r\n            :finished=\"finished\"\r\n            finished-text=\"到底了\"\r\n          >\r\n            <div v-for=\"(it, idx) of unInspKeyDetailList\" :key=\"it.id\" class=\"list\">\r\n              <div class=\"list_num\">{{ idx + 1 }}</div>\r\n              <div class=\"list_type\">{{ it.deviceType || '' }}</div>\r\n              <div class=\"list_id\">{{ it.deviceId || '' }}</div>\r\n              <div class=\"list_deal\" @click=\"goToDeal(it)\">\r\n                定位\r\n                <img\r\n                  width=\"24\"\r\n                  height=\"24\"\r\n                  style=\"margin: auto 0 auto 4px;\"\r\n                  :src=\"require('@/assets/img/maintenance/deal.png')\"\r\n                />\r\n              </div>\r\n            </div>\r\n          </fm-list>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n<script>\r\nimport bus from '../../views/inspectMap/utils/Bus.js'\r\nimport axios from 'axios'\r\nimport dayjs from 'dayjs'\r\nimport MapComp from '../../views/inspectMap/index.vue'\r\nimport request from '@/utils/request'\r\nimport * as api from './api'\r\nimport { Toast, Dialog, Notify } from 'fawkes-mobile-lib'\r\nimport * as turf from '@turf/turf'\r\nimport Uploader from '@/components/upload/Uploader.vue'\r\nimport problemCardInfo from './problemCardInfo';\r\nimport API from \"@/common/config.js\";\r\nimport _cloneDeep from 'lodash/cloneDeep'\r\nconst mapObj = {\r\n  map: null,\r\n  mapInstance: null,\r\n}\r\nlet pauseStateTrackPoints = []\r\nlet pauseStatePipeIdList = []\r\nexport default {\r\n  name: 'daily-task',\r\n  components: {\r\n    MapComp,\r\n    Uploader,\r\n    problemCardInfo\r\n  },\r\n  data() {\r\n    return {\r\n      showKeyList: false,\r\n      buttonList: [],\r\n      unInspKeyDetailList: [],\r\n      loading: false,\r\n      finished: true,\r\n      currentSelect: '全部',\r\n      isResume: true,\r\n      ifLeaveTask: false,\r\n      stopReason: '',\r\n      ifEndTask: false,\r\n      legendConfig: [],\r\n      ifTips: false,\r\n      reportDataIsLoaded: false,\r\n      // 巡检任务下所有巡检管线\r\n      allTaskLines: [],\r\n      isView: true,\r\n      active: 0,\r\n      deviceName: '',\r\n      hasSignIn: false,\r\n      showPopover: false,\r\n      actions: [\r\n        {\r\n          text: '问题上报',\r\n        },\r\n        {\r\n          text: '设施缺陷',\r\n        },\r\n      ],\r\n      currentRate: 0,\r\n      // 控制关键点列表显隐\r\n      pointListShow: false,\r\n      // 全局发声函数\r\n      // 记录开始巡检的时间，用于判断是否在开始巡检的10s内\r\n      startRecordTimer: '',\r\n      navbarTitle: '日常任务',\r\n      // 上报失败的巡检轨迹点位数组\r\n      reportFailTrackPoints: [],\r\n      isShowRoute: true,\r\n      inspBusinessType: '',\r\n      recordData: [],\r\n      // 当前巡检员所处位置\r\n      currentPosition: null,\r\n      lines: [],\r\n      // 巡检员信息\r\n      userInfo: {},\r\n      ifRecording: false,\r\n      selectEventType: false,\r\n      eventTypeList: [],\r\n      signShow: false,\r\n      attachment: '',\r\n      signForm: {\r\n        deviceStatus: '1',\r\n        inspImagesList: [],\r\n        remark: '',\r\n        isReport: '',\r\n        taskId: '',\r\n        pointId: '',\r\n        liquidLevel: '',\r\n      },\r\n      taskDetail: {\r\n        coverage: '0/0',\r\n        reportRate: '0/0',\r\n        planEndTime: '',\r\n      },\r\n      engInfoDTO: {},\r\n      taskRestTime: 0,\r\n      reportFooterShow: false,\r\n      feature: {},\r\n      planDetail: {},\r\n      // 用于地图中显示范围和关键点\r\n      inspRangeList: [],\r\n      rangeList: [],\r\n      keyDetailList: [],\r\n      isRunList: [\r\n        {\r\n          name: '正常',\r\n          value: '1',\r\n        },\r\n        {\r\n          name: '异常',\r\n          value: '0',\r\n        },\r\n      ],\r\n      reportChose: [\r\n        {\r\n          name: '问题上报',\r\n          value: '问题上报',\r\n        },\r\n        {\r\n          name: '新增缺陷',\r\n          value: '新增缺陷',\r\n        },\r\n        {\r\n          name: '无需上报',\r\n          value: '无需上报',\r\n        },\r\n      ],\r\n      rules: {\r\n      },\r\n      previewURL: '/sys-storage/download_image?f8s=',\r\n      upimgPreview: [],\r\n      headers: {},\r\n      url: {\r\n        // 本页面使用到的url\r\n        uploadFile: 'sys-storage/upload',\r\n        findFile: 'ecidi-cmp/file/cmpFileGroup/findFilesByGroupId',\r\n      },\r\n      pollingFlag: false,\r\n      pollingGapTime: 3,\r\n      trackPointList: [],\r\n      trackPointTimeList: [],\r\n      overSpeedTrackLineList: [],\r\n      trackLocation_start: '',\r\n      trackLocation_end: '',\r\n      showVisible: false,\r\n      reportShow: false, // 问题上报面板显示\r\n      accessToken: this.$storage.get('access_token'),\r\n      header: {},\r\n      formToken: '',\r\n      // 问题上报list\r\n      problemDataList1: [],\r\n      // 设施缺陷list\r\n      problemDataList2: [],\r\n      // 液位输入框是否显示\r\n      waterLevelShow: false,\r\n      // 巡检要点list数据\r\n      keyPointsInspectionList: [],\r\n    }\r\n  },\r\n  computed: {\r\n    buttonAreaStyle() {\r\n      return {\r\n        '--width': this.buttonList.length * (80 + 10) + 'px',\r\n      }\r\n    },\r\n  },\r\n  created() {\r\n    // 获取问题上报和设施缺陷数据\r\n    this.getCardListData()\r\n  },\r\n  mounted() {\r\n    document.addEventListener(\"pause\", this.pause, false)\r\n    document.addEventListener(\"resume\", this.resume, false)\r\n    this.userInfo = this.$store.state.userInfo\r\n    console.log('this.userInfo: ', this.userInfo);\r\n    this.isStart = false\r\n    localStorage.setItem('startRecordLines', 'end')\r\n    this.navbarTitle = '日常任务'\r\n    let that = this\r\n    bus.$off('startSignIn').$on('startSignIn', (feature) => {\r\n      that.startSignIn(feature)\r\n    })\r\n    this.isView = this.$route.query.isView\r\n    const id = this.$route.query.taskId\r\n    this.getTaskById(id)\r\n    this.getTrackRecordsById(id)\r\n  },\r\n  methods: {\r\n    openKeyPointList() {\r\n      this.showKeyList = true\r\n    },\r\n    goToDeal(obj) {\r\n      if (obj.startLongitude && obj.startLatitude) {\r\n        this.flyToPoint([obj.startLongitude, obj.startLatitude])\r\n      } else {\r\n        Toast.warning({\r\n          message: '当前设施无地理坐标信息',\r\n          duration: 2000\r\n        })\r\n        return\r\n      }\r\n    },\r\n    changeBizType(type) {\r\n      this.currentSelect = type\r\n      this.unInspKeyDetailList = []\r\n      if (type == '全部') {\r\n        this.unInspKeyDetailList = this.keyDetailList.filter(it => !it.deviceStatus)\r\n      } else {\r\n        this.unInspKeyDetailList = this.keyDetailList.filter(it => !it.deviceStatus && it.bizType == type)\r\n      }\r\n    },\r\n    // 获取问题上报和设施缺陷数据\r\n    getCardListData() {\r\n      // 获取header，查询工单用\r\n      axios({\r\n        url: process.env.VUE_APP_THIRD_REQUEST_URL + '/main/userCenterApi/sso/tokenByToken',\r\n        method: 'post',\r\n        params: {\r\n          token: this.accessToken,\r\n        },\r\n        headers: {\r\n          Authorization: 'Basic b3V0d29yazp3cGcyMDIw',\r\n        },\r\n      }).then((res) => {\r\n        if (res.status == 200) {\r\n          this.formToken = res.data.resultData.token\r\n          this.header = {\r\n            'Content-Type': 'application/json',\r\n            Authorization: 'Bearer ' + this.formToken,\r\n          }\r\n        }\r\n      })\r\n    },\r\n    async getProblemDataList(params) {\r\n      this.problemDataList1 = []\r\n      this.problemDataList2 = []\r\n\r\n      let commonParams = Object.assign({\r\n        sysCode: 'outwork',\r\n        // token: this.accessToken,\r\n        page: {\r\n          current: 1,\r\n          size: 99999, // 查全部\r\n        }\r\n      }, params)\r\n      // 问题上报\r\n      let params1 = {\r\n        ...commonParams,\r\n        smallType: 'abnormal_inform'\r\n      }\r\n      // 设施缺陷\r\n      let params2 = {\r\n        ...commonParams,\r\n        smallType: 'defect'\r\n      }\r\n      let problemPointFeatures = []\r\n      // 问题上报\r\n      await this.getAxiosData(params1, this.problemDataList1)\r\n      // 设施缺陷\r\n      await this.getAxiosData(params2, this.problemDataList2)\r\n      let allProblem = this.problemDataList1.concat(this.problemDataList2)\r\n      allProblem.forEach(it => {\r\n        problemPointFeatures.push({\r\n          type: 'Feature',\r\n          geometry: {\r\n            type: 'Point',\r\n            coordinates: it.lnglat\r\n          },\r\n          properties: {\r\n            id: it.id,\r\n            title: it.title\r\n          }\r\n        })\r\n      })\r\n      this.$refs.mymap.addInspEventLayer(problemPointFeatures)\r\n      this.reportDataIsLoaded = true\r\n    },\r\n    getAxiosData(params, problemDataList) {\r\n      return new Promise((resolve, reject) => {\r\n        axios({\r\n          url: process.env.VUE_APP_THIRD_REQUEST_URL + '/main/outworkapi/ticketStatisticClient/getTicketList',\r\n          method: 'post',\r\n          data: params,\r\n          headers: this.header,\r\n        }).then((res) => {\r\n          if (res.status == 200) {\r\n            res.data.resultData.records.forEach((item) => {\r\n              console.log('item: ', item);\r\n              problemDataList.push({\r\n                id: item.id, // 工单ID\r\n                title: item.title, // 工单标题\r\n                ticketStatusName: item.ticketStatusName,\r\n                handleType: item.formValue.handleType, // 描述\r\n                createByName: item.createByName, // 创建人\r\n                createTime: item.createTime.substring(0, 10), // 创建时间\r\n                defectFrom: item.formValue.defectFrom,\r\n                faultTypes: item.formValue.detail?.defectType || item.formValue.faultTypes,\r\n                // fileUrl: item.formValue?.handleImgs?.[0]?.fileUrl,\r\n                // 图片地址\r\n                url: item.formValue?.files?.[0]?.url,\r\n                // 发生经纬度\r\n                lnglat: [item.appealLng, item.appealLat] || [item.formValue.deviceDetail.longitude, item.formValue.deviceDetail.latitude],\r\n                // deviceType: item.formValue?.deviceType || [],\r\n                deviceType: item.formValue?.deviceType || item.formValue?.device_type || [],\r\n                questionDescribe: item.formValue.questionDescribe,\r\n              })\r\n            })\r\n            resolve()\r\n          }\r\n          // problemDataList.forEach((item) => {\r\n          //   // console.log('图片地址', item.url)\r\n          // })\r\n        })\r\n      })\r\n    },\r\n    // 问题上报点击标题、设施缺陷点击卡片进入详情页  \r\n    toDetailPanel(cardDetail) {\r\n      this.$router.push({\r\n        name: 'detailProblemOrder',\r\n        query: { id: cardDetail.id }\r\n      })\r\n    },\r\n    // 卡片定位\r\n    flyToPoint(lnglat) {\r\n      mapObj.map.flyTo({ center: lnglat, zoom: 17.5 })\r\n    },\r\n    // 上报\r\n    reportClick() {\r\n      if (this.reportDataIsLoaded) {\r\n        this.reportShow = true\r\n        mapObj.map.setLayoutProperty('eventPointsLayer', 'visibility', 'visible')\r\n      } else {\r\n        Toast.loading({\r\n          message: '上报数据加载中。。。',\r\n          loadingType: 'spinner',\r\n          duration: 1500\r\n        })\r\n        return\r\n      }\r\n    },\r\n    handleClose() {\r\n      mapObj.map.setLayoutProperty('eventPointsLayer', 'visibility', 'none')\r\n    },\r\n    fileChange(file) {\r\n      this.signForm.inspImagesList = []\r\n      if (file.fileList.length == 0) {\r\n        this.attachment = ''\r\n      }\r\n      file.fileList.forEach(it => {\r\n        this.signForm.inspImagesList.push(\r\n          {\r\n            fileId: it.response.groupToken,\r\n            imagesName: it.url\r\n          }\r\n        )\r\n      })\r\n      console.log(this.signForm)\r\n    },\r\n    continueTask() {\r\n      this.stopReason = ''\r\n      this.ifEndTask = false\r\n    },\r\n    stopTask() {\r\n      if (this.stopReason == '') {\r\n        Toast.warning({\r\n          message: '请输入终止原因',\r\n          duration: 1500\r\n        })\r\n        return\r\n      }\r\n      this.ifEndTask = false\r\n      this.endRecordConfirm('end')\r\n    },\r\n    async endTask() {\r\n      if (this.isView) {\r\n        Toast({\r\n          message: '该巡检任务已结束',\r\n          duration: 1500\r\n        })\r\n        return\r\n      }\r\n      // bus.$off('updateData')\r\n      await this.getTaskById(this.$route.query.taskId)\r\n      let hasInspKp = this.changeToInspCount(this.taskDetail.reportRate)\r\n      let allInspKp = this.changeToAllInspCount(this.taskDetail.reportRate)\r\n      if ((allInspKp - hasInspKp == 0) && this.changeToRate(this.taskDetail.coverage) == '100%') {\r\n        this.endRecordConfirm('end')\r\n      } else {\r\n        this.ifEndTask = true\r\n      }\r\n    },\r\n    openPopup() {\r\n      if (this.isView) {\r\n        return\r\n      }\r\n      this.showPopover = true\r\n    },\r\n    onSelect(val) {\r\n      if (this.isView) {\r\n        Toast({\r\n          message: '该巡检任务已结束',\r\n          duration: '1500'\r\n        })\r\n        return\r\n      }\r\n      this.ifTips = true\r\n      mapObj.map.off('click', 'keypointsLayer', this.$refs.mymap.signInBuffer)\r\n      val.text == '问题上报' ? mapObj.map.on('click', this.selectReportPoint) : mapObj.map.on('click', this.selectFlawPoint)\r\n    },\r\n    selectReportPoint(e) {\r\n      let features = mapObj.map.queryRenderedFeatures(e.point)\r\n      if (this.ifTips) {\r\n        this.ifTips = false\r\n      }\r\n      if (features.length > 0) {\r\n        if (\r\n          features[0].source != \"inspUser\"\r\n          // && features[0].source != \"initInspLineSource\" \r\n          && features[0].source != \"keypoints\"\r\n          && (features[0].geometry.type === \"Point\")\r\n        ) {\r\n          this.$refs.mymap.addEventObjMarker(features[0], 'device', 'event', { gridId: this.planDetail.gridId, gridName: this.planDetail.gridName, gridManager: { fullName: this.planDetail.gridManager, username: this.planDetail.userName, userId: this.planDetail.userId } });\r\n        } else if (features.length > 1\r\n          && features[1].source != \"eventPoints\"\r\n          && features[1].source != \"inspUser\"\r\n          && features[1].source != \"keypoints\"\r\n          && (features[1].geometry.type === \"Point\")\r\n        ) {\r\n          this.$refs.mymap.addEventObjMarker(features[1], 'device', 'event', { gridId: this.planDetail.gridId, gridName: this.planDetail.gridName, gridManager: { fullName: this.planDetail.gridManager, username: this.planDetail.userName, userId: this.planDetail.userId } });\r\n        }\r\n      } else {\r\n        this.$refs.mymap.addEventObjMarker(e.lngLat, 'lnglat', 'event', { gridId: this.planDetail.gridId, gridName: this.planDetail.gridName, gridManager: { fullName: this.planDetail.gridManager, username: this.planDetail.userName, userId: this.planDetail.userId } });\r\n      }\r\n      mapObj.map.on('click', 'keypointsLayer', this.$refs.mymap.signInBuffer)\r\n      mapObj.map.off('click', this.selectReportPoint)\r\n    },\r\n    selectFlawPoint(e) {\r\n      let features = mapObj.map.queryRenderedFeatures(e.point)\r\n      if (this.ifTips) {\r\n        this.ifTips = false\r\n      }\r\n      if (features.length > 0) {\r\n        if (\r\n          features[0].source != \"eventPoints\"\r\n          && features[0].source != \"inspUser\"\r\n          // && features[0].source != \"initInspLineSource\" \r\n          && features[0].source != \"keypoints\"\r\n          && (features[0].geometry.type === \"Point\")\r\n        ) {\r\n          this.$refs.mymap.addEventObjMarker(features[0], 'device', 'flaw', { gridId: this.planDetail.gridId, gridName: this.planDetail.gridName });\r\n        } else if (features.length > 1\r\n          && features[1].source != \"eventPoints\"\r\n          && features[1].source != \"inspUser\"\r\n          && features[1].source != \"keypoints\"\r\n          && (features[1].geometry.type === \"Point\")\r\n        ) {\r\n          this.$refs.mymap.addEventObjMarker(features[1], 'device', 'flaw', { gridId: this.planDetail.gridId, gridName: this.planDetail.gridName });\r\n        }\r\n      } else {\r\n        this.$refs.mymap.addEventObjMarker(e.lngLat, 'lnglat', 'flaw', { gridId: this.planDetail.gridId, gridName: this.planDetail.gridName });\r\n      }\r\n      mapObj.map.on('click', 'keypointsLayer', this.$refs.mymap.signInBuffer)\r\n      mapObj.map.off('click', this.selectFlawPoint)\r\n    },\r\n    getRestTime(time) {\r\n      return time ? new Date(time).getTime() - new Date().getTime() : 0\r\n    },\r\n    changeToInspCount(reportRate) {\r\n      if (reportRate.includes('/')) {\r\n        return Number(reportRate.split('/')[0])\r\n      } else {\r\n        return 0\r\n      }\r\n    },\r\n    changeToAllInspCount(reportRate) {\r\n      if (reportRate.includes('/')) {\r\n        return Number(reportRate.split('/')[1])\r\n      } else {\r\n        return 0\r\n      }\r\n    },\r\n    changeToRate(coverage) {\r\n      if (coverage.includes('/')) {\r\n        let insp = Number(coverage.split('/')[0])\r\n        let uninsp = Number(coverage.split('/')[1])\r\n        if (uninsp) {\r\n          return ((insp / uninsp) * 100).toFixed(2) + '%'\r\n        } else {\r\n          return '0%'\r\n        }\r\n      } else {\r\n        return '0%'\r\n      }\r\n    },\r\n    mapLoaded(mapInstance) {\r\n      console.log('mapLoadedddddddd')\r\n      let that = this\r\n      mapObj.mapInstance = mapInstance\r\n      mapObj.map = mapInstance.map\r\n      // 巡检模拟\r\n      // mapObj.map.on('click', e => {\r\n      //   if (that.trackPointList.length == 0) {\r\n      //     that.trackPointList.push([e.lngLat.lng, e.lngLat.lat])\r\n      //   } else {\r\n      //     that.drawInspLine({ longitude: e.lngLat.lng, latitude: e.lngLat.lat, locTime: that.$dayjs().format('YYYY-MM-DD HH:mm:ss'), locType: 'GPS' })\r\n      //   }\r\n      // })\r\n      mapObj.map.on('click', () => {\r\n        this.showKeyList = false\r\n      })\r\n      this.addMapImg()\r\n      if (typeof yuanchu != 'undefined') {\r\n        yuanchu.locationAMap.requestSingleLocation(\r\n          ['1'],\r\n          (res) => {\r\n            that.currentPosition = JSON.parse(JSON.stringify(res))\r\n            const param = {\r\n              ...that.currentPosition,\r\n            }\r\n            this.$refs.mymap.setInspUserPosition(param)\r\n          },\r\n          (err) => {\r\n            console.log('err=', err)\r\n          }\r\n        )\r\n      }\r\n      // // 巡检模拟\r\n      // mapObj.map.on('click', e => {\r\n      //   that.currentPosition = {\r\n      //     longitude: e.lngLat.lng,\r\n      //     latitude: e.lngLat.lat,\r\n      //     locTime: that.$dayjs().format('YYYY-MM-DD HH:mm:ss'),\r\n      //     locType: 'GPS',\r\n      //   }\r\n      //   const param = {\r\n      //     ...that.currentPosition,\r\n      //   }\r\n      //   this.$refs.mymap.setInspUserPosition(param)\r\n      //   // if (that.trackPointList.length == 0) {\r\n      //   //   that.trackPointList.push([e.lngLat.lng, e.lngLat.lat])\r\n      //   // } else {\r\n      //   //   that.drawInspLine({ longitude: e.lngLat.lng, latitude: e.lngLat.lat, locTime: that.$dayjs().format('YYYY-MM-DD HH:mm:ss'), locType: 'GPS' })\r\n      //   // }\r\n      // })\r\n    },\r\n    // 刷新任务\r\n    refreshTask() {\r\n      const id = this.$route.query.taskId\r\n      this.getTaskById(id, 'refresh')\r\n    },\r\n    async getTrackRecordsById(id) {\r\n      const res = await request({\r\n        url: '/xasw-pipe-operation/inspTask/track',\r\n        method: 'get',\r\n        params: { id, pageNum: 1, pageSize: 9999 },\r\n      })\r\n      if (res && res.status) {\r\n        console.log(res)\r\n      }\r\n    },\r\n    // 根据任务id获取巡检状况\r\n    async getTaskById(id, type = null) {\r\n      let toast = Toast.loading({\r\n        message: '地图加载中...',\r\n        loadingType: 'spinner',\r\n        duration: 0,\r\n        forbidClick: true\r\n      })\r\n      // 处理已巡检管线的接口\r\n      const recordLines = await api.recordedPipeLine({\r\n        taskId: id,\r\n        page: 1,\r\n        size: 9999\r\n      })\r\n      this.lines = []\r\n      if (recordLines.status) {\r\n        this.lines = recordLines.data.records.map((item) => item.pipeId)\r\n      }\r\n      const res = await request({\r\n        url: '/xasw-pipe-operation/inspTask/getById',\r\n        method: 'get',\r\n        params: { id, bizScope: this.$route.query.taskType }\r\n      })\r\n      if (res && res.status) {\r\n        this.taskDetail = res.data.inspTask\r\n        this.planDetail = res.data.inspPlan\r\n        this.buttonList = ['全部'].concat(this.planDetail.bizType.split(','))\r\n        this.inspRangeList = res.data.detailList.map((range) => {\r\n          return {\r\n            taskId: id,\r\n            ...range,\r\n          }\r\n        })\r\n        setTimeout(() => {\r\n          this.legendConfig = [\r\n            {\r\n              label: '污水',\r\n              clickFlag: this.planDetail.bizType.includes('污水') ? true : false\r\n            },\r\n            {\r\n              label: '雨水',\r\n              clickFlag: this.planDetail.bizType.includes('雨水') ? true : false\r\n            },\r\n            {\r\n              label: '供水',\r\n              clickFlag: this.planDetail.bizType.includes('供水') ? true : false\r\n            },\r\n            {\r\n              label: '再生水',\r\n              clickFlag: this.planDetail.bizType.includes('再生水') ? true : false\r\n            }\r\n          ];\r\n        }, 5000)\r\n        // 修改未巡检(0)任务状态至巡检中(1)\r\n        if (this.$route.query.isNew && this.taskDetail.taskStatus != 1) {\r\n          this.startOrEndTaskRecord(1)\r\n        }\r\n        if (type != 'refresh') {\r\n          const allTaskLines = await api.getAllTaskLines({\r\n            devType: '管线',\r\n            gridId: this.planDetail.gridId,\r\n            pageNum: 1,\r\n            pageSize: 999999,\r\n            bizScope: this.$route.query.taskType,\r\n            bizType: this.planDetail.bizType\r\n          })\r\n          if (allTaskLines.status) {\r\n            this.allTaskLines = []\r\n            allTaskLines.data.list.forEach(item => {\r\n              this.allTaskLines.push({\r\n                type: 'Feature',\r\n                id: item.id,\r\n                geometry: JSON.parse(item.geom),\r\n                properties: {\r\n                  id: item.id,\r\n                  length: item['length'],\r\n                  bizType: item.bizType\r\n                }\r\n              })\r\n            })\r\n            this.$refs.mymap.setAllInspLineSource(this.allTaskLines)\r\n          }\r\n        }\r\n        const kpRes = await request({\r\n          url: '/xasw-pipe-operation/inspTask/point',\r\n          method: 'get',\r\n          params: { id, gridId: this.planDetail.gridId, pageNum: 1, pageSize: 9999, bizScope: this.$route.query.taskType, bizType: this.planDetail.bizType },\r\n        })\r\n        this.keyDetailList = []\r\n        if (kpRes && kpRes.status) {\r\n          let keys = Object.keys(kpRes.data)\r\n          keys.forEach((item) => {\r\n            this.keyDetailList.push(...kpRes.data[item].list)\r\n          })\r\n          this.unInspKeyDetailList = this.keyDetailList.filter(it => !it.deviceStatus)\r\n        }\r\n        let completion = this.changeToRate(this.taskDetail.coverage)\r\n        this.navbarTitle = this.taskDetail.taskName\r\n        try {\r\n          const that = this\r\n          let timer = setInterval(function () {\r\n            // 30s后取消\r\n            setTimeout(() => {\r\n              clearInterval(timer)\r\n            }, 30000)\r\n            if (that.$refs.mymap && that.$refs.mymap.isOnLoaded()) {\r\n              clearInterval(timer)\r\n              that.$refs.mymap.addKeyPoints(that.keyDetailList)\r\n              if (type != 'refresh') {\r\n                that.$refs.mymap.addRangeList(that.inspRangeList)\r\n              }\r\n              const params = {\r\n                extParam: {\r\n                  task_id: that.$route.query.taskId\r\n                }\r\n              }\r\n              // 问题上报、设施缺陷接口\r\n              that.getProblemDataList(params)\r\n              that.$refs.mymap.addInspRecordTileLineSource(that.lines, completion)\r\n              toast.clear()\r\n              if (!that.currentPosition) return\r\n              const param = {\r\n                ...that.currentPosition,\r\n              }\r\n              that.$refs.mymap.setInspUserPosition(param)\r\n            }\r\n          }, 500)\r\n        } catch (e) {\r\n          console.log(e)\r\n        }\r\n      } else {\r\n        Toast({\r\n          message: '网络状态较差，加载任务失败',\r\n          icon: 'warn',\r\n          duration: 3000\r\n        })\r\n      }\r\n    },\r\n    pause() {\r\n      console.log('进入后台')\r\n      if (this.ifRecording && this.isResume) {\r\n        this.isResume = false\r\n      }\r\n    },\r\n    resume() {\r\n      console.log('进入前台')\r\n      if (this.ifRecording) {\r\n        this.isResume = true\r\n        pauseStateTrackPoints.length > 0 && this.upLoadPauseStateTrackPoints(this.deepClone(pauseStateTrackPoints))\r\n        pauseStatePipeIdList.length > 0 && this.upLoadPauseStatePipeIdList(this.deepClone(pauseStatePipeIdList))\r\n      }\r\n    },\r\n    upLoadPauseStatePipeIdList(data) {\r\n      let that = this\r\n      api.recordInspLine(data).then(async res => {\r\n        if (res.status) {\r\n          console.log('后台巡检管线补充数据上传成功')\r\n          pauseStatePipeIdList.splice(0, data.length) // 移除上传成功的数据。避免重复上传\r\n          const res = await request({\r\n            url: '/xasw-pipe-operation/inspTask/getById',\r\n            method: 'get',\r\n            params: { id: that.$route.query.taskId, bizScope: that.$route.query.taskType }\r\n          })\r\n          if (res.status) {\r\n            that.taskDetail = res.data.inspTask\r\n          }\r\n        } else {\r\n          that.$refs.mymap.uploadFiledPipeIdList.push(...data)\r\n        }\r\n      }).catch(err => {\r\n        setTimeout(() => {\r\n          this.upLoadPauseStatePipeIdList(data)\r\n        }, 5 * 1000)\r\n      })\r\n    },\r\n    upLoadPauseStateTrackPoints(data) {\r\n      api.inspectionTrack(data).then((res) => {\r\n        if (res && res.status) {\r\n          console.log('后台巡检轨迹补充点位上传成功')\r\n          pauseStateTrackPoints.splice(0, data.length) // 移除上传成功的点位。避免重复上传\r\n        } else {\r\n          console.log('后台巡检轨迹补充点位上传异常')\r\n          this.reportFailTrackPoints.push(...data)\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        setTimeout(() => {\r\n          this.upLoadPauseStateTrackPoints(data)\r\n        }, 5 * 1000)\r\n      })\r\n    },\r\n    // 轮询 currentPosition，绘制轨迹线\r\n    polling() {\r\n      let that = this\r\n      if (that.pollingFlag) {\r\n        if (typeof yuanchu != 'undefined') {\r\n          yuanchu.locationAMap.requestLocations(\r\n            [that.$route.query.taskType == '人巡' ? '4' : '2', '1', '20', '100', '0', true],\r\n            (res) => {\r\n              console.log(res)\r\n              that.drawInspLine(res)\r\n            },\r\n            (err) => {\r\n              // Toast.error({\r\n              //   message: 'err' + err,\r\n              //   duration: 2000,\r\n              // })\r\n            }\r\n          )\r\n        }\r\n      }\r\n    },\r\n    drawInspLine(position) {\r\n      const that = this\r\n      that.currentPosition = JSON.parse(JSON.stringify(position))\r\n      that.currentPosition = Object.assign(that.currentPosition, {\r\n        direction: 0\r\n      })\r\n      if (that.currentPosition.locType != 'SAME_REQ' && that.currentPosition.locType != 'FIX_CACHE') { // 过滤缓存定位数据\r\n        let lastPoint = that.trackPointList[that.trackPointList.length - 1]\r\n        let distance = that.GetDistance(lastPoint, [that.currentPosition.longitude, that.currentPosition.latitude]) * 1000\r\n        // 记录过程点\r\n        that.postTrackData_Point(\r\n          that.trackPointList[that.trackPointList.length - 1],\r\n          that.trackPointTimeList[that.trackPointTimeList.length - 1],\r\n          distance\r\n        ).then(res => {\r\n          if (res) {\r\n            // 改变巡检轨迹缓冲区范围内的管线颜色\r\n            let geom = {\r\n              type: 'LineString',\r\n              coordinates: [\r\n                [lastPoint[0], lastPoint[1]],\r\n                [that.currentPosition.longitude, that.currentPosition.latitude],\r\n              ]\r\n            }\r\n            let promise = new Promise((resolve, reject) => {\r\n              that.changeInspLineSourceBySpeed(geom, resolve)\r\n            })\r\n            promise.then(r => {\r\n              if (r) {\r\n                that.trackPointList.push([\r\n                  that.currentPosition.longitude,\r\n                  that.currentPosition.latitude\r\n                ])\r\n                that.trackPointTimeList.push(that.currentPosition.locTime)\r\n                // 构造临时线对象\r\n                let jsonLine = {\r\n                  type: 'Feature',\r\n                  properties: {},\r\n                  geometry: {\r\n                    type: 'LineString',\r\n                    coordinates: that.trackPointList,\r\n                  },\r\n                }\r\n                const coord = [parseFloat(that.currentPosition.longitude), parseFloat(that.currentPosition.latitude)];\r\n                const point = turf.point(coord);\r\n                mapObj.mapInstance.setSourceData(\"inspUser\", {\r\n                  type: \"FeatureCollection\",\r\n                  features: [point]\r\n                })\r\n                let jsonLineFeatureCollection = {\r\n                  type: 'FeatureCollection',\r\n                  features: [jsonLine],\r\n                }\r\n                if (mapObj.map.getSource('trackLineSource_now')) {\r\n                  mapObj.map.getSource('trackLineSource_now').setData(jsonLineFeatureCollection)\r\n                } else {\r\n                  mapObj.map.addSource('trackLineSource_now', {\r\n                    type: 'geojson',\r\n                    data: jsonLineFeatureCollection,\r\n                  })\r\n                }\r\n                if (mapObj.map.getLayer('trackLineLayer_now')) {\r\n                } else {\r\n                  mapObj.map.addLayer({\r\n                    id: 'trackLineLayer_now',\r\n                    type: 'line',\r\n                    source: 'trackLineSource_now',\r\n                    layout: {\r\n                      'line-cap': 'round',\r\n                      'line-join': 'round',\r\n                      'line-sort-key': 1,\r\n                      visibility: 'visible',\r\n                      // visibility: \"none\"\r\n                    },\r\n                    paint: {\r\n                      'line-color': '#addd52',\r\n                      'line-width': 5,\r\n                      'line-opacity': 0.8\r\n                    },\r\n                  }, 'inspUserLayer')\r\n                }\r\n                if (mapObj.map.getLayer('trackLineLayer_arrow')) {\r\n                } else {\r\n                  mapObj.map.addLayer({\r\n                    id: 'trackLineLayer_arrow',\r\n                    type: 'symbol',\r\n                    source: 'trackLineSource_now',\r\n                    layout: {\r\n                      'symbol-placement': 'line',\r\n                      'symbol-spacing': 20,\r\n                      'icon-image': 'arrowIcon',\r\n                      'icon-size': 0.5,\r\n                      'icon-allow-overlap': true,\r\n                      'symbol-sort-key': 3,\r\n                      visibility: 'visible'\r\n                    },\r\n                  }, 'inspUserLayer')\r\n                }\r\n              }\r\n            })\r\n          }\r\n        })\r\n      }\r\n    },\r\n    // 根据速度改变巡检管线颜色\r\n    changeInspLineSourceBySpeed(position, resolve) {\r\n      // const coord = [parseFloat(position.longitude), parseFloat(position.latitude)];\r\n      // const point = turf.point(coord);\r\n      const that = this\r\n      try {\r\n        // 改变周围要素的状态\r\n        let buffered = turf.buffer(position, that.$route.query.taskType == '人巡' ? 0.025 : 0.045, { unit: 'kilometers' });\r\n        that.changeInspLineState(buffered, resolve);\r\n      } catch (e) {\r\n        console.log(e);\r\n      }\r\n    },\r\n    // 设置巡检管线为已巡检\r\n    changeInspLineState(geometry, resolve) {\r\n      let that = this\r\n      // 将地理坐标系转化为屏幕坐标系\r\n      function geoTransToPixel(geom) {\r\n        const polygonBox = turf.bbox(geom);\r\n        const southWest = [polygonBox[0], polygonBox[1]];\r\n        const northEast = [polygonBox[2], polygonBox[3]];\r\n        let southWestPointPixel = mapObj.map.project(southWest);\r\n        let northEastPointPixel = mapObj.map.project(northEast);\r\n        // 增大bbox的查询范围\r\n        southWestPointPixel = [\r\n          southWestPointPixel.x - 50,\r\n          southWestPointPixel.y + 50\r\n        ]\r\n        northEastPointPixel = [\r\n          northEastPointPixel.x + 50,\r\n          northEastPointPixel.y - 50\r\n        ]\r\n        return [southWestPointPixel, northEastPointPixel];\r\n      }\r\n      // 对每个划分出来的bbox进行处理\r\n      function chunk(geom, resolve) {\r\n        const boxFeatures = mapObj.map.queryRenderedFeatures(geoTransToPixel(geom), {\r\n          layers: [\"initInspLineLayer\"]\r\n        });\r\n        console.log(boxFeatures, 'boxFeatures')\r\n        let tempPipeList = []\r\n        boxFeatures.forEach(feat => {\r\n          try {\r\n            const result = turf.booleanDisjoint(feat.geometry, geometry)\r\n            // 如果查出的要素与真实的范围相交且没有被巡检过，则改变其状态,并记录其关键字\r\n            if (!result && !feat.state.isInsp) {\r\n              mapObj.map.setFeatureState({\r\n                source: feat.source,\r\n                id: feat.id\r\n              }, { isInsp: true })\r\n              if (!tempPipeList.map(it => it.pipeId).includes(feat.id)) {\r\n                let date = that.$dayjs().format('YYYY-MM-DD HH:mm:ss')\r\n                tempPipeList.push({\r\n                  inspDate: date,\r\n                  pipeId: feat.id,\r\n                  ext3: feat.properties.bizType,\r\n                  pipeLength: feat.properties['length'] || 0,\r\n                  taskId: that.$route.query.taskId\r\n                })\r\n              }\r\n            }\r\n          } catch (error) {\r\n            console.log(error)\r\n          }\r\n        })\r\n        if (that.isResume) {\r\n          tempPipeList.length > 0 && api.recordInspLine(tempPipeList).then(async res => {\r\n            if (res.status) {\r\n              const res = await request({\r\n                url: '/xasw-pipe-operation/inspTask/getById',\r\n                method: 'get',\r\n                params: { id: that.$route.query.taskId, bizScope: that.$route.query.taskType }\r\n              })\r\n              if (res.status) {\r\n                that.taskDetail = res.data.inspTask\r\n              }\r\n            } else {\r\n              console.log('上传失败的tempPipeList: ', tempPipeList);\r\n              that.$refs.mymap.uploadFiledPipeIdList.push(...tempPipeList)\r\n            }\r\n          })\r\n        } else {\r\n          tempPipeList.length > 0 && pauseStatePipeIdList.push(...tempPipeList)\r\n        }\r\n        resolve(true)\r\n      }\r\n      // function cb(features) {\r\n      //   if (features.length > 0) {\r\n      //     setTimeout(() => {\r\n      //       chunk(features.shift());\r\n      //       cb(features);\r\n      //     }, 100);\r\n      //   }\r\n      // }\r\n      chunk(geometry, resolve)\r\n      // cb([geometry]);\r\n    },\r\n    // 绘制起始点\r\n    drawStartPoint() {\r\n      let that = this\r\n      return new Promise(function (resolve, reject) {\r\n        if (typeof yuanchu != 'undefined') {\r\n          yuanchu.locationAMap.requestSingleLocation(\r\n            ['1'],\r\n            (res) => {\r\n              that.currentPosition = JSON.parse(JSON.stringify(res))\r\n              const param = {\r\n                ...that.currentPosition,\r\n              }\r\n              console.log(res)\r\n              that.$refs.mymap.setInspUserPosition(param)\r\n              if (that.currentPosition != null) {\r\n                let recordData = []\r\n                recordData.push({\r\n                  taskId: that.taskDetail.id, // 任务id\r\n                  longitude: that.currentPosition.longitude,\r\n                  latitude: that.currentPosition.latitude,\r\n                  inspTime: that.currentPosition.locTime,\r\n                  distance: 0, // 第一个点距离为0\r\n                  inspDate: that.currentPosition.locTime,\r\n                  inspector: that.userInfo.userFullName,\r\n                })\r\n                api.inspectionTrack(recordData)\r\n                  .then((res) => {\r\n                    if (res && res.status) {\r\n                      // 使用上报点位作为起点\r\n                      console.log('起始点存储成功')\r\n                      that.trackPointList.push([that.currentPosition.longitude, that.currentPosition.latitude])\r\n                      that.trackPointTimeList.push(that.currentPosition.locTime)\r\n                      let jsonPoint = {\r\n                        type: 'Feature',\r\n                        properties: {},\r\n                        geometry: {\r\n                          type: 'Point',\r\n                          coordinates: [that.currentPosition.longitude, that.currentPosition.latitude],\r\n                        },\r\n                      }\r\n                      let jsonPointFeatureCollection = {\r\n                        type: 'FeatureCollection',\r\n                        features: [jsonPoint],\r\n                      }\r\n                      if (mapObj.map.getSource('startPointSource_now')) {\r\n                        mapObj.map.getSource('startPointSource_now').setData(jsonPointFeatureCollection)\r\n                      } else {\r\n                        mapObj.map.addSource('startPointSource_now', {\r\n                          type: 'geojson',\r\n                          data: jsonPointFeatureCollection,\r\n                        })\r\n                      }\r\n                      if (mapObj.map.getLayer('startPointLayer_now')) {\r\n                      } else {\r\n                        mapObj.map.addLayer({\r\n                          id: 'startPointLayer_now',\r\n                          type: 'circle',\r\n                          source: 'startPointSource_now',\r\n                          layout: {\r\n                            'circle-sort-key': 5,\r\n                            visibility: 'visible',\r\n                            // visibility: \"none\"\r\n                          },\r\n                          paint: {\r\n                            'circle-radius': 3,\r\n                            'circle-stroke-width': 5,\r\n                            'circle-stroke-color': '#2A83E6',\r\n                            'circle-color': 'white',\r\n                          },\r\n                        }, 'inspUserLayer')\r\n                      }\r\n                      // label\r\n                      if (mapObj.map.getLayer('startPoint_label')) {\r\n                      } else {\r\n                        mapObj.map.addLayer({\r\n                          id: 'startPoint_label',\r\n                          type: 'symbol',\r\n                          source: 'startPointSource_now',\r\n                          layout: {\r\n                            'symbol-placement': 'point',\r\n                            'icon-image': 'start_point',\r\n                            'icon-size': 0.6,\r\n                            'icon-offset': [0, -35],\r\n                            'icon-allow-overlap': true,\r\n                            'symbol-sort-key': 2,\r\n                            visibility: 'visible',\r\n                            // visibility: \"none\"\r\n                          },\r\n                        })\r\n                      }\r\n                      resolve(true)\r\n                    } else {\r\n                      resolve(false)\r\n                    }\r\n                  })\r\n                  .catch((err) => {\r\n                    reject(err)\r\n                  })\r\n              }\r\n            },\r\n            (err) => {\r\n              console.log('err=', err)\r\n            }\r\n          )\r\n        }\r\n      })\r\n    },\r\n    // 绘制终止点\r\n    async drawEndPoint(type) {\r\n      let that = this\r\n      if (that.currentPosition != null) {\r\n        let lastPoint = that.trackPointList[that.trackPointList.length - 1]\r\n        let distance = that.GetDistance(lastPoint, [that.currentPosition.longitude, that.currentPosition.latitude]) * 1000\r\n        let toast = Toast.loading({\r\n          message: '程序关闭中',\r\n          loadingType: 'spinner',\r\n          duration: 0,\r\n          forbidClick: true\r\n        })\r\n        // 记录终止点\r\n        that.postTrackData_Point(\r\n          that.trackPointList[that.trackPointList.length - 1],\r\n          that.trackPointTimeList[that.trackPointTimeList.length - 1],\r\n          distance\r\n        ).then(res => {\r\n          if (res) {\r\n            toast.close()\r\n            Toast.info({\r\n              message: '暂停成功',\r\n              duration: 1000\r\n            })\r\n            if (typeof yuanchu != 'undefined') {\r\n              yuanchu.locationAMap.stopRequestLocations()\r\n            }\r\n            that.trackPointList.push([that.currentPosition.longitude, that.currentPosition.latitude])\r\n            that.trackPointTimeList.push(that.currentPosition.locTime)\r\n            let jsonPoint = {\r\n              type: 'Feature',\r\n              properties: {},\r\n              geometry: {\r\n                type: 'Point',\r\n                coordinates: [that.currentPosition.longitude, that.currentPosition.latitude],\r\n              },\r\n            }\r\n            let jsonPointFeatureCollection = {\r\n              type: 'FeatureCollection',\r\n              features: [jsonPoint],\r\n            }\r\n            if (mapObj.map.getSource('endPointSource_now')) {\r\n              mapObj.map.getSource('endPointSource_now').setData(jsonPointFeatureCollection)\r\n            } else {\r\n              mapObj.map.addSource('endPointSource_now', {\r\n                type: 'geojson',\r\n                data: jsonPointFeatureCollection,\r\n              })\r\n            }\r\n            if (mapObj.map.getLayer('endPointLayer_now')) {\r\n            } else {\r\n              mapObj.map.addLayer({\r\n                id: 'endPointLayer_now',\r\n                type: 'circle',\r\n                source: 'endPointSource_now',\r\n                layout: {\r\n                  'circle-sort-key': 5,\r\n                  visibility: 'visible',\r\n                  // visibility: \"none\"\r\n                },\r\n                paint: {\r\n                  'circle-radius': 3,\r\n                  'circle-stroke-width': 5,\r\n                  'circle-stroke-color': '#addd52',\r\n                  'circle-color': 'white',\r\n                },\r\n              }, 'inspUserLayer')\r\n            }\r\n\r\n            // 补充trackline\r\n            let jsonLine = {\r\n              type: 'Feature',\r\n              properties: {},\r\n              geometry: {\r\n                type: 'LineString',\r\n                coordinates: that.trackPointList,\r\n              },\r\n            }\r\n            let jsonLineFeatureCollection = {\r\n              type: 'FeatureCollection',\r\n              features: [jsonLine],\r\n            }\r\n            if (mapObj.map.getSource('trackLineSource_now')) {\r\n              mapObj.map.getSource('trackLineSource_now').setData(jsonLineFeatureCollection)\r\n            } else {\r\n              mapObj.map.addSource('trackLineSource_now', {\r\n                type: 'geojson',\r\n                data: jsonLineFeatureCollection,\r\n              })\r\n            }\r\n            if (mapObj.map.getLayer('trackLineLayer_now')) {\r\n            } else {\r\n              mapObj.map.addLayer({\r\n                id: 'trackLineLayer_now',\r\n                type: 'line',\r\n                source: 'trackLineSource_now',\r\n                layout: {\r\n                  'line-cap': 'round',\r\n                  'line-join': 'round',\r\n                  visibility: 'visible',\r\n                  // visibility: \"none\"\r\n                },\r\n                paint: {\r\n                  'line-color': '#addd52',\r\n                  'line-width': 5,\r\n                  'line-opacity': 0.8,\r\n                },\r\n              }, 'inspUserLayer')\r\n            }\r\n            // label\r\n            if (mapObj.map.getLayer('endPoint_label')) {\r\n            } else {\r\n              mapObj.map.addLayer({\r\n                id: 'endPoint_label',\r\n                type: 'symbol',\r\n                source: 'endPointSource_now',\r\n                layout: {\r\n                  'symbol-placement': 'point',\r\n                  'icon-image': 'end_point',\r\n                  'icon-size': 0.6,\r\n                  'icon-offset': [0, -35],\r\n                  'icon-allow-overlap': true,\r\n                  'symbol-sort-key': 2,\r\n                  visibility: 'visible',\r\n                  // visibility: \"none\"\r\n                },\r\n              })\r\n            }\r\n            // 上传之前上传失败的点位\r\n            that.reportFailTrackPoints.length > 0 && that.postFailTrackData()\r\n            that.$refs.mymap.uploadFiledPipeIdList.length > 0 && api.recordInspLine(that.$refs.mymap.uploadFiledPipeIdList).then(res => {\r\n              if (res.status) {\r\n                console.log('管线补充上传成功')\r\n                that.$refs.mymap.uploadFiledPipeIdList = []\r\n              }\r\n            })\r\n            if (type == 'end') {\r\n              this.startOrEndTaskRecord(2) // 已巡检状态 '2'\r\n            } else {\r\n              this.pollingFlag = false\r\n              this.ifRecording = false\r\n              localStorage.setItem('startRecordLines', 'end')\r\n              if (type == 'pause') {\r\n                Toast.success({\r\n                  message: '暂停成功',\r\n                  duration: 2000\r\n                })\r\n                this.refreshTask()\r\n              } else if (type == 'leave') {\r\n                this.$router.go(-1)\r\n              }\r\n            }\r\n          } else {\r\n            Toast.error({\r\n              message: type == 'end' ? '结束失败' : '暂停失败'\r\n            })\r\n          }\r\n        })\r\n      } else {\r\n        let type = type\r\n        let timer = setTimeout(() => {\r\n          that.drawEndPoint(type)\r\n        }, 1000)\r\n      }\r\n    },\r\n    async postFailTrackData() {\r\n      let that = this\r\n      await api\r\n        .inspectionTrack(that.reportFailTrackPoints)\r\n        .then((res) => {\r\n          if (res && res.status) {\r\n            console.log('轨迹存储成功')\r\n            that.reportFailTrackPoints = []\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          console.log('巡检轨迹存储失败：' + err)\r\n        })\r\n    },\r\n\r\n    // 单点-后端记录轨迹数据\r\n    postTrackData_Point(pointData, timeData, distance) {\r\n      return new Promise(async (resolve, reject) => {\r\n        let that = this\r\n        for (let p = 0; p < pointData.length; p++) {\r\n          pointData[p] = Number(pointData[p])\r\n        }\r\n        let date_now = dayjs().format('YYYY-MM-DD HH:mm:ss')\r\n        let recordData = []\r\n        recordData.push({\r\n          taskId: that.taskDetail.id,\r\n          inspDate: timeData,\r\n          inspTime: date_now,\r\n          distance,\r\n          inspector: that.userInfo.userFullname,\r\n          longitude: pointData[0],\r\n          latitude: pointData[1],\r\n        })\r\n        if (that.isResume) {\r\n          await api\r\n            .inspectionTrack(recordData)\r\n            .then((res) => {\r\n              if (res && res.status) {\r\n                console.log('轨迹存储成功', recordData)\r\n                resolve(true)\r\n              } else {\r\n                // 上传失败的点位，暂时存在app端\r\n                that.reportFailTrackPoints.push(recordData)\r\n                console.log('that.reportFailTrackPoints: ', that.reportFailTrackPoints);\r\n                resolve(true)\r\n              }\r\n            })\r\n        } else {\r\n          pauseStateTrackPoints.push(...recordData)\r\n          resolve(true)\r\n        }\r\n      })\r\n    },\r\n    startOrEndTaskRecord(status) {\r\n      let data = {\r\n        planId: this.planDetail.id,\r\n        taskName: this.taskDetail.taskName,\r\n        taskCode: this.taskDetail.taskCode,\r\n        taskStatus: status,\r\n        id: this.taskDetail.id,\r\n        taskType: this.taskDetail.taskType,\r\n        bizType: this.planDetail.bizType,\r\n        ext1: status == 2 ? this.stopReason : ''\r\n      }\r\n      if (status == 1) {\r\n        data.planStartTime = this.$dayjs().format('YYYY-MM-DD HH:mm:ss')\r\n      } else if (status == 2) {\r\n        data.planEndTime = this.$dayjs().format('YYYY-MM-DD HH:mm:ss')\r\n      }\r\n      let that = this\r\n      api.changeTaskStatus(data).then((res) => {\r\n        if (res.status) {\r\n          if (status == 2) {\r\n            Toast.success({\r\n              message: '结束成功',\r\n              duration: 2000,\r\n              onClose: () => {\r\n                that.pollingFlag = false\r\n                that.ifRecording = false\r\n                localStorage.setItem('startRecordLines', 'end')\r\n                that.isView = true\r\n                that.$router.go(-1)\r\n              }\r\n            })\r\n          }\r\n        } else {\r\n          if (status == 2) {\r\n            Toast.error({\r\n              message: '结束失败, 请重试',\r\n              duration: 1500\r\n            })\r\n          }\r\n        }\r\n      })\r\n    },\r\n    // 清除缓存的轨迹数据\r\n    clearBufferTrack() {\r\n      let that = this\r\n      that.isResume = true\r\n      that.ifRecording = false\r\n      that.currentPosition = null\r\n      //数组归零\r\n      that.trackPointList = []\r\n      that.trackPointTimeList = []\r\n      that.overSpeedTrackLineList = []\r\n      pauseStateTrackPoints = []\r\n      pauseStatePipeIdList = []\r\n      //数据源清空\r\n      if (mapObj.map.getSource('trackLineSource_now')) {\r\n        mapObj.map.getSource('trackLineSource_now').setData({\r\n          type: 'FeatureCollection',\r\n          features: [],\r\n        })\r\n      }\r\n      if (mapObj.map.getSource('trackLineSource_overSpeed')) {\r\n        mapObj.map.getSource('trackLineSource_overSpeed').setData({\r\n          type: 'FeatureCollection',\r\n          features: [],\r\n        })\r\n      }\r\n      if (mapObj.map.getSource('startPointSource_now')) {\r\n        mapObj.map.getSource('startPointSource_now').setData({\r\n          type: 'FeatureCollection',\r\n          features: [],\r\n        })\r\n      }\r\n\r\n      if (mapObj.map.getSource('endPointSource_now')) {\r\n        mapObj.map.getSource('endPointSource_now').setData({\r\n          type: 'FeatureCollection',\r\n          features: [],\r\n        })\r\n      }\r\n    },\r\n    addMapImg() {\r\n      mapObj.map.loadImage(\r\n        require('@assets/img/inspection/white_arrow_right.png'),\r\n        function (error, image) {\r\n          if (error) throw error\r\n          if (!mapObj.map.hasImage('arrowIcon')) {\r\n            mapObj.map.addImage('arrowIcon', image, {})\r\n          }\r\n        }\r\n      )\r\n      mapObj.map.loadImage(\r\n        require('@assets/img/inspection/icon_starting_point.png'),\r\n        function (error, image) {\r\n          if (error) throw error\r\n          if (!mapObj.map.hasImage('start_point')) {\r\n            mapObj.map.addImage('start_point', image, {})\r\n          }\r\n        }\r\n      )\r\n      mapObj.map.loadImage(\r\n        require('@assets/img/inspection/icon_at_end.png'),\r\n        function (error, image) {\r\n          if (error) throw error\r\n          if (!mapObj.map.hasImage('end_point')) {\r\n            mapObj.map.addImage('end_point', image, {})\r\n          }\r\n        }\r\n      )\r\n    },\r\n    // 开始记录 上传起点成功后才进入巡检过程\r\n    startInspRecord() {\r\n      if (this.isView) {\r\n        Toast({\r\n          message: '该巡检任务已结束',\r\n          duration: 1500\r\n        })\r\n        return\r\n      }\r\n      if (!this.currentPosition || !this.currentPosition.longitude) {\r\n        Toast.warning({\r\n          message: '当前GPS信号弱，请稍后尝试',\r\n          duration: 2000\r\n        })\r\n        return\r\n      }\r\n      this.clearBufferTrack()\r\n      let toast = Toast.loading({\r\n        message: '程序启动中',\r\n        loadingType: 'spinner',\r\n        duration: 0,\r\n        forbidClick: true\r\n      })\r\n      this.drawStartPoint()\r\n        .then((res) => {\r\n          if (res) {\r\n            toast.close()\r\n            Toast.info({\r\n              message: '开始记录',\r\n              duration: 1500\r\n            })\r\n            this.pollingFlag = true\r\n            this.ifRecording = true\r\n            localStorage.setItem('startRecordLines', 'start')\r\n            // 开始轮询\r\n            this.polling()\r\n            // 记录当前时间\r\n            this.startRecordTimer = new Date()\r\n          } else {\r\n            Toast.error({\r\n              message: '接口异常，无法开始任务',\r\n              duration: 2000\r\n            })\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          console.log(err)\r\n          Toast.error({\r\n            message: '网络状态异常，正在重试',\r\n            duration: 2000\r\n          })\r\n          setTimeout(() => {\r\n            this.drawStartPoint()\r\n          }, 5000)\r\n        })\r\n    },\r\n    // 结束记录\r\n    endRecord(type) {\r\n      let diff = Math.floor((new Date() - this.startRecordTimer) / 1000)\r\n      if (diff <= 10) {\r\n        Toast.info({\r\n          message: `结束太快了,请${10 - diff}秒后再试`,\r\n          duration: 1000\r\n        })\r\n        return\r\n      }\r\n      this.endRecordConfirm(type)\r\n    },\r\n    // 结束记录确认\r\n    endRecordConfirm(type) {\r\n      this.drawEndPoint(type)\r\n    },\r\n    // 开始定位\r\n    startLocation() {\r\n      let that = this\r\n      yuanchu.locationAMap.requestSingleLocation(\r\n        ['1'],\r\n        (res) => {\r\n          that.currentPosition = JSON.parse(JSON.stringify(res))\r\n          const param = {\r\n            ...that.currentPosition,\r\n          }\r\n          if (!that.currentPosition || !that.currentPosition.longitude || !that.currentPosition.latitude) {\r\n            Toast.error({\r\n              message: '获取位置失败!',\r\n              duration: 2000\r\n            })\r\n            return\r\n          } else {\r\n            const coord = [parseFloat(that.currentPosition.longitude), parseFloat(that.currentPosition.latitude)]\r\n            that.$refs.mymap.setInspUserPosition(param)\r\n            that.flyToPoint(coord)\r\n          }\r\n        },\r\n        (err) => {\r\n          console.log('err=', err)\r\n        }\r\n      )\r\n    },\r\n    goEventOrFlawDetail(feature, type) {\r\n      let currentPoint = feature\r\n      console.log(feature)\r\n      currentPoint = feature\r\n      currentPoint.bigType = feature.bizType || ''\r\n      currentPoint.gridId = this.planDetail.gridId\r\n      currentPoint.gridName = this.planDetail.gridName\r\n      currentPoint.gridManager = { fullName: this.planDetail.gridManager, username: this.planDetail.userName }\r\n      currentPoint.lng = feature.geom.coordinates[0]\r\n      currentPoint.lat = feature.geom.coordinates[1]\r\n      currentPoint.road_name = feature.road || ''\r\n      currentPoint.smallType = feature.deviceType || ''\r\n      currentPoint.code = feature.deviceId || ''\r\n      currentPoint.taskId = this.taskDetail.id\r\n      if (type == 'event') {\r\n        this.$router.push({\r\n          name: 'addProblemIndex',\r\n          query: { msg: currentPoint, token: this.formToken, taskId: this.$route.query.taskId, from: 'insp' },\r\n          params: { type: 'add' },\r\n        })\r\n      } else {\r\n        this.$router.push({\r\n          name: 'addFlaws',\r\n          query: { msg: currentPoint, token: this.formToken, taskId: this.$route.query.taskId, from: 'insp' },\r\n          params: { type: 'add' }\r\n        })\r\n      }\r\n    },\r\n    // 确认\r\n    onConfirm() {\r\n      if (true) {\r\n        let that = this\r\n        let feature = this.signForm.feature\r\n        let copySignForm = this.deepClone(this.signForm)\r\n        if (that.attachment == '') {\r\n          Notify({ type: 'error', message: '请上传附件' })\r\n          return\r\n        }\r\n        // 液位输入框是否显示（污水检查井必须填写液位字段）\r\n        if (this.waterLevelShow == true) {\r\n          if (copySignForm.liquidLevel == '') {\r\n            Notify({ type: 'error', message: '请输入液位' })\r\n            return\r\n          }\r\n        }\r\n        copySignForm.inspDate = dayjs().format('YYYY-MM-DD HH:mm:ss')\r\n        copySignForm.ext1 = copySignForm.remark // 备注\r\n        copySignForm.ext2 = '1' // 巡检记录的ext2字段，默认为1（待复核），已通过为2，已退回为3\r\n        delete copySignForm.feature\r\n\r\n        // resultList通过巡检要点list处理并添加到form中\r\n        let resultList = []\r\n        let textInFlag = false\r\n        // 巡检要点list数据\r\n        if (this.keyPointsInspectionList.length > 0) {\r\n          this.keyPointsInspectionList.forEach(item => {\r\n            resultList.push({\r\n              mainId: item.id, // 巡检要点id\r\n              mainPoint: item.mainPoint, // 巡检要点名称\r\n              mainValue: item.mainValue, // 该要点巡检结果\r\n              ext1: item.inputType, // 巡检要点输入类型，用于查询详情时判断html结构\r\n            })\r\n          })\r\n          for (let i = 0; i < resultList.length; i++) {\r\n            // 不为''或者全空格\r\n            if (resultList[i].mainValue == '' || resultList[i].mainValue.trim() == '') {\r\n              textInFlag = true\r\n            }\r\n          }\r\n        }\r\n        if (textInFlag) {\r\n          Notify({ type: 'error', message: '请将巡检要点补充完整' })\r\n          return\r\n        }\r\n        copySignForm.resultList = resultList\r\n        console.log('提交参数', _cloneDeep(copySignForm));\r\n        \r\n        api.signIn(copySignForm).then((res) => {\r\n          if (res && res.status) {\r\n            Toast.success({\r\n              message: '此关键点签到成功',\r\n              duration: 1000,\r\n              forbidClick: true,\r\n              onClose: () => {\r\n                // 巡检事件上报\r\n                if (copySignForm.isReport == '问题上报') {\r\n                  that.goEventOrFlawDetail(feature, 'event');\r\n                } else if (copySignForm.isReport == '新增缺陷') {\r\n                  that.goEventOrFlawDetail(feature, 'flaw');\r\n                } else {\r\n                  that.refreshTask()\r\n                }\r\n              }\r\n            })\r\n          } else {\r\n            Toast.error({\r\n              message: '此关键点签到失败',\r\n              duration: 2000\r\n            })\r\n          }\r\n          this.signShow = false\r\n          this.signForm.remark = ''\r\n          this.signForm.liquidLevel = ''\r\n          this.signForm.deviceStatus = '0'\r\n          this.signForm.isReport = ''\r\n          this.signForm.inspImagesList = []\r\n          this.attachment = ''\r\n          mapObj.mapInstance.setSourceData('buffered', {\r\n            type: 'FeatureCollection',\r\n            features: [],\r\n          })\r\n        })\r\n        // localStorage.setItem(\"isReportEvent\", false);\r\n      } else {\r\n        console.log('验证失败')\r\n      }\r\n    },\r\n    // 取消\r\n    onCancel() {\r\n      this.signShow = false\r\n      mapObj.mapInstance.setSourceData('buffered', {\r\n        type: 'FeatureCollection',\r\n        features: [],\r\n      })\r\n    },\r\n    cancelLeave() {\r\n      this.ifLeaveTask = false\r\n    },\r\n    confirmLeave() {\r\n      this.ifLeaveTask = false\r\n      this.endRecord('leave')\r\n    },\r\n    clickBack() {\r\n      if (this.ifRecording) {\r\n        this.ifLeaveTask = true\r\n      } else {\r\n        this.$router.go(-1)\r\n      }\r\n    },\r\n    // 签到\r\n    async startSignIn(feature) {\r\n      console.log('--------签到--------', feature);\r\n      if (feature.bizType == '污水' && feature.deviceType == '检查井') {\r\n        // 液位输入框是否显示\r\n        this.waterLevelShow = true\r\n      } else {\r\n        this.waterLevelShow = false\r\n      }\r\n      this.pointListShow = false\r\n      this.attachment = ''\r\n      this.signForm.isReport = ''\r\n      this.deviceName = feature.deviceType + (feature.deviceId || '')\r\n      // -----------------------------------------------------------------------------------------------------\r\n      //  deviceStatus状态（0正常 1异常 2未巡检） 巡检记录的ext2字段，默认为1（待复核），已通过为2，已退回为3\r\n      if (!feature.deviceStatus || feature.deviceStatus == '2' || feature.ext2 == '3') {\r\n        if (this.$route.query.isView) {\r\n          Toast.warning({\r\n            message: '任务已结束，无法继续打卡',\r\n            duration: 2000\r\n          })\r\n          mapObj.map.getSource('buffered') &&\r\n            mapObj.mapInstance.setSourceData('buffered', {\r\n              type: 'FeatureCollection',\r\n              features: [],\r\n            })\r\n          return\r\n        }\r\n        // 利用feature来判断是否处于35m范围内，如果处于，可以进行签到，否则不能进行签到\r\n        const position = this.currentPosition\r\n        if (!position) {\r\n          Toast.warning({\r\n            message: '获取不到巡检人位置',\r\n            duration: 2000\r\n          })\r\n          mapObj.map.getSource('buffered') &&\r\n          mapObj.mapInstance.setSourceData('buffered', {\r\n            type: 'FeatureCollection',\r\n            features: [],\r\n          })\r\n          return\r\n        }\r\n        const coord = [\r\n          parseFloat(position.longitude),\r\n          parseFloat(position.latitude),\r\n        ]\r\n        const point = turf.point(coord)\r\n        const engGeom = feature.geom\r\n        const buffered = turf.buffer(engGeom, 0.020, { unit: 'kilometers' })\r\n        const isInBuffer = turf.inside(point, buffered)\r\n        if (!isInBuffer) {\r\n          Toast.warning({\r\n            message: '未处于该关键点范围内',\r\n            duration: 2000\r\n          })\r\n          return\r\n        }\r\n        console.log('feature数据', feature);\r\n        // 巡检要点list数据\r\n        this.keyPointsInspectionList = []\r\n        let params4 = {\r\n          bizType: feature.bizType, // 业务类型（污水）\r\n          objectType: feature.deviceType, // 巡检对象类型名称（检查井）\r\n        }\r\n        // app端根据类型查询启用的巡检要点列表\r\n        api.inspPointCheckList(params4)\r\n          .then(res => {\r\n            this.keyPointsInspectionList = res?.data?.filter((item) => {\r\n              return item.mainStatus === \"启用中\"\r\n              // item = {\r\n              //   \"id\": \"1655843007768236033\",\r\n              //   \"createBy\": \"fawkes\",\r\n              //   \"createDate\": \"2023-05-09 15:51:51\",\r\n              //   \"updateBy\": null,\r\n              //   \"updateDate\": null,\r\n              //   \"deleteFlag\": 0,\r\n              //   \"mainPoint\": \"井内是否有大量淤积或杂物影响排水\",\r\n              //   \"inputType\": \"是/否\",\r\n              //   \"unit\": \"/\",\r\n              //   \"mainStatus\": \"启用中\",\r\n              //   \"bizType\": \"污水\",\r\n              //   \"objectType\": \"检查井\",\r\n              //   \"remarks\": null,\r\n              //   \"portalId\": null,\r\n              //   \"tenantId\": 100000\r\n              // }\r\n            }) || []\r\n            // 巡检要点list数据\r\n            if (this.keyPointsInspectionList.length > 0) {\r\n              this.keyPointsInspectionList.forEach((item) => {\r\n                let iT = ['']\r\n                // 如果inputType中存在'/'，则将其转换成数组，巡检要点结果mainValue默认为第一个值（\"inputType\": \"是/否\",），否则mainValue为''\r\n                if (item.inputType.indexOf('/') > -1) {\r\n                  iT = item.inputType.split('/')\r\n                }\r\n                this.$set(item, 'mainValue', iT[0]) // 该要点巡检结果\r\n              })\r\n            }\r\n            // this.keyPointsInspectionList = [\r\n            //   {\r\n            //     \"id\": \"1655843007768236033\",\r\n            //     \"createBy\": \"fawkes\",\r\n            //     \"createDate\": \"2023-05-09 15:51:51\",\r\n            //     \"updateBy\": null,\r\n            //     \"updateDate\": null,\r\n            //     \"deleteFlag\": 0,\r\n            //     \"mainPoint\": \"测试正常异常测试正常异常测试正常异常测试正常异常\",\r\n            //     \"inputType\": \"正常/异常\",\r\n            //     \"unit\": \"/\",\r\n            //     \"mainStatus\": \"启用中\",\r\n            //     \"bizType\": \"污水\",\r\n            //     \"objectType\": \"检查井\",\r\n            //     \"remarks\": null,\r\n            //     \"portalId\": null,\r\n            //     \"tenantId\": 100000,\r\n            //     \"mainValue\": \"正常\"\r\n            //   },\r\n            //   {\r\n            //     \"id\": \"1655843007768236034\",\r\n            //     \"createBy\": \"fawkes\",\r\n            //     \"createDate\": \"2023-05-09 15:51:51\",\r\n            //     \"updateBy\": null,\r\n            //     \"updateDate\": null,\r\n            //     \"deleteFlag\": 0,\r\n            //     \"mainPoint\": \"测试开启关闭测试开启关闭测试开启关闭测试开启关闭\",\r\n            //     \"inputType\": \"开启/关闭\",\r\n            //     \"unit\": \"/\",\r\n            //     \"mainStatus\": \"启用中\",\r\n            //     \"bizType\": \"污水\",\r\n            //     \"objectType\": \"检查井\",\r\n            //     \"remarks\": null,\r\n            //     \"portalId\": null,\r\n            //     \"tenantId\": 100000,\r\n            //     \"mainValue\": \"关闭\"\r\n            //   },\r\n            //   {\r\n            //     \"id\": \"1655843007768236035\",\r\n            //     \"createBy\": \"fawkes\",\r\n            //     \"createDate\": \"2023-05-09 15:51:51\",\r\n            //     \"updateBy\": null,\r\n            //     \"updateDate\": null,\r\n            //     \"deleteFlag\": 0,\r\n            //     \"mainPoint\": \"测试是否测试是否测试是否测试是否\",\r\n            //     \"inputType\": \"是/否\",\r\n            //     \"unit\": \"/\",\r\n            //     \"mainStatus\": \"启用中\",\r\n            //     \"bizType\": \"污水\",\r\n            //     \"objectType\": \"检查井\",\r\n            //     \"remarks\": null,\r\n            //     \"portalId\": null,\r\n            //     \"tenantId\": 100000,\r\n            //     \"mainValue\": \"是\"\r\n            //   },\r\n            //   {\r\n            //     \"id\": \"1655843007768236035\",\r\n            //     \"createBy\": \"fawkes\",\r\n            //     \"createDate\": \"2023-05-09 15:51:51\",\r\n            //     \"updateBy\": null,\r\n            //     \"updateDate\": null,\r\n            //     \"deleteFlag\": 0,\r\n            //     \"mainPoint\": \"测试数值测试数值测试数值测试数值\",\r\n            //     \"inputType\": \"数值\",\r\n            //     \"unit\": \"/\",\r\n            //     \"mainStatus\": \"启用中\",\r\n            //     \"bizType\": \"污水\",\r\n            //     \"objectType\": \"检查井\",\r\n            //     \"remarks\": null,\r\n            //     \"portalId\": null,\r\n            //     \"tenantId\": 100000,\r\n            //     \"mainValue\": \"\"\r\n            //   }\r\n            // ]\r\n            console.log('当前业务及设施类型下的巡检要点list', _cloneDeep(this.keyPointsInspectionList),);\r\n          })\r\n          .catch(err => { })\r\n          .finally(() => {\r\n            this.signShow = true\r\n            // 未巡检\r\n            this.hasSignIn = false\r\n            this.signForm.remark = ''\r\n            this.signForm.liquidLevel = ''\r\n            this.signForm.ext3 = feature.bizType\r\n            this.signForm.deviceStatus = '0'\r\n            this.signForm.inspImagesList = []\r\n            this.signForm.pointId = feature.id\r\n            this.signForm.taskId = this.$route.query.taskId,\r\n            this.signForm.feature = feature\r\n          })\r\n      } else {\r\n        let toast = Toast.loading({\r\n          message: '正在加载',\r\n          forbidClick: true,\r\n          loadingType: 'spinner',\r\n          duration: 0\r\n        })\r\n        this.hasSignIn = true\r\n        let params = {\r\n          page: 1,\r\n          size: 999,\r\n          deviceStatus: feature.deviceStatus,\r\n          pointId: feature.id,\r\n          taskId: this.$route.query.taskId,\r\n        }\r\n        const res = await request({\r\n          url: '/xasw-pipe-operation/inspPointRecord/page',\r\n          method: 'get',\r\n          params: params,\r\n        })\r\n        if (res && res.status) {\r\n          let result = res.data.records[0]\r\n          this.signForm.deviceStatus = result.deviceStatus\r\n          this.signForm.remark = result.ext1\r\n          this.signForm.liquidLevel = result.liquidLevel\r\n          this.signForm.isReport = result.isReport\r\n          const att = await request({\r\n            url: '/xasw-pipe-operation/inspPointRecord',\r\n            method: 'get',\r\n            params: { id: result.id }\r\n          })\r\n          if (att && att.status) {\r\n            console.log('已巡检关键点详情数据', _cloneDeep(att));\r\n            this.signForm.inspImagesList = att.data.inspImagesList\r\n            this.attachment = att.data.inspImagesList[0].fileId\r\n            // 巡检要点list\r\n            this.keyPointsInspectionList = att?.data?.resultList || []\r\n          }\r\n          toast.clear()\r\n          this.signShow = true\r\n        }\r\n      }\r\n    },\r\n    // 深拷贝\r\n    deepClone(data) {\r\n      return JSON.parse(JSON.stringify(data))\r\n    },\r\n    reportEvent(feature) {\r\n      this.reportFooterShow = false\r\n      this.$router.push({\r\n        path: '/pages/inspectionManage/add-event',\r\n        query: {\r\n          taskId: this.taskDetail.taskId,\r\n          feature: feature,\r\n          rangeList: this.rangeList,\r\n          taskDetail: this.taskDetail,\r\n        },\r\n      })\r\n    },\r\n    GetDistance(coordArray1, coordArray2) {\r\n      let lng1 = coordArray1[0]\r\n      let lat1 = coordArray1[1]\r\n      let lng2 = coordArray2[0]\r\n      let lat2 = coordArray2[1]\r\n      let radLat1 = (lat1 * Math.PI) / 180.0\r\n      let radLat2 = (lat2 * Math.PI) / 180.0\r\n      let a = radLat1 - radLat2\r\n      let b = (lng1 * Math.PI) / 180.0 - (lng2 * Math.PI) / 180.0\r\n      let s =\r\n        2 *\r\n        Math.asin(\r\n          Math.sqrt(\r\n            Math.pow(Math.sin(a / 2), 2) +\r\n            Math.cos(radLat1) * Math.cos(radLat2) * Math.pow(Math.sin(b / 2), 2)\r\n          )\r\n        )\r\n      s = s * 6378.137 // EARTH_RADIUS;\r\n      s = Math.round(s * 10000) / 10000\r\n      return s\r\n    },\r\n    resetMapView() {\r\n      this.$refs.mymap && mapObj.map.resetNorthPitch()\r\n    }\r\n  },\r\n  beforeDestroy() {\r\n    Toast.clear()\r\n    this.pollingFlag = false\r\n    this.clearBufferTrack()\r\n    document.removeEventListener(\"pause\", this.pause)\r\n    document.removeEventListener(\"resume\", this.resume)\r\n    if (typeof yuanchu != 'undefined') {\r\n      yuanchu.locationAMap.stopRequestLocations()\r\n    }\r\n    localStorage.removeItem('startRecordLines')\r\n    bus.$off('startSignIn')\r\n  }\r\n}\r\n</script>\r\n<style lang=\"less\" scoped>\r\n//隐藏滚动条\r\n&::-webkit-scrollbar {\r\n  display: none; //Chrome | Safari\r\n}\r\n/deep/.mapboxgl-popup-content {\r\n  width: auto;\r\n  min-width: 280px;\r\n  height: 50px;\r\n  padding: 24px 36px;\r\n  border-radius: 18px;\r\n  box-shadow: 10px 10px 30px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.task-map {\r\n  width: 100%;\r\n  height: 100%;\r\n  overflow: hidden;\r\n\r\n  .content {\r\n    width: 100%;\r\n    height: 40%;\r\n    background: #ffffff;\r\n    box-shadow: 0px -6px 12px 0px rgba(104, 115, 127, 0.1);\r\n    border-radius: 30px 30px 0 0;\r\n    position: absolute;\r\n    bottom: 0;\r\n    z-index: 4;\r\n    transition: all 0.5s;\r\n    .contentArea {\r\n      width: 100%;\r\n      height: 100%;\r\n      background: #f5f7f9;\r\n      display: flex;\r\n      flex-direction: column;\r\n      .buttonArea {\r\n        width: var(--width);\r\n        padding: 30px 20px;\r\n        display: flex;\r\n        .button {\r\n          min-width: 160px;\r\n          margin: 0 10px;\r\n          border: none;\r\n          box-shadow: 0px 4px 16px 0px rgba(104, 115, 127, 0.06);\r\n        }\r\n      }\r\n      .listArea {\r\n        margin: 0 4%;\r\n        background: #ffffff;\r\n        height: calc(100% - 148px);\r\n        padding: 20px 36px 0;\r\n        border-radius: 16px 16px 0 0;\r\n        overflow-y: scroll;\r\n        .list {\r\n          height: 45px;\r\n          display: flex;\r\n          padding: 40px 0;\r\n          border-bottom: 1px solid #eeeeee;\r\n          .list_num {\r\n            min-width: 60px;\r\n            margin-right: 30px;\r\n            margin-left: 10px;\r\n            height: 43px;\r\n            font-size: 36px;\r\n            font-family: Helvetica-Bold, Helvetica;\r\n            font-weight: bold;\r\n            color: #1b67d8;\r\n            line-height: 43px;\r\n          }\r\n          .list_type {\r\n            min-width: 160px;\r\n            height: 45px;\r\n            font-size: 32px;\r\n            font-family: PingFangSC-Regular, PingFang SC;\r\n            font-weight: 400;\r\n            color: #333333;\r\n            line-height: 45px;\r\n          }\r\n          .list_id {\r\n            min-width: 200px;\r\n            height: 45px;\r\n            font-size: 32px;\r\n            font-family: PingFangSC-Regular, PingFang SC;\r\n            font-weight: 400;\r\n            color: #333333;\r\n            line-height: 45px;\r\n          }\r\n          .list_deal {\r\n            height: 45px;\r\n            font-size: 32px;\r\n            font-family: PingFangSC-Regular, PingFang SC;\r\n            font-weight: 400;\r\n            color: #1b67d8;\r\n            line-height: 45px;\r\n            display: flex;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  .inactive {\r\n    height: 0;\r\n  }\r\n\r\n  .tip-tools {\r\n    position: fixed;\r\n    display: flex;\r\n    top: 15%;\r\n    left: 200px;\r\n    border-radius: 16px;\r\n    padding: 24px;\r\n    background: #FFFFFF;\r\n    box-shadow: 0px 10px 18px 0px rgba(0, 0, 0, 0.06);\r\n    border: 2px solid rgba(23, 144, 254, 0.6);\r\n\r\n    .tipImg {\r\n      width: 32px;\r\n      height: 32px;\r\n      margin-right: 16px;\r\n    }\r\n\r\n    .context {\r\n      font-size: 24px;\r\n      font-family: MicrosoftYaHei;\r\n      color: #1B67D8;\r\n      line-height: 31px;\r\n    }\r\n  }\r\n\r\n  .confirm-tip {\r\n    width: 80%;\r\n    height: 44%;\r\n    margin: auto;\r\n    background: #FFFFFF;\r\n    border-radius: 16px;\r\n    margin: 50% auto;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    /deep/.contentSelf {\r\n      height: calc(100% - 164px);\r\n      padding: 32px;\r\n      display: flex;\r\n      flex-direction: column;\r\n      .icon {\r\n        width: 100%;\r\n        height: 100px;\r\n        display: flex;\r\n        margin: 24px 0 28px;\r\n      }\r\n      .info {\r\n        height: auto;\r\n        font-size: 28px;\r\n        font-family: PingFangSC-Regular, PingFang SC;\r\n        font-weight: 400;\r\n        color: #555555;\r\n        line-height: 40px;\r\n        text-align: center;\r\n      }\r\n    }\r\n    /deep/.confirm_btn {\r\n      width: 100%;\r\n      height: 100px;\r\n      display: flex;\r\n      .btn1 {\r\n        width: 50%;\r\n        height: 100%;\r\n        border-top: 1px solid #DCDEE3;\r\n        font-size: 32px;\r\n        font-family: PingFangSC-Regular, PingFang SC;\r\n        font-weight: 400;\r\n        color: #333333;\r\n        line-height: 100px;\r\n        text-align: center;\r\n      }\r\n      .btn2 {\r\n        border-right: 1px solid #DCDEE3;\r\n      }\r\n    }\r\n  }\r\n\r\n  .alert {\r\n    top: 2.22rem;\r\n    position: fixed;\r\n    width: 100%;\r\n    z-index: 4;\r\n    background-color: #62707c;\r\n    opacity: 0.5;\r\n    font-size: 1rem;\r\n\r\n    .u-alert-content {\r\n      width: 100%;\r\n    }\r\n  }\r\n\r\n  .progress {\r\n    width: 80%;\r\n    height: 1rem;\r\n    background-color: #fff;\r\n    box-shadow: 0 0.4rem 0.6rem 0 rgba(0, 0, 0, 0.2);\r\n    border-radius: 0.1rem;\r\n    margin: 0 0.3rem;\r\n    padding: 0.1rem 0.15rem;\r\n    position: fixed;\r\n    top: 2.5rem;\r\n\r\n    &-box {\r\n      width: 100%;\r\n      margin: 0.3rem 0;\r\n      display: flex;\r\n\r\n      .pro-dot {\r\n        width: 0.3rem;\r\n        height: 0.3rem;\r\n        border-radius: 50%;\r\n        float: left;\r\n        margin: auto 0.3rem;\r\n      }\r\n\r\n      .pro-text {\r\n        line-height: 0.5rem;\r\n        display: flex;\r\n        font-size: 12px;\r\n        float: left;\r\n      }\r\n    }\r\n  }\r\n\r\n  .pro-circle {\r\n    position: fixed;\r\n    width: 1rem;\r\n    height: 1rem;\r\n    right: 0.1rem;\r\n    padding: 0.1rem;\r\n    top: 2.5rem;\r\n    // margin: 0.27rem 0rem;\r\n    background-color: #fff;\r\n    z-index: 3;\r\n    box-shadow: 0rem 0.22rem 0.61rem 0rem rgba(0, 0, 0, 0.2);\r\n    border-radius: 0.1rem;\r\n\r\n    .progress-text-view {\r\n      font-size: 0.4rem;\r\n      z-index: 4;\r\n\r\n      .progress-text-up {\r\n        color: #306cc8;\r\n      }\r\n\r\n      .progress-text-down {\r\n        border-top: 0.05rem solid #555555;\r\n      }\r\n    }\r\n  }\r\n\r\n  .point-list {\r\n    position: fixed;\r\n    width: 1.2rem;\r\n    height: 1.2rem;\r\n    left: 0.3rem;\r\n    bottom: 2rem;\r\n    background-color: #fff;\r\n    z-index: 3;\r\n    box-shadow: 0rem 0.22rem 0.61rem 0rem rgba(0, 0, 0, 0.2);\r\n    border-radius: 0.27rem;\r\n\r\n    .list-image {\r\n      margin: 0.18rem;\r\n      width: 0.82rem;\r\n      height: 0.82rem;\r\n    }\r\n  }\r\n\r\n  .footer {\r\n    width: inherit;\r\n    padding: 1.11rem 0.83rem;\r\n    color: #333333;\r\n    background-color: #ffffff;\r\n    height: 3.55rem;\r\n    z-index: 4;\r\n    position: fixed;\r\n    bottom: 0rem;\r\n\r\n    &-content {\r\n      float: left;\r\n    }\r\n\r\n    &-btn {\r\n      float: right;\r\n      width: 4.44rem;\r\n      height: 1.77rem;\r\n      line-height: 1.77rem;\r\n      border-radius: 0.88rem;\r\n    }\r\n  }\r\n\r\n  .start-record {\r\n    position: absolute;\r\n    z-index: 3;\r\n    left: 50%;\r\n    bottom: 235px;\r\n    transform: translate(-50%, 0);\r\n\r\n    img {\r\n      width: 140px;\r\n      height: 140px;\r\n    }\r\n  }\r\n\r\n  .controlCard {\r\n    width: 100%;\r\n    height: 328px;\r\n    position: absolute;\r\n    bottom: 0;\r\n    background-image: url('~@/assets/img/inspection/controlBg.png');\r\n    background-repeat: no-repeat;\r\n    background-size: 100%;\r\n\r\n    .controlContent {\r\n      margin: 60px 30px 0;\r\n      display: flex;\r\n      flex-direction: column;\r\n\r\n      .infoContent {\r\n        display: flex;\r\n        flex-direction: column;\r\n        justify-content: space-around;\r\n        margin-bottom: 24px;\r\n\r\n        .block {\r\n          text-align: center;\r\n          width: 210px;\r\n          height: 160px;\r\n          display: flex;\r\n          flex-direction: column;\r\n          align-items: center;\r\n          background: rgba(27, 103, 216, 0.05);\r\n          border-radius: 16px;\r\n          // margin: 0 20px;\r\n\r\n          .rate {\r\n            width: 100%;\r\n            height: 50%;\r\n            display: flex;\r\n            align-items: center;\r\n            margin: auto;\r\n            font-size: 48px;\r\n            font-family: Helvetica-Bold, Helvetica;\r\n            font-weight: bold;\r\n            color: #306cc8;\r\n\r\n            .centerStyle {\r\n              margin: auto;\r\n              display: flex;\r\n              align-items: center;\r\n              font-size: 38px;\r\n              font-family: Helvetica-Bold, Helvetica;\r\n              font-weight: bold;\r\n\r\n              .inspKp {\r\n                padding-bottom: 3px;\r\n                padding-right: 3px;\r\n                color: #306cc8;\r\n              }\r\n\r\n              .uninspKp {\r\n                color: #191919;\r\n                letter-spacing: 3px;\r\n              }\r\n            }\r\n          }\r\n\r\n          .name {\r\n            font-size: 14px;\r\n            font-family: PingFangSC-Regular, PingFang SC;\r\n            font-weight: 400;\r\n            color: #555555;\r\n            width: 100%;\r\n            height: 33%;\r\n          }\r\n        }\r\n      }\r\n\r\n      .bottomSide {\r\n        width: 100%;\r\n        display: flex;\r\n        margin-top: 24px;\r\n        justify-content: space-around;\r\n      }\r\n\r\n      .endControl {\r\n        display: flex;\r\n        justify-content: space-between;\r\n        align-items: center;\r\n\r\n        .leftText {\r\n          width: 27%;\r\n          display: flex;\r\n          justify-content: space-around;\r\n          align-items: center;\r\n\r\n          img {\r\n            width: 32px;\r\n            height: 32px;\r\n            margin: auto;\r\n          }\r\n\r\n          /deep/.fm-count-down {\r\n            font-size: 24px;\r\n            color: #306cc8;\r\n          }\r\n        }\r\n\r\n        .rightButton {\r\n          display: flex;\r\n\r\n          .endBtn {\r\n            font-size: 24px;\r\n            width: 120px;\r\n            height: 60px;\r\n            background: #ffffff;\r\n            color: #306cc8;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  .viewCard {\r\n    width: 100%;\r\n    height: 260px;\r\n    position: absolute;\r\n    bottom: 0;\r\n    background: #FFFFFF;\r\n    box-shadow: 0px 0px 18px 0px rgba(104, 115, 127, 0.18);\r\n    // background-image: url('~@/assets/img/inspection/controlBg.png');\r\n    // background-repeat: no-repeat;\r\n    // background-size: 100%;\r\n\r\n    .controlContent {\r\n      margin: 32px 30px 0;\r\n      display: flex;\r\n      flex-direction: column;\r\n\r\n      .infoContent {\r\n        display: flex;\r\n        flex-direction: column;\r\n        justify-content: space-around;\r\n        margin-bottom: 24px;\r\n\r\n        .block {\r\n          text-align: center;\r\n          width: 210px;\r\n          height: 160px;\r\n          display: flex;\r\n          flex-direction: column;\r\n          align-items: center;\r\n          background: rgba(27, 103, 216, 0.05);\r\n          border-radius: 16px;\r\n          // margin: 0 20px;\r\n\r\n          .rate {\r\n            width: 100%;\r\n            height: 50%;\r\n            display: flex;\r\n            align-items: center;\r\n            margin: auto;\r\n            font-size: 48px;\r\n            font-family: Helvetica-Bold, Helvetica;\r\n            font-weight: bold;\r\n            color: #306cc8;\r\n\r\n            .centerStyle {\r\n              margin: auto;\r\n              display: flex;\r\n              align-items: center;\r\n              font-size: 38px;\r\n              font-family: Helvetica-Bold, Helvetica;\r\n              font-weight: bold;\r\n\r\n              .inspKp {\r\n                padding-bottom: 3px;\r\n                padding-right: 3px;\r\n                color: #306cc8;\r\n              }\r\n\r\n              .uninspKp {\r\n                color: #191919;\r\n                letter-spacing: 3px;\r\n              }\r\n            }\r\n          }\r\n\r\n          .name {\r\n            font-size: 14px;\r\n            font-family: PingFangSC-Regular, PingFang SC;\r\n            font-weight: 400;\r\n            color: #555555;\r\n            width: 100%;\r\n            height: 33%;\r\n          }\r\n        }\r\n      }\r\n\r\n      .bottomSide {\r\n        width: 100%;\r\n        display: flex;\r\n        margin-top: 24px;\r\n        justify-content: space-around;\r\n      }\r\n\r\n      .endControl {\r\n        display: flex;\r\n        justify-content: space-between;\r\n        align-items: center;\r\n\r\n        .leftText {\r\n          width: 27%;\r\n          display: flex;\r\n          justify-content: space-around;\r\n          align-items: center;\r\n\r\n          img {\r\n            width: 32px;\r\n            height: 32px;\r\n            margin: auto;\r\n          }\r\n\r\n          /deep/.fm-count-down {\r\n            font-size: 24px;\r\n            color: #306cc8;\r\n          }\r\n        }\r\n\r\n        .rightButton {\r\n          display: flex;\r\n\r\n          .endBtn {\r\n            font-size: 24px;\r\n            width: 120px;\r\n            height: 60px;\r\n            background: #ffffff;\r\n            color: #306cc8;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  .tool-box {\r\n    position: fixed;\r\n    width: 1.2rem;\r\n    height: auto;\r\n    right: 0.3rem;\r\n    bottom: 350px;\r\n\r\n    .refresh {\r\n      width: 1.2rem;\r\n      height: 1.2rem;\r\n      margin-bottom: 0.55rem;\r\n      background-color: #fff;\r\n      z-index: 3;\r\n      box-shadow: 0rem 0.22rem 0.61rem 0rem rgba(0, 0, 0, 0.2);\r\n      border-radius: 0.27rem;\r\n\r\n      &-image {\r\n        margin: 0.18rem;\r\n        width: 0.82rem;\r\n        height: 0.82rem;\r\n      }\r\n    }\r\n\r\n    .route {\r\n      width: 1.2rem;\r\n      height: 1.2rem;\r\n      margin-bottom: 0.55rem;\r\n      background-color: #fff;\r\n      z-index: 3;\r\n      box-shadow: 0rem 0.22rem 0.61rem 0rem rgba(0, 0, 0, 0.2);\r\n      border-radius: 0.27rem;\r\n\r\n      &-image {\r\n        margin: 0.18rem;\r\n        width: 0.82rem;\r\n        height: 0.82rem;\r\n      }\r\n    }\r\n\r\n    .location {\r\n      width: 1.2rem;\r\n      height: 1.2rem;\r\n      background-color: #fff;\r\n      z-index: 3;\r\n      box-shadow: 0rem 0.22rem 0.61rem 0rem rgba(0, 0, 0, 0.2);\r\n      border-radius: 60px;\r\n\r\n      &-image {\r\n        margin: 0.18rem;\r\n        width: 0.82rem;\r\n        height: 0.82rem;\r\n      }\r\n    }\r\n  }\r\n\r\n  /deep/.fm-popup {\r\n    background: #f5f7f9;\r\n  }\r\n\r\n  .popup-view {\r\n    height: auto;\r\n    width: auto;\r\n    margin: 32px;\r\n    overflow: scroll;\r\n    border-radius: 32px;\r\n    background-color: #fff;\r\n\r\n    /deep/.fm-radio--horizontal {\r\n      margin-right: 20px;\r\n    }\r\n\r\n    .title {\r\n      display: flex;\r\n      margin-top: 32px;\r\n      padding-bottom: 32px;\r\n      border-bottom: 1px #f5f5f5 solid;\r\n\r\n      img {\r\n        width: 6px;\r\n        height: 40px;\r\n      }\r\n\r\n      .deviceId {\r\n        margin-left: 32px;\r\n        font-size: 36px;\r\n        font-family: PingFangSC-Semibold, PingFang SC;\r\n        font-weight: 600;\r\n        color: #191919;\r\n        line-height: 50px;\r\n      }\r\n    }\r\n\r\n    /deep/.fm-uploader__wrapper {\r\n      margin-left: 16px;\r\n    }\r\n\r\n    .preview-cover {\r\n      position: absolute;\r\n      bottom: 0;\r\n      box-sizing: border-box;\r\n      width: 100%;\r\n      padding: 4px;\r\n      color: #fff;\r\n      font-size: 12px;\r\n      text-align: center;\r\n      background: rgba(0, 0, 0, 0.3);\r\n    }\r\n  }\r\n\r\n  .btnArea {\r\n    display: flex;\r\n\r\n    .btn {\r\n      width: 94%;\r\n      margin: 0 auto;\r\n    }\r\n\r\n    .btn1 {\r\n      width: 44%;\r\n      margin: 0 12px 0 30px;\r\n    }\r\n\r\n    .btn2 {\r\n      width: 44%;\r\n      margin: 0 30px 0 12px;\r\n    }\r\n  }\r\n\r\n  .confirm-pop {\r\n    .title {\r\n      border-left: 0.22rem solid #306cc8;\r\n      margin: 0.27rem;\r\n      padding-left: 0.55rem;\r\n    }\r\n\r\n    .content {\r\n      border-top: 0.027rem solid rgba(128, 128, 128, 0.322);\r\n      width: 11.66rem;\r\n      padding: 1.33rem;\r\n      text-align: center;\r\n      background-color: #fff;\r\n\r\n      &-view {\r\n        font-size: 0.88rem;\r\n      }\r\n\r\n      .confirm-btn {\r\n        margin-top: 2.22rem;\r\n        justify-items: center;\r\n\r\n        .popup-btn {\r\n          float: left;\r\n          width: 3.33rem;\r\n          height: 1.77rem;\r\n          border-radius: 0.27rem;\r\n\r\n          &-l {\r\n            margin-left: 0.55rem;\r\n            margin-right: 0.55rem;\r\n          }\r\n\r\n          &-r {\r\n            margin-left: 0.55rem;\r\n            margin-right: 0.55rem;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n</style>\r\n"],"mappings":";AAgTA,OAAAA,GAAA;AACA,OAAAC,KAAA;AACA,OAAAC,KAAA;AACA,OAAAC,OAAA;AACA,OAAAC,OAAA;AACA,YAAAC,GAAA;AACA,SAAAC,KAAA,EAAAC,MAAA,EAAAC,MAAA;AACA,YAAAC,IAAA;AACA,OAAAC,QAAA;AACA,OAAAC,eAAA;AACA,OAAAC,GAAA;AACA,OAAAC,UAAA;AACA,MAAAC,MAAA;EACAC,GAAA;EACAC,WAAA;AACA;AACA,IAAAC,qBAAA;AACA,IAAAC,oBAAA;AACA;EACAC,IAAA;EACAC,UAAA;IACAjB,OAAA;IACAO,QAAA;IACAC;EACA;EACAU,KAAA;IACA;MACAC,WAAA;MACAC,UAAA;MACAC,mBAAA;MACAC,OAAA;MACAC,QAAA;MACAC,aAAA;MACAC,QAAA;MACAC,WAAA;MACAC,UAAA;MACAC,SAAA;MACAC,YAAA;MACAC,MAAA;MACAC,kBAAA;MACA;MACAC,YAAA;MACAC,MAAA;MACAC,MAAA;MACAC,UAAA;MACAC,SAAA;MACAC,WAAA;MACAC,OAAA,GACA;QACAC,IAAA;MACA,GACA;QACAA,IAAA;MACA,EACA;MACAC,WAAA;MACA;MACAC,aAAA;MACA;MACA;MACAC,gBAAA;MACAC,WAAA;MACA;MACAC,qBAAA;MACAC,WAAA;MACAC,gBAAA;MACAC,UAAA;MACA;MACAC,eAAA;MACAC,KAAA;MACA;MACAC,QAAA;MACAC,WAAA;MACAC,eAAA;MACAC,aAAA;MACAC,QAAA;MACAC,UAAA;MACAC,QAAA;QACAC,YAAA;QACAC,cAAA;QACAC,MAAA;QACAC,QAAA;QACAC,MAAA;QACAC,OAAA;QACAC,WAAA;MACA;MACAC,UAAA;QACAC,QAAA;QACAC,UAAA;QACAC,WAAA;MACA;MACAC,UAAA;MACAC,YAAA;MACAC,gBAAA;MACAC,OAAA;MACAC,UAAA;MACA;MACAC,aAAA;MACAC,SAAA;MACAC,aAAA;MACAC,SAAA,GACA;QACA5D,IAAA;QACA6D,KAAA;MACA,GACA;QACA7D,IAAA;QACA6D,KAAA;MACA,EACA;MACAC,WAAA,GACA;QACA9D,IAAA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AA,EAAA2G,QAAA;QACA,KAAA8F,UAAA;UACA7b,KAAA,CAAAsI,OAAA;YACAC,OAAA;YACAC,QAAA;UACA;UACA;QACA;QACAvB,OAAA,CAAAC,GAAA,cAAA9C,OAAA;QACA;QACA,KAAAgC,uBAAA;QACA,IAAA2V,OAAA;UACAlT,OAAA,EAAAzE,OAAA,CAAAyE,OAAA;UAAA;UACAmT,UAAA,EAAA5X,OAAA,CAAAwI,UAAA;QACA;QACA;QACA7M,GAAA,CAAAkc,kBAAA,CAAAF,OAAA,EACA1S,IAAA,CAAAC,GAAA;UAAA,IAAA4S,SAAA;UACA,KAAA9V,uBAAA,IAAAkD,GAAA,aAAAA,GAAA,gBAAA4S,SAAA,GAAA5S,GAAA,CAAAvI,IAAA,cAAAmb,SAAA,uBAAAA,SAAA,CAAAvT,MAAA,CAAA4C,IAAA;YACA,OAAAA,IAAA,CAAA4Q,UAAA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;UACA;UACA;UACA,SAAA/V,uBAAA,CAAAG,MAAA;YACA,KAAAH,uBAAA,CAAAoE,OAAA,CAAAe,IAAA;cACA,IAAA6Q,EAAA;cACA;cACA,IAAA7Q,IAAA,CAAA6P,SAAA,CAAAiB,OAAA;gBACAD,EAAA,GAAA7Q,IAAA,CAAA6P,SAAA,CAAA/K,KAAA;cACA;cACA,KAAAiM,IAAA,CAAA/Q,IAAA,eAAA6Q,EAAA;YACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACAnV,OAAA,CA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"}]}