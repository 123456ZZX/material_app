{"remainingRequest":"D:\\Code\\Project\\WL\\xasw-mobile\\node_modules\\babel-loader\\lib\\index.js!D:\\Code\\Project\\WL\\xasw-mobile\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!D:\\Code\\Project\\WL\\xasw-mobile\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Code\\Project\\WL\\xasw-mobile\\src\\views\\inspectionManage\\emergency-task.vue?vue&type=script&lang=js","dependencies":[{"path":"D:\\Code\\Project\\WL\\xasw-mobile\\src\\views\\inspectionManage\\emergency-task.vue","mtime":1705912800085},{"path":"D:\\Code\\Project\\WL\\xasw-mobile\\babel.config.js","mtime":1705912799600},{"path":"D:\\Code\\Project\\WL\\xasw-mobile\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Code\\Project\\WL\\xasw-mobile\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"D:\\Code\\Project\\WL\\xasw-mobile\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Code\\Project\\WL\\xasw-mobile\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["bus","MapComp","request","inspectionItem","inspectEvent","inspectionEventAll","turf","name","components","data","inspBusinessType","currentPosition","userInfo","engInfoDTO","ifRecording","selectEventType","selectInspObj","eventTypeList","geoJsonList","signShow","signForm","inspItemResult","files","eventType","geoJson","remark","text","voice","inspTaskDetailDesc","taskDetail","feature","rangeList","range","isRunList","value","rules","required","message","trigger","photoLength","previewURL","upimgPreview","headers","url","uploadFile","created","$storage","get","activated","localStorage","getItem","refreshMap","that","$nextTick","id","$route","query","taskId","$refs","mymap","changePipeTileLayerByBusiness","getTaskById","document","addEventListener","event","position","detail","param","pipeLevel","pipeMax","pipeLevelMax","pipeMin","pipeLevelMin","setInspUserPosition","getEventTypeList","mounted","$on","startEmeSignIn","isShow","feat","objLabel","properties","pipetype","gjz","objVal","$set","getEngPropertyVal","methods","classNames","getElementsByClassName","i","length","parentNode","removeChild","mapInstance","removeInspEmeMarkers","setSourceData","type","features","map","getLayer","removeLayer","getSource","removeSource","removeEventObjMarker","error","console","log","refreshTask","res","status","inspectionTask","item","restTime","getTaskRestTime","Date","planEndTime","timer","setInterval","setTimeout","clearInterval","isOnLoaded","addRangeList","params","getEventAll","e","forEach","eventItemText","geom","JSON","parse","geometry","computeCenter2","push","addInspEventLayer","page","size","list","label","inspItemName","inspItemId","getImageInfo","val","photoList","index","fileToken","temp","startLocation","coord","parseFloat","xCode","yCode","flyTo","zoom","current","end","curTime","endTime","diff","getTime","sec","onConfirm","validate","valid","Toast","duration","copySignForm","deepClone","computeCenter","inspTime","$moment","format","stringify","engId","payload","infoDTO","engGeom","inspectionTaskDetail","then","$api","postAction","uploadFiles","fileName","concat","preliminaryHandleFile","eventPayload","conclusion","eventDescribe","eventSource","eventTypeId","officeId","inspOrgId","preliminaryHandle","eventDescribeFile","regionItemText","undefined","lng","coordinates","lat","reporterId","reporterName","userFullname","onCancel","point","getInspDataInRange","taskRangerGeom","Object","assign","find","setRules","eventTypeConfirm","inspObjConfirm","obj","center","engPropertyValue","beforeDestroy","$off","onNavigationBarButtonTap"],"sources":["src/views/inspectionManage/emergency-task.vue"],"sourcesContent":["<!--\r\n * @Description: \r\n * @Author: wei_qx@hdec.com\r\n * @Date: 2021-04-23 08:49:00\r\n * @LastEditor: wei_qx@hdec.com\r\n * @LastEditTime: 2021-05-02 18:29:01\r\n-->\r\n<template>\r\n  <div class=\"task-map full-width\">\r\n    <!-- 地图 -->\r\n    <MapComp ref=\"mymap\" :ifInspection=\"true\" :inspBusinessType=\"inspBusinessType\" class=\"full-height\"></MapComp>\r\n    <!-- 定位 -->\r\n    <div class=\"tool-box\">\r\n      <div class=\"location\" @click=\"startLocation\">\r\n        <fm-image class=\"location-image\" src=\"@/static/img/inspection/location.png\"></fm-image>\r\n      </div>\r\n    </div>\r\n    <!-- 应急任务填报框 -->\r\n    <div v-if=\"signShow\" class=\"popup-view\">\r\n      <div class=\"popup-container\">\r\n        <div class=\"head\">\r\n          <text @click=\"onCancel\">取消</text>\r\n          <text>{{ feature.properties ?\r\n            feature.properties.taskDirectives ?\r\n             feature.properties.taskDirectives.inspItemName + \"，请核实\" \r\n             : \"事件，请核实\"\r\n             : \"事件，请核实\"\r\n            }}</text>\r\n          <text class=\"on-confirm\" @click=\"onConfirm\">确定</text>\r\n        </div>\r\n        <!-- <u-line color=\"#EEEEEE\"/> -->\r\n        <fm-list class=\"scroll\">\r\n          <fm-form :model=\"signForm\" ref=\"signForm\" class=\"sign-form\">\r\n            <fm-field label=\"巡检结果\" label-width=\"100px\" v-model=\"signForm.inspItemResult\" required />\r\n            <fm-field v-if=\"signForm.inspItemResult === 'false'\" v-model=\"signForm.eventType\" label=\"事件类型\" label-width=\"100px\" required right-icon=\"arrow-right\" prop=\"eventType\" />\r\n            <fm-field label=\"设施对象\" v-model=\"signForm.geoJson\" label-width=\"100px\" required  prop=\"geoJson\" right-icon=\"arrow-right\" />\r\n            <fm-field label=\"反馈描述\" v-model=\"signForm.remark.text\" label-width=\"100px\" />\r\n            <fm-field v-if=\"signForm.inspItemResult === 'false'\" v-model=\"signForm.inspTaskDetailDesc.text\" label=\"初步处理\" label-width=\"100px\" />\r\n            <fm-uploader label=\"多媒体附件\" label-width=\"100px\" label-position=\"top\" required prop=\"photoLength\" />\r\n          </fm-form>\r\n        </fm-list>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n<script>\r\nimport bus from \"../../views/inspectMap/utils/Bus.js\";\r\nimport MapComp from \"../../views/inspectMap/index.vue\";\r\nimport request from '@/utils/request'\r\nimport { inspectionItem, inspectEvent, inspectionEventAll } from './api'\r\nimport * as turf from '@turf/turf'\r\nexport default {\r\n  name: \"emergency-task\",\r\n  components: {\r\n    MapComp,\r\n    // SunuiUpimg\r\n  },\r\n  data() {\r\n    return {\r\n      inspBusinessType: \"\",\r\n      currentPosition: null,\r\n      userInfo: {},\r\n      engInfoDTO: null,\r\n      ifRecording: false,\r\n      selectEventType: false,\r\n      selectInspObj: false,\r\n      eventTypeList: [],\r\n      geoJsonList: [],\r\n      signShow: false,\r\n      signForm: {\r\n        inspItemResult: \"\",\r\n        files: [],\r\n        eventType: null,\r\n        geoJson: null,\r\n        remark: {\r\n          text: \"\",\r\n          voice: {}\r\n        },\r\n        inspTaskDetailDesc: {\r\n          text: \"\",\r\n          voice: {}\r\n        }\r\n      },\r\n      taskDetail: {},\r\n      feature: {},\r\n      rangeList: [],\r\n      range: {},\r\n      isRunList: [\r\n        {\r\n          name: \"正常\",\r\n          value: \"true\"\r\n        }, {\r\n          name: \"异常\",\r\n          value: \"false\"\r\n        }\r\n      ],\r\n      rules: {\r\n        inspItemResult: [\r\n          {\r\n            required: true,\r\n            message: \"请选择巡检结果\",\r\n            trigger: [\"change\", \"blur\"]\r\n          }\r\n        ],\r\n        photoLength: [\r\n          {\r\n            required: true,\r\n            message: \"请上传附件\",\r\n            trigger: [\"change\", \"blur\"]\r\n          }\r\n        ]\r\n      },\r\n      previewURL: \"/sys-storage/download_image?f8s=\",\r\n      upimgPreview: [],\r\n      headers: {},\r\n      url: {\r\n        // 本页面使用到的url\r\n        uploadFile: \"sys-storage/upload\",\r\n        // findFile: \"ecidi-cmp/file/cmpFileGroup/findFilesByGroupId\",\r\n      },\r\n    }\r\n  },\r\n  created() {\r\n    this.headers = this.$storage.get('access_token')\r\n  },\r\n  activated() {\r\n    this.selectEventType= false;\r\n    this.signShow= false;\r\n    this.userInfo = localStorage.getItem(\"userInfo\");\r\n    // this.$refs.mymap.mapInstance && this.$refs.mymap.mapInstance.destoryMap();\r\n    // this.$refs.mymap.mapInstance = null;\r\n    // this.$refs.mymap.initMap();\r\n    this.refreshMap();\r\n    const that = this;\r\n    this.$nextTick(() => {\r\n      const id = this.$route.query.taskId || \"1382190161063841793\" // 应急供水\r\n      this.inspBusinessType = this.$route.query.inspBusinessType;\r\n      this.$refs.mymap.changePipeTileLayerByBusiness(this.inspBusinessType);\r\n      this.getTaskById(id);\r\n      //  监听事件\r\n      document.addEventListener(\"positioning\", function(event) {\r\n        const position = event.detail.currentPosition;\r\n        that.currentPosition = position;\r\n        if (!that.currentPosition) return;\r\n        const param = {\r\n          inspBusinessType: that.taskDetail.inspBusinessType,\r\n          pipeLevel: {\r\n            pipeMax: that.taskDetail.pipeLevelMax,\r\n            pipeMin: that.taskDetail.pipeLevelMin\r\n          },\r\n          ...that.currentPosition\r\n        }\r\n        that.$refs.mymap.setInspUserPosition(param);\r\n      }, false);\r\n    })\r\n    this.getEventTypeList();\r\n  },\r\n  mounted() {\r\n    this.userInfo = localStorage.getItem(\"userInfo\");\r\n    bus.$on(\"startEmeSignIn\", (feature) => {\r\n      this.startEmeSignIn(feature);\r\n    })\r\n    bus.$on(\"reportInspEvent\", (feature, isShow) => {\r\n      // 从地图中选择设施对象\r\n      if (isShow) {\r\n        const feat = feature;\r\n        const objLabel = feature.properties.pipetype+ feat.properties.gjz;\r\n        const objVal = feature.properties.gjz;\r\n        this.$set(this.signForm, \"geoJson\", objLabel);\r\n        this.$set(this.signForm, \"gjz\", objVal);\r\n        this.getEngPropertyVal(this.signForm.gjz);\r\n      } else {\r\n        this.$set(this.signForm, \"geoJson\", \"\");\r\n        this.$set(this.signForm, \"gjz\", \"\");\r\n        this.engInfoDTO = null;\r\n      }\r\n    })\r\n    const that = this;\r\n    this.$nextTick(() => {\r\n      const id = this.$route.query.taskId || \"1382190161063841793\" // 应急供水\r\n      this.inspBusinessType = this.$route.query.inspBusinessType;\r\n      this.getTaskById(id);\r\n      this.getEventTypeList();\r\n      //  监听事件\r\n      document.addEventListener(\"positioning\", function(event) {\r\n        const position = event.detail.currentPosition;\r\n        that.currentPosition = position;\r\n        if (!that.currentPosition) return;\r\n        const param = {\r\n          inspBusinessType: that.taskDetail.inspBusinessType,\r\n          pipeLevel: {\r\n            pipeMax: that.taskDetail.pipeLevelMax,\r\n            pipeMin: that.taskDetail.pipeLevelMin\r\n          },\r\n          ...that.currentPosition\r\n        }\r\n        that.$refs.mymap.setInspUserPosition(param);\r\n      }, false);\r\n    })\r\n  },\r\n  methods: {\r\n    // 刷新地图\r\n    refreshMap() {\r\n      try {\r\n        // 清空所有的popup\r\n        let classNames = document.getElementsByClassName(\"mapboxgl-popup-anchor-bottom\");\r\n        for (let i = classNames.length - 1; i >= 0; i--) {\r\n          if (classNames[i] != null) {\r\n            classNames[i].parentNode.removeChild(classNames[i]);\r\n          }\r\n        }\r\n        this.$refs.mymap.mapInstance && this.$refs.mymap.removeInspEmeMarkers(this.rangeList);\r\n        // 清空巡检范围图层\r\n        this.$refs.mymap.mapInstance.setSourceData('rangeSource', {\r\n          type: \"FeatureCollection\",\r\n          features: []\r\n        });\r\n        // 清空巡检管线图层\r\n        this.$refs.mymap.mapInstance.setSourceData('initInspLineSource', {\r\n          type: \"FeatureCollection\",\r\n          features: []\r\n        });\r\n        this.$refs.mymap.mapInstance.setSourceData('unInspLineSource', {\r\n          type: \"FeatureCollection\",\r\n          features: []\r\n        });\r\n        this.$refs.mymap.mapInstance.setSourceData('inspLineSource', {\r\n          type: \"FeatureCollection\",\r\n          features: []\r\n        });\r\n        this.$refs.mymap.mapInstance.setSourceData('curInspLineSource', {\r\n          type: \"FeatureCollection\",\r\n          features: []\r\n        });\r\n        this.$refs.mymap.mapInstance.setSourceData('inspUserLineSource', {\r\n          type: \"FeatureCollection\",\r\n          features: []\r\n        });\r\n        this.$refs.mymap.mapInstance.setSourceData('inspUser', {\r\n          type: \"FeatureCollection\",\r\n          features: []\r\n        });\r\n        // 如果存在事件图层，就移除该图层\r\n        this.$refs.mymap.map.getLayer(\"eventPointsLayer\") && this.$refs.mymap.map.removeLayer(\"eventPointsLayer\");\r\n        this.$refs.mymap.map.getSource(\"eventPoints\") && this.$refs.mymap.map.removeSource(\"eventPoints\");\r\n        this.$refs.mymap.removeEventObjMarker();\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    },\r\n    // 刷新任务\r\n    refreshTask() {\r\n      console.log(\"刷新应急任务！\");\r\n      this.$refs.mymap.mapInstance && this.$refs.mymap.removeInspEmeMarkers(this.rangeList);\r\n      this.$nextTick(() => {\r\n        const id = this.$route.query.taskId || \"1382190161063841793\";\r\n        this.getTaskById(id);\r\n      })\r\n    },\r\n    // 根据任务id获取任务\r\n    async getTaskById(id) {\r\n      const res = await request({\r\n        url: `ops-inspection/api/inspectionTask/${id}`\r\n      });\r\n      if (res.status) {\r\n        this.taskDetail = res.data.inspectionTask;\r\n        this.rangeList = res.data.rangeList.map(item => {\r\n          return {\r\n            restTime: this.getTaskRestTime(new Date(), new Date(this.taskDetail.planEndTime)) || 0,\r\n            inspBusinessType: this.taskDetail.inspBusinessType,\r\n            pipeLevel: {\r\n              pipeMax: this.taskDetail.pipeLevelMax,\r\n              pipeMin: this.taskDetail.pipeLevelMin\r\n            },\r\n            ...item\r\n          }\r\n        })\r\n        try {\r\n          const that = this;\r\n          var timer = setInterval(function() {\r\n            // 30s后取消\r\n            setTimeout(() => {\r\n              clearInterval(timer);\r\n            }, 30000);\r\n            if (that.$refs.mymap && that.$refs.mymap.isOnLoaded()) {\r\n              clearInterval(timer);\r\n              that.$refs.mymap.addRangeList(that.rangeList, true);\r\n              const params = {\r\n                taskId: id\r\n              }\r\n              that.getEventAll(params);\r\n              if (!that.currentPosition) return;\r\n              const param = {\r\n                inspBusinessType: that.taskDetail.inspBusinessType,\r\n                pipeLevel: {\r\n                  pipeMax: that.taskDetail.pipeLevelMax,\r\n                  pipeMin: that.taskDetail.pipeLevelMin\r\n                },\r\n                ...that.currentPosition\r\n              }\r\n              that.$refs.mymap.setInspUserPosition(param);\r\n            }\r\n          }, 500);\r\n        } catch (e) {\r\n          console.log(e);\r\n        }\r\n      }\r\n    },\r\n    // 获取巡检事件\r\n    async getEventAll(params) {\r\n      const res = await inspectionEventAll(params);\r\n      if (res.status) {\r\n        let features = [];\r\n        res.data.forEach((item) => {\r\n          if (item.eventItemText) {\r\n            const geom = JSON.parse(item.eventItemText);\r\n            let feature = {\r\n              geometry: geom.type === \"Feature\" ? geom.geometry : geom,\r\n              properties: {}\r\n            };\r\n            this.$set(feature, \"geometry\", this.computeCenter2(feature.geometry));\r\n            this.$set(feature, \"id\", item.id);\r\n            this.$set(feature.properties, \"eventType\", item.eventType)\r\n            // this.$set(feature, \"eventType\", item.eventType);\r\n            // this.$refs.mymap.addInspEventMarker(feature);\r\n            features.push(feature);\r\n          }\r\n        });\r\n        this.$refs.mymap.addInspEventLayer(features);\r\n      }\r\n    },\r\n    // 获取事件类型\r\n    async getEventTypeList() {\r\n      const params = {\r\n        page: 1,\r\n        size: 9999\r\n      }\r\n      const res = await inspectionItem(params);\r\n      if (res.status) {\r\n        this.eventTypeList = res.data.list.map(item => {\r\n          return {\r\n            label: item.inspItemName,\r\n            value: item.inspItemId,\r\n            ...item\r\n          }\r\n        });\r\n      }\r\n    },\r\n    // 获取图片信息\r\n    getImageInfo(val) {\r\n      if (val && val[0].length > 0) {\r\n        this.signForm.files = val[0];\r\n        let photoList = [];\r\n        val[0].forEach((item, index) => {\r\n          photoList.push(item.fileToken);\r\n        });\r\n        let temp = photoList.length + \"\";\r\n        this.$set(this.signForm, \"photoLength\", temp);\r\n      } else {\r\n        this.$set(this.signForm, \"photoLength\", \"\");\r\n      }\r\n    },\r\n    // 开始定位\r\n    startLocation() {\r\n      const position = this.currentPosition;\r\n      if (!position) return;\r\n      const coord = [parseFloat(position.xCode), parseFloat(position.yCode)];\r\n      this.$refs.mymap.flyTo({ position: coord, zoom: 18});\r\n    },\r\n    // 计算剩余时间\r\n    getTaskRestTime(current, end) {\r\n      let curTime = new Date(current);\r\n      let endTime = new Date(end);\r\n      let diff = endTime.getTime() - curTime.getTime();\r\n      if (diff >= 0) {\r\n        let sec = diff / 1000;\r\n        return sec;\r\n      } else {\r\n        return 0;\r\n      }\r\n    },\r\n    // 确认\r\n    onConfirm() {\r\n      this.$refs.signForm.validate(valid => {\r\n        if (valid) {\r\n          console.log(\"验证通过\");\r\n          if (!this.engInfoDTO)  {\r\n            Toast({\r\n              message: \"设施对象数据不存在\",\r\n              duration: 3000\r\n            });\r\n            return;\r\n          }\r\n          // app端应急任务上报 /ops-inspection/api/inspectEvent\r\n          let copySignForm = this.deepClone(this.signForm);\r\n          if (this.signForm.inspItemResult === \"true\") {\r\n            const geom = this.computeCenter(this.feature);\r\n            copySignForm.inspTime = this.$moment().format(\"YYYY-MM-DD HH:mm:ss\");\r\n            copySignForm.remark = JSON.stringify(copySignForm.remark);\r\n            copySignForm.inspTaskDetailDesc = JSON.stringify(copySignForm.inspTaskDetailDesc);\r\n            this.$set(copySignForm, \"engId\", this.engInfoDTO.engId);\r\n            delete copySignForm.files;\r\n            let payload = {\r\n              engInfoDTO: this.engInfoDTO.infoDTO,\r\n              geoJson: this.engInfoDTO.infoDTO.engGeom,\r\n              files: this.signForm.files,\r\n              inspectionTaskDetail: copySignForm\r\n            }\r\n            inspectEvent(payload).then(res => {\r\n              if (res.status) {\r\n                Toast({\r\n                  message: \"填报成功\",\r\n                  duration: 3000\r\n                });\r\n                this.signShow = false;\r\n                this.refreshTask();\r\n              }\r\n            });\r\n          } else if (this.signForm.inspItemResult === \"false\") {\r\n            const geom = this.computeCenter(this.feature);\r\n            copySignForm.inspTime = this.$moment().format(\"YYYY-MM-DD HH:mm:ss\");\r\n            copySignForm.remark = JSON.stringify(copySignForm.remark);\r\n            copySignForm.inspTaskDetailDesc = JSON.stringify(copySignForm.inspTaskDetailDesc);\r\n            this.$set(copySignForm, \"engId\", this.engInfoDTO.engId);\r\n            delete copySignForm.files;\r\n            let payload = {\r\n              engInfoDTO: this.engInfoDTO.infoDTO,\r\n              geoJson: this.engInfoDTO.infoDTO.engGeom,\r\n              files: this.signForm.files,\r\n              inspectionTaskDetail: copySignForm\r\n            }\r\n            this.$api.postAction(\"/ops-inspection/api/inspectEvent\", payload).then(res => {\r\n              if (res.status) {\r\n                Toast({\r\n                  message: \"填报成功\",\r\n                  duration: 3000\r\n                });\r\n              }\r\n            });\r\n            // 巡检事件上报\r\n            // 事件描述文件json \"{\\\"dir\\\":\\\"2021-04/\\\",\\\"extName\\\":\\\"amr\\\",\\\"fileName\\\":\\\"20210413_111722.amr\\\",\\\"fileToken\\\":\\\"21fe7e24367f434a1cf36658f95cd47f\\\",\\\"objectName\\\":\\\"2021-04/21fe7e24367f434a1cf36658f95cd47f.amr\\\",\\\"size\\\":\\\"11472\\\",\\\"version\\\":\\\"0\\\"}\"\r\n            // const geom = this.computeCenter(this.feature);\r\n            // const geom = this.engInfoDTO.engGeom;\r\n            let uploadFiles = [];\r\n            if (this.signForm.inspTaskDetailDesc.voice.fileName) {\r\n              uploadFiles.push(this.signForm.inspTaskDetailDesc.voice);\r\n            }\r\n            uploadFiles = uploadFiles.concat(this.signForm.files);\r\n            const preliminaryHandleFile = JSON.stringify(uploadFiles);\r\n            const eventPayload = {\r\n              conclusion: copySignForm.eventType,\r\n              eventDescribe: this.signForm.remark.text,\r\n              eventSource: \"inspection_event_source_inspection\",\r\n              eventType: copySignForm.eventType,\r\n              eventTypeId: copySignForm.inspItemId,\r\n              inspBusinessType: this.taskDetail.inspBusinessType,\r\n              officeId: this.taskDetail.inspOrgId,\r\n              preliminaryHandle: this.signForm.inspTaskDetailDesc.text,\r\n              preliminaryHandleFile: preliminaryHandleFile,\r\n              eventDescribeFile: JSON.stringify(this.signForm.remark.voice),\r\n              regionItemText: this.engInfoDTO.infoDTO.engGeom,\r\n              // regionItemText: JSON.stringify(copySignForm.taskRangerGeom),\r\n              taskId: this.taskDetail.taskId,\r\n              engId: this.engInfoDTO ? this.engInfoDTO.engId : undefined, // 设施对象\r\n              eventItemText: this.engInfoDTO.infoDTO.engGeom,\r\n              // eventItemText: JSON.stringify(copySignForm.taskRangerGeom),\r\n              lng: geom.coordinates[0], // \r\n              lat: geom.coordinates[1], // 可能为polygon范围\r\n              reporterId: this.userInfo.id,\r\n              reporterName: this.userInfo.userFullname\r\n            }\r\n            this.$api.postAction(\"/yhsw-inspection/inspectionEvent/insert\", eventPayload).then(res => {\r\n              if (res.status) {\r\n                this.signShow = false;\r\n                this.refreshTask();\r\n              }\r\n            })\r\n          }\r\n        } else {\r\n          console.log(\"验证失败\");\r\n        }\r\n      })\r\n    },\r\n    // 取消\r\n    onCancel() {\r\n      this.signShow = false;\r\n    },\r\n    // 签到\r\n    startEmeSignIn(feature) {\r\n      this.feature = feature;\r\n      const geom = this.computeCenter(this.feature);\r\n      try {\r\n        if (this.feature.geometry.type === \"Polygon\") {\r\n          //如果是范围，定位当前巡检人员的位置附近的数据\r\n          if (this.currentPosition) {\r\n            const position = this.currentPosition;\r\n            const coord = [parseFloat(position.xCode), parseFloat(position.yCode)];\r\n            const point = turf.point(coord);\r\n            this.getInspDataInRange(point);\r\n          } else {\r\n            this.geoJsonList = [];\r\n            Toast({\r\n              message: \"获取不到巡检员位置\",\r\n              duration: 3000\r\n            })\r\n          }\r\n        } else {\r\n          console.log(\"this.feature==>\", this.feature);\r\n          // 查询当前签到位置范围内的数据\r\n          this.getInspDataInRange(geom);\r\n        }\r\n      } catch (e) {\r\n        console.log(e);\r\n      }\r\n      // 第一种寻找当前range,根据taskRangerName来匹配\r\n      // this.range = this.rangeList.find();\r\n      // 第二种，根据feature.id来匹配\r\n      this.rangeList.forEach(item => {\r\n        if (item.taskRangerGeom) {\r\n          const geom = JSON.parse(item.taskRangerGeom);\r\n          if (geom.id === feature.id) {\r\n            this.range = item;\r\n          }\r\n        }\r\n      })\r\n      this.signForm.inspTaskDetailDesc = {\r\n        text: \"\",\r\n        voice: {}\r\n      }\r\n      this.signForm.files = [];\r\n      this.signForm = this.deepClone(Object.assign(this.signForm, this.range));\r\n      this.signForm.remark = {\r\n        text: \"\",\r\n        voice: {}\r\n      }\r\n      this.signForm.taskRangerGeom = this.feature;\r\n      this.signForm.eventType = this.eventTypeList.find(item => item.value === this.signForm.inspItemId).label;\r\n      // 如果已经上报，且上报结果正常\r\n      if (this.signForm.inspItemResult === \"true\") {\r\n        this.signShow = false;\r\n        Toast({\r\n          message: \"结果已录入，无法再次提交\",\r\n          duration: 3000\r\n        })\r\n        return;\r\n      }\r\n      this.signShow = true;\r\n      this.$nextTick(() => {\r\n        this.$refs.signForm.setRules(this.rules);\r\n      })\r\n    },\r\n    // 事件类型选择确认\r\n    eventTypeConfirm(event) {\r\n      if (event && event.length > 0) {\r\n        this.$set(this.signForm, \"eventType\", event[0].label);\r\n        this.$set(this.signForm, \"inspItemId\", event[0].value);\r\n      }\r\n    },\r\n    // 巡检对象确定\r\n    inspObjConfirm(obj) {\r\n      if (obj && obj.length > 0) {\r\n        this.$set(this.signForm, \"geoJson\", obj[0].label);\r\n        this.$set(this.signForm, \"gjz\", obj[0].value);\r\n        this.getEngPropertyVal(this.signForm.gjz);\r\n      } else {\r\n        Toast({\r\n          message: \"暂无巡检对象\",\r\n          duration: 1500\r\n        })\r\n      }\r\n\r\n    },\r\n    // 深拷贝\r\n    deepClone(data) {\r\n      return JSON.parse(JSON.stringify(data));\r\n    },\r\n    // 计算中心点\r\n    computeCenter(feature) {\r\n      let position;\r\n      if (feature.geometry.type === 'Polygon') {\r\n        const center = turf.center(feature.geometry);\r\n        position = center.geometry;\r\n      } else if (feature.geometry.type === 'LineString') {\r\n        const center = turf.center(feature.geometry);\r\n        position = center.geometry;\r\n      } else if (feature.geometry.type === 'Point') {\r\n        position = feature.geometry;\r\n      }\r\n      return position;\r\n    },\r\n    // 计算中心点\r\n    computeCenter2(feature) {\r\n      let position;\r\n      if (feature.type === 'Polygon') {\r\n        const center = turf.center(feature);\r\n        position = center.geometry;\r\n      } else if (feature.type === 'LineString') {\r\n        const center = turf.center(feature);\r\n        position = center.geometry;\r\n      } else if (feature.type === 'Point') {\r\n        position = feature;\r\n      }\r\n      return position;\r\n    },\r\n    // 根据关键字查询\r\n    async getEngPropertyVal(gjz) {\r\n      const params = {\r\n        value: gjz\r\n      }\r\n      const res = await engPropertyValue(params);\r\n      if (res.status) {\r\n        console.log(\"res==>\", res);\r\n        if (!res.data) {\r\n          Toast({\r\n            message: res.message,\r\n            duration: 3000\r\n          })\r\n        }\r\n        this.engInfoDTO = res.data;\r\n      }\r\n    },\r\n    // 查询身边X米的工程对象\r\n    getInspDataInRange(position) {\r\n      const params = {\r\n        inspBusinessType: this.taskDetail.inspBusinessType,\r\n        pipeLevel: {\r\n          pipeMax: this.taskDetail.pipeLevelMax,\r\n          pipeMin: this.taskDetail.pipeLevelMin\r\n        },\r\n        ...position\r\n      }\r\n      this.$refs.mymap.getInspDataInRange(params).then(res => {\r\n        console.log(\"====>res\",res);\r\n        if (res) {\r\n          this.geoJsonList = res.map(item => {\r\n            return {\r\n              label: item.properties.pipetype + item.properties.gjz,\r\n              value: item.properties.gjz,\r\n              ...item\r\n            }\r\n          })\r\n          if (this.geoJsonList.length <= 0) {\r\n            Toast({\r\n              message: \"周围未找到设施对象\",\r\n              duration: 3000\r\n            })\r\n          }\r\n        }\r\n      })\r\n    }\r\n  },\r\n  beforeDestroy() {\r\n    bus.$off(\"startEmeSignIn\");\r\n  },\r\n  onNavigationBarButtonTap: function(e) {\r\n\r\n  }\r\n}\r\n</script>\r\n<style lang=\"scss\" scoped>\r\n.task-map {\r\n  .tool-box {\r\n    position: fixed;\r\n    width: 40px;\r\n    height: 100px;\r\n    right: 15px;\r\n    bottom: 10px;\r\n    .location {\r\n      width: 40px;\r\n      height: 40px;\r\n      background-color: #fff;\r\n      z-index: 3;\r\n      box-shadow: 0px 4px 11px 0px rgba(0,0,0,0.2);\r\n      border-radius: 5px;\r\n      &-image {\r\n        margin: 8px;\r\n        width: 24px;\r\n        height: 24px;\r\n      }\r\n    }\r\n  }\r\n  .popup-view {\r\n    height: 43%;\r\n    width: 100%;\r\n    position: fixed;\r\n    bottom: 0px;\r\n    z-index: 10;\r\n    transition: bottom 3.0s ease-in;\r\n    background-color: #fff;\r\n    .popup-container {\r\n      padding: 15px;\r\n      .head {\r\n        padding: 0px 5px;\r\n        display: flex;\r\n        justify-content: space-between;\r\n        font-size: 15px;\r\n        font-weight: 400;\r\n        color: #333333;\r\n        .on-confirm {\r\n          color: #2a83e6;\r\n        }\r\n        margin-bottom: 10px;\r\n      }\r\n      .scroll {\r\n        height: 230px;\r\n        .sign-form {\r\n          margin: 8px;\r\n        }\r\n      }\r\n    }\r\n    .confirm-pop {\r\n      .title {\r\n        border-left: 4px solid #2a83e6;\r\n        margin: 5px;\r\n        padding-left: 10px;\r\n      }\r\n      .content {\r\n        border-top: 0.5px solid rgba(128, 128, 128, 0.322);\r\n        width: 210px;\r\n        padding: 24px;\r\n        text-align: center;\r\n        background-color: #fff;\r\n        &-view {\r\n          font-size: 16px;\r\n        }\r\n        .confirm-btn {\r\n          margin-top: 40px;\r\n          justify-items: center;\r\n          .popup-btn {\r\n            float: left;\r\n            width: 60px;\r\n            height: 32px;\r\n            border-radius: 5px;\r\n            &-l{\r\n              margin-left: 10px;\r\n              margin-right: 10px;\r\n            }\r\n            &-r{\r\n              margin-left: 10px;\r\n              margin-right: 10px;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n}\r\n</style>\r\n"],"mappings":"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"}]}