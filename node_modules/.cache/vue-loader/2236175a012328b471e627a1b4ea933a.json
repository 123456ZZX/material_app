{"remainingRequest":"D:\\Code\\Project\\WL\\xasw-mobile\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Code\\Project\\WL\\xasw-mobile\\src\\views\\ProblemReport\\index.vue?vue&type=style&index=1&id=fdf2c9a8&lang=less&scoped=true","dependencies":[{"path":"D:\\Code\\Project\\WL\\xasw-mobile\\src\\views\\ProblemReport\\index.vue","mtime":1708928163410},{"path":"D:\\Code\\Project\\WL\\xasw-mobile\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Code\\Project\\WL\\xasw-mobile\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"D:\\Code\\Project\\WL\\xasw-mobile\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"D:\\Code\\Project\\WL\\xasw-mobile\\node_modules\\less-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Code\\Project\\WL\\xasw-mobile\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Code\\Project\\WL\\xasw-mobile\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQoubWFpbiB7DQogIGJhY2tncm91bmQtY29sb3I6ICNmMmYzZjQgIWltcG9ydGFudDsNCiAgaGVpZ2h0OiAxMzM0cHg7DQogIHdpZHRoOiA3NTBweDsNCg0KICAubWFwLWNvbnRhaW5lciB7DQogICAgaGVpZ2h0OiA2ODBweDsNCiAgICB3aWR0aDogNzUwcHg7DQogIH0NCn0NCg0KL2RlZXAvLm1hcGJveGdsLXBvcHVwLWNvbnRlbnQgew0KICB3aWR0aDogYXV0bzsNCiAgbWluLXdpZHRoOiAyODBweDsNCiAgaGVpZ2h0OiA1MHB4Ow0KICBwYWRkaW5nOiAyNHB4IDM2cHg7DQogIGJvcmRlci1yYWRpdXM6IDE4cHg7DQogIGJveC1zaGFkb3c6IDEwcHggMTBweCAzMHB4IHJnYmEoMCwgMCwgMCwgMC4xKTsNCn0NCg=="},{"version":3,"sources":["index.vue"],"names":[],"mappings":";AA4wBA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/views/ProblemReport","sourcesContent":["<template>\r\n  <div class=\"main\">\r\n    <fm-nav-bar title=\"问题上报\" left-arrow @click-left=\"$router.go(-1)\" @click-right=\"add\">\r\n      <template #right>\r\n        <i class=\"fm-icon fm-icon-plus\"></i>\r\n      </template>\r\n    </fm-nav-bar>\r\n\r\n    <!-- <div class=\"map-container\" id=\"mapContainer\"></div> -->\r\n    <xa-map :create=\"mapLoaded\"></xa-map>\r\n    <!-- <MapComp\r\n      ref=\"mymap\"\r\n      :create=\"initMap\"\r\n      style=\"position: absolute\"\r\n    ></MapComp> -->\r\n    <problemList :tableList=\"tableList\" @flyTo=\"toTarget\" />\r\n    <!-- 增加按钮 -->\r\n    <!-- <div class=\"bottom\" @click=\"add\">\r\n      <i class=\"fm-icon-plus\"></i>\r\n    </div> -->\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { addIconToMap } from '@/utils/mapUtils'\r\nimport MapComp from '@/components/xa-map/index.vue'\r\nimport problemList from '@/views/ProblemReport/problemList.vue'\r\nimport mapboxgl from 'mapbox-gl'\r\nimport 'mapbox-gl/dist/mapbox-gl.css'\r\nimport mapStyle from './mapStyle'\r\nimport popup from './popup'\r\nconst popupItem = Vue.extend(popup)\r\nconst MapObj = {\r\n  map: null,\r\n  mapInstance: null,\r\n}\r\nimport Vue from 'vue'\r\nimport axios from 'axios'\r\nimport {\r\n  NavBar,\r\n  Search,\r\n  Toast,\r\n  Cell,\r\n  CellGroup,\r\n  PullRefresh,\r\n  List,\r\n  Sidebar,\r\n  SidebarItem,\r\n  SwipeCell,\r\n  Button,\r\n  NoticeBar,\r\n  Icon,\r\n  Dialog,\r\n} from 'fawkes-mobile-lib'\r\n\r\nexport default {\r\n  name: 'Inspection',\r\n  components: {\r\n    MapComp,\r\n    problemList,\r\n    [NavBar.name]: NavBar,\r\n    [Search.name]: Search,\r\n    [Toast.name]: Toast,\r\n    [Cell.name]: Cell,\r\n    [CellGroup.name]: CellGroup,\r\n    [PullRefresh.name]: PullRefresh,\r\n    [List.name]: List,\r\n    [Sidebar.name]: Sidebar,\r\n    [SidebarItem.name]: SidebarItem,\r\n    [SwipeCell.name]: SwipeCell,\r\n    [Button.name]: Button,\r\n    [NoticeBar.name]: NoticeBar,\r\n    [Icon.name]: Icon,\r\n    [Dialog.name]: Dialog,\r\n  },\r\n  data() {\r\n    return {\r\n      lnglat: [],\r\n      chosePoint: false,\r\n      objInfo: {},\r\n      accessToken: this.$storage.get('access_token'),\r\n      header: {},\r\n      formToken: '',\r\n      tableList: [],\r\n      inspBusinessType: '',\r\n      tableData: [],\r\n      icons: [\r\n                {\r\n                    name: '事件点',\r\n                    url: require('@/assets/img/map/dw.png'),\r\n                },\r\n            ],\r\n      timer: null,\r\n    }\r\n  },\r\n  computed: {\r\n    eventTypeListNewFiltered() {\r\n      const { dictionary, eventTypeList, taskDetail } = this\r\n      let temp = eventTypeList.find((item) => {\r\n        return item.label === dictionary[taskDetail.inspBusinessType]\r\n      })\r\n      if (temp) {\r\n        return temp.children\r\n      } else {\r\n        return null\r\n      }\r\n    },\r\n  },\r\n  created() {\r\n    // 获取header，查询工单用\r\n    axios({\r\n      url: process.env.VUE_APP_THIRD_REQUEST_URL + '/main/userCenterApi/sso/tokenByToken',\r\n      method: 'post',\r\n      params: {\r\n        token: this.accessToken,\r\n      },\r\n      headers: {\r\n        Authorization: 'Basic b3V0d29yazp3cGcyMDIw',\r\n      },\r\n    }).then((res) => {\r\n      if (res.status == 200) {\r\n        this.formToken = res.data.resultData.token\r\n        this.header = {\r\n          'Content-Type': 'application/json',\r\n          Authorization: 'Bearer ' + this.formToken,\r\n        }\r\n        console.log(' this.header查询工单用 : ', this.header)\r\n        this.getList1() // 获取工单列表,\r\n      }\r\n    })\r\n  },\r\n  mounted() {\r\n    // this.initMap()\r\n  },\r\n  beforeDestroy() {\r\n    if (this.timer) {\r\n      clearInterval(this.timer)\r\n    }\r\n  },\r\n  methods: {\r\n    // 地图相关\r\n    toTarget(lnglat) {\r\n\r\n      if (lnglat.length == 2) {\r\n        window.xaMap.flyTo({\r\n          center: lnglat,\r\n          zoom: 19,\r\n        })\r\n      } else {\r\n        console.log(\"无位置信息\")\r\n      }\r\n    },\r\n    async mapLoaded() {\r\n      MapObj.map = window.xaMap\r\n      await addIconToMap(MapObj.map, this.icons)\r\n      window.xaMap.on('click', (e) => {\r\n        // 若为functio(e){ this是this.window.xaMap}\r\n        // (e)=>{ this是this}\r\n        console.log('map-click-e', e)\r\n        console.log('e.lngLatn', e.lngLat)\r\n        var bbox = [\r\n          [e.point.x - 1, e.point.y - 1],\r\n          [e.point.x + 1, e.point.y + 1],\r\n        ]\r\n        console.log('bbox:', bbox)\r\n        // mapbox 返回查询要素的图层属性\r\n        let queryfeatures = window.xaMap.queryRenderedFeatures(bbox, {\r\n          layers: [\r\n            'rd_map_drainpipe_ys_big',\r\n            'rd_map_drainpipe_ys_small',\r\n            'rd_map_drainpipe_ws_small',\r\n            'rd_map_drainpipe_ws_big',\r\n            'rd_map_outfall',\r\n            'rd_map_gate',\r\n            'rd_map_manhole',\r\n            'rd_map_comb',\r\n            'map_supply_firehydrant',\r\n            'map_supply_valve',\r\n            'map_supply_pipe_distribute',\r\n            'map_supply_pipe_delivery',\r\n            'map_supply_pipe_circulating',\r\n            'map_supply_node_distribute',\r\n            'map_supply_node_delivery',\r\n            'map_supply_node_circulating',\r\n            'map_recycle_pipe',\r\n            'map_recycle_node',\r\n            'map_waterwork',\r\n          ],\r\n          // layers: layers\r\n        })\r\n        console.log('点选(微矩形)查询到的queryfeatures:', queryfeatures)\r\n        // console.log(\"点选(微矩形)查询的queryfeatures:\", queryfeatures.properties)\r\n        // this.hightLight(queryfeatures)// 高亮表格记录，并高亮地图要素\r\n        this.objInfo = {} //先置空再赋值\r\n        // 点击位置的经纬度\r\n        this.objInfo.lng = e.lngLat.lng\r\n        this.objInfo.lat = e.lngLat.lat\r\n        if (queryfeatures.length > 0) {\r\n          // queryfeatures.forEach(f => {\r\n          let f = queryfeatures[0]\r\n          console.log('ffff: ', f)\r\n          // 点击要素的经纬度，有的话覆盖掉点击位置经纬度\r\n          // this.objInfo.lng = f.properties.longitude || this.objInfo.lng\r\n          // this.objInfo.lat = f.properties.latitude || this.objInfo.lat\r\n          // 要素所在图层ID和属性信息\r\n          this.objInfo.layerID = f.layer.id\r\n          this.objInfo.layerType = f.layer.type\r\n          this.objInfo.properties = f.properties\r\n          // 底图要素name_local或设施要素road_name,id\r\n          this.objInfo.name_local = f.properties.name_local\r\n          this.objInfo.road_name = f.properties.road_name\r\n          this.objInfo.id = f.properties.id\r\n          // 要素对象类型（业务类型/设施类型）\r\n          this.objInfo.bigType = ''\r\n          this.objInfo.smallType = ''\r\n          switch (f.layer.id) {\r\n            // 雨水\r\n            case \"rd_map_comb\"://comb一定是雨水口\r\n              this.objInfo.bigType = '雨水'\r\n              this.objInfo.smallType = '雨水口'\r\n              break\r\n            case \"rd_map_outfall\"://排放口 1-雨水； 2-污水； 3-合流； 4-其他\r\n              this.objInfo.bigType = f.properties.pipe_type\r\n              this.objInfo.smallType = '排放口'\r\n              break\r\n            case \"rd_map_manhole\"://检查井  1-雨水；2-污水\r\n              this.objInfo.bigType = f.properties.manhole_type\r\n              this.objInfo.smallType = f.properties.manhole_type == \"雨水\" ? '雨水检查井' : '污水检查井'\r\n              break\r\n            case \"rd_map_gate\"://闸门 1-雨水； 2-污水； 3-合流； 4-其他\r\n              this.objInfo.bigType = f.properties.pipe_type\r\n              // objInfo.smallType = '闸门'\r\n              this.objInfo.smallType = f.properties.pipe_type == \"雨水\" ? '其他（雨）' : '其他（污）'\r\n              break\r\n            case \"rd_map_drainpipe_ys_big\":\r\n              this.objInfo.bigType = '雨水'\r\n              this.objInfo.smallType = '雨水管渠'\r\n              break\r\n            case \"rd_map_drainpipe_ys_small\":\r\n              this.objInfo.bigType = '雨水'\r\n              this.objInfo.smallType = '雨水管渠'\r\n              break\r\n            // 污水\r\n            case \"rd_map_drainpipe_ws_big\":\r\n              this.objInfo.bigType = '污水'\r\n              this.objInfo.smallType = '污水管道'\r\n              break\r\n            case \"rd_map_drainpipe_ws_small\":\r\n              this.objInfo.bigType = '污水'\r\n              this.objInfo.smallType = '污水管道'\r\n              break\r\n            // 供水\r\n            case \"map_supply_firehydrant\"://消火栓一定是供水\r\n              this.objInfo.bigType = '供水'\r\n              this.objInfo.smallType = '消防栓'\r\n              break\r\n            case \"map_supply_valve\"://阀门valve一定是供水\r\n              this.objInfo.bigType = '供水'\r\n              this.objInfo.smallType = '阀门'\r\n              break\r\n            case \"map_supply_pipe_distribute\"://配水管线\r\n              this.objInfo.bigType = '供水'\r\n              this.objInfo.smallType = '供水管道'\r\n              break\r\n            case \"map_supply_pipe_delivery\"://输水管线\r\n              this.objInfo.bigType = 'supply'\r\n              this.objInfo.smallType = '供水管道'\r\n              break\r\n            case \"map_supply_pipe_circulating\"://回水管线\r\n              this.objInfo.bigType = '供水'\r\n              this.objInfo.smallType = '供水管道'\r\n              break\r\n\r\n            case \"map_supply_node_delivery\":\r\n              this.objInfo.bigType = '供水'\r\n              this.objInfo.smallType = f.properties.appurtenance == \"消防井\" ? \"消防栓\" : f.properties.appurtenance == \"排气阀\" ? \"阀门\" : '其他（供）'\r\n              break\r\n\r\n            case \"map_waterwork\"://供水厂\r\n              this.objInfo.bigType = '供水'\r\n              this.objInfo.smallType = '其他（供）'\r\n              break\r\n            // 再生水\r\n            case \"map_recycle_pipe\"://再生水管线\r\n              this.objInfo.bigType = '再生水'\r\n              this.objInfo.smallType = '再生水管道'\r\n              break\r\n            case \"map_waterwork\"://再生水厂\r\n              this.objInfo.bigType = '再生水'\r\n              this.objInfo.smallType = '其他（再）'\r\n              break\r\n          }\r\n          // 设施编号\r\n          this.objInfo.code = f.properties.start_code && f.properties.end_code ? (f.properties.start_code + ',' + f.properties.end_code) : ''\r\n            || f.properties.manhole_code || f.properties.gate_code || f.properties.outlet_code\r\n            || f.properties.comb_code || f.properties.valve_code || f.properties.pump_station_code\r\n            || f.properties.plant_code || f.properties.pump_code || f.properties.fire_cock_code\r\n            || f.properties.point_code || ''\r\n        }\r\n        console.log('this.objInfo: ', this.objInfo)\r\n        // popup\r\n        if (this.chosePoint) {\r\n          let popupHtml = '<div id=\"base-detail\"></div>'\r\n          new mapboxgl.Popup()\r\n            .setLngLat([e.lngLat.lng, e.lngLat.lat])\r\n            .setHTML(popupHtml)\r\n            .addTo(window.xaMap)\r\n          new popupItem({\r\n            propsData: {\r\n              detailId: 99999,\r\n              lng: e.lngLat.lng.toFixed(3),\r\n              lat: e.lngLat.lat.toFixed(3),\r\n              bigType: this.objInfo.bigType,\r\n              smallType: this.objInfo.smallType,\r\n              deviceCode: this.objInfo.code,\r\n              fun: this.editForm,\r\n            },\r\n          }).$mount('#base-detail')\r\n        }\r\n      })\r\n    },\r\n    initMap() {\r\n      mapboxgl.accessToken =\r\n        'pk.eyJ1IjoiOTM0MDk0Mjg2IiwiYSI6ImNsMnNmdmVrZDBrZGMzZG50cHJudXJkbW8ifQ.C0wKhJgrToFJgL8GH5M8rg'\r\n      window.xaMap = new mapboxgl.Map({\r\n        container: 'mapContainer', // 容器DOM id\r\n        style: mapStyle,\r\n        center: [115.92486101369428, 39.06075549589073],\r\n        zoom: 13,\r\n        minZoom: 10,\r\n        pitch: 0,\r\n      })\r\n      // let needLayers=[]\r\n      // 加图层 http://172.20.79.65/api/swan/mapWorkshopSource/detail?id=1544640278559821826\r\n      axios\r\n        .get('http://172.20.79.65/api/swan/mapWorkshopSource/detail?id=1548573412963749889')\r\n        .then((res) => {\r\n          console.log('res: ', res)\r\n          let layers = JSON.parse(res.data.data.jsonData)\r\n          console.log('layers: ', layers)\r\n          Object.keys(layers.sources).forEach((key) => {\r\n            window.xaMap.addSource(key, layers.sources[key])\r\n          })\r\n          // needLayers=layers.layers\r\n          layers.layers.forEach((layer) => {\r\n            window.xaMap.addLayer(layer)\r\n            window.xaMap.setLayoutProperty(layer.id, 'visibility', 'visible')\r\n          })\r\n        })\r\n        .catch((e) => { })\r\n        .finally(() => { })\r\n      // 监听地图点击\r\n      // window.xaMap.on(\"click\", function(e)  {})\r\n      // window.xaMap.on(\"click\", layer.id,function(e)  {})//才能选到features???,就拿到过一次\r\n\r\n      window.xaMap.on('click', (e) => {\r\n        // 若为functio(e){ this是this.window.xaMap}\r\n        // (e)=>{ this是this}\r\n        console.log('map-click-e', e)\r\n        console.log('e.lngLatn', e.lngLat)\r\n        var bbox = [\r\n          [e.point.x - 1, e.point.y - 1],\r\n          [e.point.x + 1, e.point.y + 1],\r\n        ]\r\n        console.log('bbox:', bbox)\r\n        // mapbox 返回查询要素的图层属性\r\n        let queryfeatures = window.xaMap.queryRenderedFeatures(bbox, {\r\n          layers: [\r\n            'rd_map_drainpipe_ys_big',\r\n            'rd_map_drainpipe_ys_small',\r\n            'rd_map_drainpipe_ws_small',\r\n            'rd_map_drainpipe_ws_big',\r\n            'rd_map_outfall',\r\n            'rd_map_gate',\r\n            'rd_map_manhole',\r\n            'rd_map_comb',\r\n            'map_supply_firehydrant',\r\n            'map_supply_valve',\r\n            'map_supply_pipe_distribute',\r\n            'map_supply_pipe_delivery',\r\n            'map_supply_pipe_circulating',\r\n            'map_supply_node_distribute',\r\n            'map_supply_node_delivery',\r\n            'map_supply_node_circulating',\r\n            'map_recycle_pipe',\r\n            'map_recycle_node',\r\n            'map_waterwork',\r\n          ],\r\n          // layers: layers\r\n        })\r\n        console.log('点选(微矩形)查询到的queryfeatures:', queryfeatures)\r\n        // console.log(\"点选(微矩形)查询的queryfeatures:\", queryfeatures.properties)\r\n        // this.hightLight(queryfeatures)// 高亮表格记录，并高亮地图要素\r\n        this.objInfo = {} //先置空再赋值\r\n        // 点击位置的经纬度\r\n        this.objInfo.lng = e.lngLat.lng\r\n        this.objInfo.lat = e.lngLat.lat\r\n        if (queryfeatures.length > 0) {\r\n          // queryfeatures.forEach(f => {\r\n          let f = queryfeatures[0]\r\n          console.log('ffff: ', f)\r\n          // 点击要素的经纬度，有的话覆盖掉点击位置经纬度\r\n          this.objInfo.lng = f.properties.longitude || this.objInfo.lng\r\n          this.objInfo.lat = f.properties.latitude || this.objInfo.lat\r\n          // 要素所在图层ID和属性信息\r\n          this.objInfo.layerID = f.layer.id\r\n          this.objInfo.layerType = f.layer.type\r\n          this.objInfo.properties = f.properties\r\n          // 底图要素name_local或设施要素road_name,id\r\n          this.objInfo.name_local = f.properties.name_local\r\n          this.objInfo.road_name = f.properties.road_name\r\n          this.objInfo.id = f.properties.id\r\n          // 要素对象类型（业务类型/设施类型）\r\n          switch (f.layer.id) {\r\n            // 雨水\r\n            case 'rd_map_comb': //comb一定是雨水口\r\n              this.objInfo.bigType = '雨水'\r\n              this.objInfo.smallType = '雨水口'\r\n              break\r\n            case 'rd_map_outfall': //排放口 1-雨水； 2-污水； 3-合流； 4-其他\r\n              this.objInfo.bigType = f.properties.pipe_type\r\n              this.objInfo.smallType = '排放口'\r\n              break\r\n            case 'rd_map_manhole': //检查井  1-雨水；2-污水\r\n              this.objInfo.bigType = f.properties.manhole_type\r\n              this.objInfo.smallType = '检查井'\r\n              break\r\n            case 'rd_map_gate': //闸门 1-雨水； 2-污水； 3-合流； 4-其他\r\n              this.objInfo.bigType = f.properties.pipe_type\r\n              this.objInfo.smallType = '闸门'\r\n              break\r\n            case 'rd_map_drainpipe_ys_big':\r\n              this.objInfo.bigType = '雨水'\r\n              this.objInfo.smallType = '雨水管线'\r\n              break\r\n            case 'rd_map_drainpipe_ys_small':\r\n              this.objInfo.bigType = '雨水'\r\n              this.objInfo.smallType = '雨水管线'\r\n              break\r\n            // 污水\r\n            case 'rd_map_drainpipe_ws_big':\r\n              this.objInfo.bigType = '污水'\r\n              this.objInfo.smallType = '污水管线'\r\n              break\r\n            case 'rd_map_drainpipe_ws_small':\r\n              this.objInfo.bigType = '污水'\r\n              this.objInfo.smallType = '污水管线'\r\n              break\r\n            // 给水\r\n            case 'map_supply_firehydrant': //消火栓一定是给水\r\n              this.objInfo.bigType = '给水'\r\n              this.objInfo.smallType = '消火栓'\r\n              break\r\n            case 'map_supply_valve': //阀门valve一定是给水\r\n              this.objInfo.bigType = '给水'\r\n              this.objInfo.smallType = '阀门'\r\n              break\r\n            case 'map_supply_pipe_distribute': //配水管线\r\n              this.objInfo.bigType = '给水'\r\n              this.objInfo.smallType = '配水管线'\r\n              break\r\n            case 'map_supply_pipe_delivery': //输水管线\r\n              this.objInfo.bigType = 'supply'\r\n              this.objInfo.smallType = '输水管线'\r\n              break\r\n            case 'map_supply_pipe_circulating': //回水管线\r\n              this.objInfo.bigType = '给水'\r\n              this.objInfo.smallType = '回水管线'\r\n              break\r\n            case 'map_waterwork': //供水厂\r\n              this.objInfo.bigType = '给水'\r\n              this.objInfo.smallType = '供水厂'\r\n              break\r\n            // 再生水\r\n            case 'map_recycle_pipe': //再生水管线\r\n              this.objInfo.bigType = '再生水'\r\n              this.objInfo.smallType = 'pipeline'\r\n              break\r\n            case 'map_waterwork': //再生水厂\r\n              this.objInfo.bigType = '再生水'\r\n              this.objInfo.smallType = '再生水厂'\r\n              break\r\n          }\r\n          // 设施编号\r\n          this.objInfo.code =\r\n            f.properties.manhole_code ||\r\n            f.properties.gate_code ||\r\n            f.properties.outlet_code ||\r\n            f.properties.comb_code ||\r\n            f.properties.valve_code ||\r\n            f.properties.pump_station_code ||\r\n            f.properties.plant_code ||\r\n            f.properties.pump_code ||\r\n            f.properties.fire_cock_code ||\r\n            f.properties.start_code + ',' + f.properties.end_code ||\r\n            ''\r\n          // })\r\n        }\r\n        console.log('this.objInfo: ', this.objInfo)\r\n        // popup\r\n        if (this.chosePoint) {\r\n          let popupHtml = '<div id=\"base-detail\"></div>'\r\n          new mapboxgl.Popup()\r\n            .setLngLat([e.lngLat.lng, e.lngLat.lat])\r\n            .setHTML(popupHtml)\r\n            .addTo(window.xaMap)\r\n          new popupItem({\r\n            propsData: {\r\n              detailId: 99999,\r\n              lng: e.lngLat.lng.toFixed(3),\r\n              lat: e.lngLat.lat.toFixed(3),\r\n              bigType: this.objInfo.bigType,\r\n              smallType: this.objInfo.smallType,\r\n              deviceCode: this.objInfo.code,\r\n              fun: this.editForm,\r\n            },\r\n          }).$mount('#base-detail')\r\n        }\r\n      })\r\n      // window.xaMap.on('click',e=>{})结束\r\n    },\r\n    editForm() {\r\n      this.$router.push({\r\n        name: 'addProblemIndex',\r\n        query: { msg: this.objInfo, token: this.formToken },\r\n        params: { type: 'add' },\r\n      })\r\n    },\r\n    async getList1() {\r\n      let params = {\r\n        sysCode: 'outwork',\r\n        smallType: 'abnormal_inform',\r\n        // token: this.accessToken,\r\n        \"page\": {\r\n          \"current\": 1,\r\n          \"size\": -1,//-1查全部\r\n        }\r\n      }\r\n      axios({\r\n        url: process.env.VUE_APP_THIRD_REQUEST_URL + '/main/outworkapi/ticketStatisticClient/getTicketList',\r\n        method: 'post',\r\n        data: params,\r\n        headers: this.header,\r\n      }).then((res) => {\r\n        console.log('getTableData-res: ', res)\r\n        if (res.status == 200) {\r\n          console.log(res.data.resultData.records, '========================')\r\n          this.tableData = res.data.resultData.records\r\n          this.getGeoJson()\r\n          res.data.resultData.records.forEach((item) => {\r\n            this.tableList.push({\r\n              faultTypes: item.formValue.faultTypes,\r\n              ticketStatusName: item.ticketStatusName,\r\n              questionDescribe: item.formValue.questionDescribe,\r\n              createByName: item.createByName,\r\n              createTime: item.createTime.substring(0, 10),\r\n              defectFrom: item.formValue.defectFrom,\r\n              id: item.id,\r\n              lnglat: [item.appealLng, item.appealLat],\r\n            })\r\n          })\r\n          // this.$emit(this.tableList,'tableList')\r\n        }\r\n      })\r\n    },\r\n    // 将事件列表添加至地图\r\n    getGeoJson() {\r\n      let features = []\r\n      let withoutPositionCount = 0\r\n      console.log('要聚合展示的tableData', this.tableData)\r\n      if (this.tableData.length == 0) {\r\n        this.removeSomeLayer()\r\n        return\r\n      }\r\n      this.tableData.forEach((item) => {\r\n        let feature = {}\r\n        let properties = {}\r\n        let geometry = {}\r\n\r\n        properties = item\r\n        properties.defectFrom = item.formValue.defectFrom\r\n        feature.properties = properties\r\n        feature.type = 'Feature'\r\n        geometry.type = 'Point'\r\n        if (item.appealLat && item.appealLng) {\r\n          // geometry.coordinates = [item.appealLat, item.appealLon]\r\n          geometry.coordinates = [item.appealLng, item.appealLat] // wgs84\r\n          feature.geometry = geometry\r\n          features.push(feature)\r\n        } else if (\r\n          item.formValue.deviceDetail?.latitude &&\r\n          item.formValue.deviceDetail?.longitude\r\n        ) {\r\n          geometry.coordinates = [\r\n            item.formValue.deviceDetail.longitude,\r\n            item.formValue.deviceDetail.latitude,\r\n          ]\r\n          feature.geometry = geometry\r\n          features.push(feature)\r\n        } else if (\r\n          item.formValue.ticketAddress?.longitude &&\r\n          item.formValue.ticketAddress?.latitude\r\n        ) {\r\n          geometry.coordinates = [\r\n            item.formValue.ticketAddress.longitude,\r\n            item.formValue.ticketAddress.latitude,\r\n          ]\r\n          feature.geometry = geometry\r\n          features.push(feature)\r\n        } else {\r\n          // geometry.coordinates = [39.06683064435245, 115.9453947097063]\r\n          withoutPositionCount += 1\r\n        }\r\n      })\r\n      console.log('无坐标个数', withoutPositionCount)\r\n      // 聚合数据 构造头部\r\n      let geoJson = {\r\n        type: 'FeatureCollection',\r\n        crs: { type: 'name', properties: { name: 'urn:ogc:def:crs:OGC:1.3:CRS84' } },\r\n        features: [],\r\n      }\r\n      geoJson.features = features\r\n      console.log('聚合的geoJson', geoJson)\r\n      this.timer = setInterval(() => {\r\n        if (MapObj.map) {\r\n          clearInterval(this.timer)\r\n          this.renderCluster(geoJson)\r\n        }\r\n      }, 100)\r\n    },\r\n    removeSomeLayer() {\r\n      ['clusters', 'cluster-count', 'unclustered-point'].forEach((item) => {\r\n        if (MapObj.map?.getLayer(item)) {\r\n          MapObj.map.removeLayer(item)\r\n        }\r\n      })\r\n      if (MapObj.map?.getSource('earthquakes')) {\r\n        MapObj.map.removeSource('earthquakes')\r\n      }\r\n    },\r\n    // 渲染\r\n    renderCluster(geoJsonSource) {\r\n      this.removeSomeLayer()\r\n      MapObj.map.addSource('earthquakes', {\r\n        type: 'geojson',\r\n        data: geoJsonSource,\r\n        cluster: true,\r\n        clusterMaxZoom: 14, // Max zoom to cluster points on\r\n        clusterRadius: 50, // Radius of each cluster when clustering points (defaults to 50)\r\n      })\r\n\r\n      MapObj.map.addLayer({\r\n        id: 'clusters',\r\n        type: 'circle',\r\n        source: 'earthquakes',\r\n        filter: ['has', 'point_count'],\r\n        paint: {\r\n          'circle-color': ['step', ['get', 'point_count'], \"rgba(0, 209, 134, 0.8)\", 5, \"rgba(255, 148, 41, 0.8)\", 15, \"rgba(255, 74, 65, 0.8)\"],\r\n          'circle-radius': ['step', ['get', 'point_count'], 20, 5, 25, 15, 30],\r\n          // 这个是外边框的颜色 circle-stroke-color这个对应了上面circle-color\r\n          \"circle-stroke-color\": [\r\n            \"step\",\r\n            [\"get\", \"point_count\"],\r\n            \"rgba(0, 209, 134, 0.3)\",\r\n            5,\r\n            \"rgba(255, 148, 41, 0.3)\",\r\n            15,\r\n            \"rgba(255, 74, 65, 0.3)\"\r\n          ],\r\n          // 这个是外边框晕染的范围\r\n          \"circle-stroke-width\": [\r\n            \"step\",\r\n            [\"get\", \"point_count\"],\r\n            8, //蓝色晕染长度，当点数小于100时为5px晕染\r\n            5, //对应上面circle-color 数字，意思为100以内\r\n            12, //点计数在100到750之间时为黄色，6px晕染\r\n            15, //对应上面circle-color 数字，意思为750以内\r\n            15 //点计数大于或等于750时为7px像素的粉红色晕染\r\n          ]\r\n        },\r\n      })\r\n\r\n      MapObj.map.addLayer({\r\n        id: 'cluster-count',\r\n        type: 'symbol',\r\n        source: 'earthquakes',\r\n        filter: ['has', 'point_count'],\r\n        layout: {\r\n          'text-field': '{point_count_abbreviated}',\r\n          // 'text-font': ['DIN Offc Pro Medium', 'Arial Unicode MS Bold'],\r\n          'text-size': 12,\r\n        },\r\n      })\r\n\r\n      MapObj.map.addLayer({\r\n        id: 'unclustered-point',\r\n        source: 'earthquakes',\r\n        filter: ['!', ['has', 'point_count']],\r\n        type: 'symbol',\r\n        layout: {\r\n          'icon-image': '事件点', // 点的图标\r\n          visibility: 'visible',\r\n          'icon-size': 0.7,\r\n        },\r\n      })\r\n\r\n      MapObj.map.on('click', 'unclustered-point', (e) => {\r\n        // 如果当前事件点所有popup为打开状态，即事件点popup数组长度不为0，退出该次点击事件\r\n        // if (MapObj.eventPopupArray.length > 0) return\r\n        // 每次点击新的事件点就清除预案数据\r\n        // this.fileList = []\r\n        console.log('e.features: ', e.features)\r\n        // console.log('formValue: ', JSON.parse(e.features[0].properties.formValue))\r\n        MapObj.map.getCanvas().style.cursor = 'pointer'\r\n\r\n        let formValue = JSON.parse(e.features[0].properties.formValue)\r\n        console.log('formValue: ', formValue)\r\n\r\n        var coordinates = e.features[0].geometry.coordinates.slice()\r\n        while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {\r\n          coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360\r\n        }\r\n        // Create a popup, but don't add it to the map yet.\r\n        // this.popup1 = new mapboxgl.Popup({\r\n        //   closeOnClick: true,\r\n        //   closeButton: false,\r\n        //   anchor: 'bottom',\r\n        //   offset: { bottom: [0, -15] },\r\n        // })\r\n        // let text = formValue.detail ? formValue.detail.defectType : '其他'\r\n        // console.log('text: ', text);\r\n        // this.popup1\r\n        //   .setLngLat(coordinates)\r\n        //   .setHTML('<div id=\"vue-popup-custom\" class=\"vue-popup-custom\"><h3>'\r\n        //     + text\r\n        //     + '</h3></div>')\r\n        //   .addTo(MapObj.map)\r\n      })\r\n\r\n      // inspect a cluster on click\r\n      MapObj.map.on('click', 'clusters', function (e) {\r\n        var features = MapObj.map.queryRenderedFeatures(e.point, { layers: ['clusters'] })\r\n        var clusterId = features[0].properties.cluster_id\r\n        MapObj.map\r\n          .getSource('earthquakes')\r\n          .getClusterExpansionZoom(clusterId, function (err, zoom) {\r\n            if (err) return\r\n            MapObj.map.easeTo({\r\n              center: features[0].geometry.coordinates,\r\n              zoom: zoom,\r\n            })\r\n          })\r\n      })\r\n      MapObj.map.setMinZoom(0)\r\n      MapObj.map.setMaxZoom(30)\r\n    },\r\n    add() {\r\n      this.objInfo = {}\r\n      Toast({\r\n        message: '地图点选',\r\n        position: 'top',\r\n      })\r\n      this.chosePoint = true\r\n    },\r\n  },\r\n}\r\n</script>\r\n<style lang=\"less\">\r\n#base-detail {\r\n  width: auto;\r\n  height: auto;\r\n  padding-left: 20px;\r\n  padding-right: 20px;\r\n  padding-top: 10px;\r\n  padding-bottom: 10px;\r\n  border-radius: 20px;\r\n  border: 1px saddlebrown solid;\r\n}\r\n</style>\r\n<style lang=\"less\" scoped>\r\n.main {\r\n  background-color: #f2f3f4 !important;\r\n  height: 1334px;\r\n  width: 750px;\r\n\r\n  .map-container {\r\n    height: 680px;\r\n    width: 750px;\r\n  }\r\n}\r\n\r\n/deep/.mapboxgl-popup-content {\r\n  width: auto;\r\n  min-width: 280px;\r\n  height: 50px;\r\n  padding: 24px 36px;\r\n  border-radius: 18px;\r\n  box-shadow: 10px 10px 30px rgba(0, 0, 0, 0.1);\r\n}\r\n</style>\r\n"]}]}