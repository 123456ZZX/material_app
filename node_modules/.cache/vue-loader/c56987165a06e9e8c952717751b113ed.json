{"remainingRequest":"D:\\Code\\Project\\WL\\xasw-mobile\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Code\\Project\\WL\\xasw-mobile\\src\\views\\DispatchCenter\\index.vue?vue&type=style&index=0&id=f4c64328&scoped=true&lang=less","dependencies":[{"path":"D:\\Code\\Project\\WL\\xasw-mobile\\src\\views\\DispatchCenter\\index.vue","mtime":1708928163372},{"path":"D:\\Code\\Project\\WL\\xasw-mobile\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Code\\Project\\WL\\xasw-mobile\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"D:\\Code\\Project\\WL\\xasw-mobile\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"D:\\Code\\Project\\WL\\xasw-mobile\\node_modules\\less-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Code\\Project\\WL\\xasw-mobile\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Code\\Project\\WL\\xasw-mobile\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQo6Oi13ZWJraXQtc2Nyb2xsYmFyIHsNCiAgZGlzcGxheTogbm9uZTsNCiAgLyogQ2hyb21lIFNhZmFyaSAqLw0KfQ0KDQovLyBsb2FkaW5n5Yqg6L2954q25oCBDQovZGVlcC8uZm0tbG9hZGluZyB7DQogIG1hcmdpbi10b3A6IDE1MHB4Ow0KICBkaXNwbGF5OiBmbGV4Ow0KICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsNCiAgYWxpZ24taXRlbXM6IGNlbnRlcjsNCn0NCg0KL2RlZXAvLm1hcGJveGdsLXBvcHVwLWNvbnRlbnQgew0KICBkaXNwbGF5OiBmbGV4Ow0KICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsNCiAgYm94LXNoYWRvdzogMCAwIHRyYW5zcGFyZW50Ow0KICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDsNCiAgcGFkZGluZzogMDsNCg0KICBoZWlnaHQ6IDE4NnB4Ow0KfQ0KDQovLyDljrvpmaRtYXBib3jlvLnnqpfkuIvnmoTkuInop5LlvaINCi9kZWVwLy5tYXBib3hnbC1wb3B1cC10aXAgew0KICBkaXNwbGF5OiBub25lOw0KfQ0KDQovLyDmn6XnnIvpooTmoYjlvIDlp4stLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQovZGVlcC8uZm0tcG9wdXAtLWJvdHRvbSB7DQogIGJvdHRvbTogMDsNCiAgbGVmdDogMDsNCiAgd2lkdGg6IDEwMCU7DQogIGhlaWdodDogNDAlOw0KICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmZmZmOw0KfQ0KDQovZGVlcC8uZm0tYWN0aW9uLXNoZWV0X19jbG9zZSB7DQogIGRpc3BsYXk6IG5vbmU7DQp9DQoNCi5wbGFuQ29udGVudCB7DQogIGRpc3BsYXk6IGZsZXg7DQogIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47DQogIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDsNCiAgYWxpZ24taXRlbXM6IGNlbnRlcjsNCiAgaGVpZ2h0OiA5NyU7DQogIG92ZXJmbG93LXk6IHNjcm9sbDsNCiAgcGFkZGluZzogMTZweCAxNnB4IDA7IC8vIOmAguW6lOWNoeeJh21hcmdpbi1ib3R0b23luIPlsYANCiAgYmFja2dyb3VuZC1jb2xvcjogI2Y1ZjdmOTsNCg0KICAubGl0dGxlUGxhbiB7DQogICAgd2lkdGg6IDY5MHB4Ow0KICAgIGhlaWdodDogMzA0cHg7DQogICAgbWluLWhlaWdodDogMzQwcHg7DQogICAgYmFja2dyb3VuZDogI2ZmZmZmZjsNCiAgICBib3JkZXItcmFkaXVzOiAxNnB4Ow0KICAgIG1hcmdpbi1ib3R0b206IDE2cHg7DQoNCiAgICAudG9wU2lkZSB7DQogICAgICBwb3NpdGlvbjogcmVsYXRpdmU7DQogICAgICBkaXNwbGF5OiBmbGV4Ow0KICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjsNCiAgICAgIC8vIHBhZGRpbmctbGVmdDogMzBweDsNCiAgICAgIHdpZHRoOiAxMDAlOw0KICAgICAgaGVpZ2h0OiAyMCU7DQogICAgICBmb250LXNpemU6IDM2cHg7DQogICAgICBmb250LWZhbWlseTogUGluZ0ZhbmdTQy1TZW1pYm9sZCwgUGluZ0ZhbmcgU0M7DQogICAgICBmb250LXdlaWdodDogNjAwOw0KICAgICAgY29sb3I6ICMxOTE5MTk7DQogICAgICAvLyBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoODMsIDI1NSwgMTAzKTsNCg0KICAgICAgLmltZ1Bvc2l0aW9uIHsNCiAgICAgICAgcG9zaXRpb246IGFic29sdXRlOw0KICAgICAgICB3aWR0aDogNnB4Ow0KICAgICAgICB0b3A6IDE0cHg7DQogICAgICAgIGxlZnQ6IDA7DQogICAgICB9DQoNCiAgICAgIHNwYW4gew0KICAgICAgICBwYWRkaW5nLWxlZnQ6IDMwcHg7DQogICAgICAgIHdpZHRoOiAxMDAlOw0KICAgICAgICB3aGl0ZS1zcGFjZTogbm93cmFwOw0KICAgICAgICBvdmVyZmxvdzogaGlkZGVuOw0KICAgICAgICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpczsNCiAgICAgIH0NCiAgICB9DQoNCiAgICAuY2VudGVyU2lkZSB7DQogICAgICBkaXNwbGF5OiBmbGV4Ow0KICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjsNCiAgICAgIC8vIHBhZGRpbmctbGVmdDogMzBweDsNCiAgICAgIHdpZHRoOiAxMDAlOw0KICAgICAgaGVpZ2h0OiAyNSU7DQogICAgICBmb250LXNpemU6IDMycHg7DQogICAgICBmb250LWZhbWlseTogUGluZ0ZhbmdTQy1SZWd1bGFyLCBQaW5nRmFuZyBTQzsNCiAgICAgIGZvbnQtd2VpZ2h0OiA0MDA7DQogICAgICBjb2xvcjogIzMzMzMzMzsNCiAgICAgIC8vIGJhY2tncm91bmQtY29sb3I6IHJnYigyNTUsIDgzLCAxODYpOw0KDQogICAgICBzcGFuIHsNCiAgICAgICAgcGFkZGluZy1sZWZ0OiAzMHB4Ow0KICAgICAgICB3aWR0aDogMTAwJTsNCiAgICAgICAgd2hpdGUtc3BhY2U6IG5vd3JhcDsNCiAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjsNCiAgICAgICAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7DQogICAgICB9DQogICAgfQ0KDQogICAgLmJvdHRvbVNpZGUgew0KICAgICAgZGlzcGxheTogZmxleDsNCiAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7DQogICAgICAvLyBwYWRkaW5nLWxlZnQ6IDMwcHg7DQogICAgICB3aWR0aDogMTAwJTsNCiAgICAgIGhlaWdodDogNTUlOw0KICAgICAgLy8gYmFja2dyb3VuZC1jb2xvcjogcmdiKDQ4LCAyMzAsIDIwOCk7DQoNCiAgICAgIC5pbm5lckRpdiB7DQogICAgICAgIGRpc3BsYXk6IGZsZXg7DQogICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7DQogICAgICAgIG1hcmdpbjogMCAzMHB4Ow0KICAgICAgICB3aWR0aDogY2FsYygxMDAlIC0gNjBweCk7DQogICAgICAgIGhlaWdodDogMTAwJTsNCiAgICAgICAgd2hpdGUtc3BhY2U6IG5vd3JhcDsNCiAgICAgICAgb3ZlcmZsb3cteDogb3ZlcmxheTsNCg0KICAgICAgICAvLyBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMjM4LCA5NywgOTcpOw0KICAgICAgICAuZmlsZUNhcmQgew0KICAgICAgICAgIHdpZHRoOiAxMjBweDsNCiAgICAgICAgICBoZWlnaHQ6IDE4MHB4Ow0KICAgICAgICAgIC8vIGJhY2tncm91bmQtY29sb3I6IHJnYig1MywgMTY1LCA0Myk7DQogICAgICAgICAgZGlzcGxheTogZmxleDsNCiAgICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uOw0KICAgICAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYXJvdW5kOw0KICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7DQogICAgICAgICAgZm9udC1zaXplOiAyNnB4Ow0KICAgICAgICAgIGZvbnQtZmFtaWx5OiBQaW5nRmFuZ1NDLVJlZ3VsYXIsIFBpbmdGYW5nIFNDOw0KICAgICAgICAgIGZvbnQtd2VpZ2h0OiA0MDA7DQogICAgICAgICAgY29sb3I6ICMzMzMzMzM7DQogICAgICAgICAgYm9yZGVyLXJhZGl1czogMTJweDsNCg0KICAgICAgICAgIGltZyB7DQogICAgICAgICAgICB3aWR0aDogMTIwcHg7DQogICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICB9DQogICAgfQ0KICB9DQp9DQoNCi8vIOafpeeci+mihOahiOe7k+adny0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCi5EaXNwYXRjaENlbnRlciB7DQogIHdpZHRoOiAxMDAlOw0KICBoZWlnaHQ6IDEwMCU7DQoNCiAgL2RlZXAvIC5mbS1oYWlybGluZS0tYm90dG9tOjphZnRlciB7DQogICAgZGlzcGxheTogbm9uZTsNCiAgfQ0KDQogIC8vIGJhY2tncm91bmQtY29sb3I6IHJnYigyNTUsIDE1MCwgMTUwKTsNCiAgLnRvcCB7DQogICAgd2lkdGg6IDEwMCU7DQogICAgaGVpZ2h0OiA3MHB4Ow0KICAgIHBhZGRpbmc6IDEycHggMDsNCiAgICBwb3NpdGlvbjogcmVsYXRpdmU7DQogICAgZGlzcGxheTogZmxleDsNCiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsNCiAgICBhbGlnbi1pdGVtczogY2VudGVyOw0KDQogICAgLnRvcC10aXRsZSB7DQogICAgICB3aWR0aDogNDAwcHg7DQogICAgICBoZWlnaHQ6IDY0cHg7DQogICAgICBiYWNrZ3JvdW5kOiAjZjVmNWY1Ow0KICAgICAgYm9yZGVyLXJhZGl1czogMzZweDsNCiAgICAgIGRpc3BsYXk6IGZsZXg7DQogICAgICBhbGlnbi1pdGVtczogY2VudGVyOw0KICAgICAgcGFkZGluZzogNHB4Ow0KDQogICAgICBzcGFuIHsNCiAgICAgICAgd2lkdGg6IDUwJTsNCiAgICAgICAgaGVpZ2h0OiAxMDAlOw0KICAgICAgICBmb250LXNpemU6IDI4cHg7DQogICAgICAgIGZvbnQtZmFtaWx5OiBQaW5nRmFuZ1NDLVJlZ3VsYXIsIFBpbmdGYW5nIFNDOw0KICAgICAgICBmb250LXdlaWdodDogNDAwOw0KICAgICAgICBjb2xvcjogIzU1NTU1NTsNCiAgICAgICAgbGluZS1oZWlnaHQ6IDQwcHg7DQogICAgICAgIGJvcmRlci1yYWRpdXM6IDM2cHg7DQogICAgICAgIGRpc3BsYXk6IGZsZXg7DQogICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7DQogICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyOw0KICAgICAgfQ0KDQogICAgICAuYWN0aXZlIHsNCiAgICAgICAgYmFja2dyb3VuZDogIzFiNjdkODsNCiAgICAgICAgYm94LXNoYWRvdzogMHB4IDhweCAxNnB4IDBweCByZ2JhKDEwNCwgMTE1LCAxMjcsIDAuMDYpOw0KICAgICAgICBmb250LXdlaWdodDogNTAwOw0KICAgICAgICBjb2xvcjogI2ZmZmZmZjsNCiAgICAgIH0NCiAgICB9DQogIH0NCg0KICAuc2Nyb2xsIHsNCiAgICBkaXNwbGF5OiBmbGV4Ow0KICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47DQogICAgd2lkdGg6IDEwMCU7DQogICAgaGVpZ2h0OiA4OHB4Ow0KICAgIG92ZXJmbG93LXg6IHZpc2libGU7DQoNCiAgICAuc2Nyb2xsQmFyIHsNCiAgICAgIGRpc3BsYXk6IGZsZXg7DQogICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQ7DQogICAgICB3aWR0aDogMTAwJTsNCiAgICAgIGhlaWdodDogODhweDsNCiAgICAgIG92ZXJmbG93LXg6IG92ZXJsYXk7DQogICAgICBib3gtc2hhZG93OiAwcHggMnB4IDIwcHggMHB4IHJnYmEoMTA0LCAxMTUsIDEyNywgMC4wNyk7DQogICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMjU1LCAyNTUsIDI1NSk7DQogICAgICBkaXNwbGF5OiBmbGV4Ow0KICAgICAgZmxleC1kaXJlY3Rpb246IHJvdzsNCg0KICAgICAgLml0ZW1DYXJkIHsNCiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlOw0KICAgICAgICB3aWR0aDogMTUwcHg7DQogICAgICAgIG1pbi13aWR0aDogMTUwcHg7DQogICAgICAgIGhlaWdodDogMTAwJTsNCiAgICAgICAgZGlzcGxheTogZmxleDsNCiAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7DQogICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7DQoNCiAgICAgICAgLy8gYmFja2dyb3VuZC1jb2xvcjogcmdiKDEzNiwgMjM2LCAxNDEpOw0KICAgICAgICBpbWcgew0KICAgICAgICAgIHdpZHRoOiAzMnB4Ow0KICAgICAgICB9DQoNCiAgICAgICAgLmxpdHRsZVRleHQgew0KICAgICAgICAgIHBhZGRpbmctbGVmdDogOHB4Ow0KICAgICAgICAgIGZvbnQtc2l6ZTogMjhweDsNCiAgICAgICAgICBmb250LWZhbWlseTogUGluZ0ZhbmdTQy1SZWd1bGFyLCBQaW5nRmFuZyBTQzsNCiAgICAgICAgICBmb250LXdlaWdodDogNDAwOw0KICAgICAgICAgIGNvbG9yOiAjNTU1NTU1Ow0KICAgICAgICB9DQoNCiAgICAgICAgLnJlZFBvaW50IHsNCiAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7DQogICAgICAgICAgdG9wOiA2cHg7DQogICAgICAgICAgcmlnaHQ6IDZweDsNCiAgICAgICAgICB3aWR0aDogMTJweDsNCiAgICAgICAgICBoZWlnaHQ6IDEycHg7DQogICAgICAgICAgYmFja2dyb3VuZDogI2ZmNGI0YjsNCiAgICAgICAgICBib3JkZXItcmFkaXVzOiAxNnB4Ow0KICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkICNmN2Y3Zjc7DQogICAgICAgIH0NCiAgICAgIH0NCiAgICB9DQogIH0NCg0KICAubWFwQ29udGFpbmVyIHsNCiAgICBoZWlnaHQ6IGNhbGMoMTAwJSAtIDI5NXB4KTsNCiAgICB3aWR0aDogMTAwJTsNCiAgICAvLyBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoOTcsIDQwLCAyNTUpOw0KICB9DQoNCiAgL2RlZXAvLmZtLXNlYXJjaCB7DQogICAgd2lkdGg6IDEwMCU7DQogICAgcGFkZGluZzogMjBweCAzNnB4Ow0KICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmZmZmY7DQogIH0NCg0KICAvZGVlcC8uZm0tc2VhcmNoX19jb250ZW50IHsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjdmNmY5Ow0KICAgIGJveC1zaGFkb3c6IDAgMC4xMDY2N3JlbSAwLjI2NjY3cmVtIDAgcmdiKDEwNCAxMTUgMTI3IC8gMjAlKTsNCiAgICBib3JkZXItcmFkaXVzOiAwLjIxMzMzcmVtOw0KICAgIGhlaWdodDogNzJweDsNCiAgfQ0KfQ0K"},{"version":3,"sources":["index.vue"],"names":[],"mappings":";AA22CA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/views/DispatchCenter","sourcesContent":["<template>\r\n  <div class=\"DispatchCenter\">\r\n    <!-- <fm-nav-bar title=\"调度中心\" left-arrow @click-left=\"$router.go(-1)\"></fm-nav-bar> -->\r\n    <fm-nav-bar left-arrow @click-left=\"$router.go(-1)\">\r\n      <template #title>\r\n        <div class=\"top\">\r\n          <div class=\"top-title\">\r\n            <span :class=\"selectedTab == '调度中心' ? 'active' : ''\" @click=\"changeType('调度中心')\"\r\n              >调度中心</span\r\n            >\r\n            <span :class=\"selectedTab == '调度地图' ? 'active' : ''\" @click=\"changeType('调度地图')\"\r\n              >调度地图</span\r\n            >\r\n          </div>\r\n        </div>\r\n      </template>\r\n      <template #right>\r\n        <template v-if=\"selectedTab == '调度中心'\">\r\n          <i class=\"fm-icon fm-icon-plus\" @click=\"addInstructions\"></i>\r\n        </template>\r\n        <img\r\n          v-if=\"selectedTab == '调度地图'\"\r\n          @click=\"showMapLegend\"\r\n          style=\"height: 24px; position: absolute; right: 20px\"\r\n          :src=\"require('@/assets/img/map/right.png')\"\r\n        />\r\n      </template>\r\n    </fm-nav-bar>\r\n    <fm-search v-model=\"imputValue\" placeholder=\"搜索\" />\r\n    <!-- scrollBar -->\r\n    <div class=\"scroll\">\r\n      <div class=\"scrollBar\">\r\n        <div class=\"itemCard\" @click=\"goToDetail('指令')\">\r\n          <img src=\"@assets/img/dispatchCenter/指令.png\" alt=\"\" />\r\n          <span class=\"littleText\">指令</span>\r\n          <!-- <div class=\"redPoint\"></div> -->\r\n        </div>\r\n        <!-- <div class=\"itemCard\" @click=\"goToDetail('报警')\">\r\n          <img src=\"@assets/img/dispatchCenter/报警.png\" alt=\"\" />\r\n          <span class=\"littleText\">报警</span>\r\n          <div class=\"redPoint\"></div>\r\n        </div> -->\r\n        <div class=\"itemCard\" @click=\"goToDetail('事件')\">\r\n          <img src=\"@assets/img/dispatchCenter/事件.png\" alt=\"\" />\r\n          <span class=\"littleText\">事件</span>\r\n          <!-- <div class=\"redPoint\"></div> -->\r\n        </div>\r\n        <div class=\"itemCard\" @click=\"goToDetail('排班')\">\r\n          <img src=\"@assets/img/dispatchCenter/排班.png\" alt=\"\" />\r\n          <span class=\"littleText\">排班</span>\r\n          <!-- <div class=\"redPoint\"></div> -->\r\n        </div>\r\n        <div class=\"itemCard\" @click=\"goToDetail('日志')\">\r\n          <img src=\"@assets/img/dispatchCenter/日志.png\" alt=\"\" />\r\n          <span class=\"littleText\">日志</span>\r\n          <!-- <div class=\"redPoint\"></div> -->\r\n        </div>\r\n        <div class=\"itemCard\" @click=\"goToDetail('压力')\">\r\n          <img src=\"@assets/img/dispatchCenter/压力.png\" alt=\"\" />\r\n          <span class=\"littleText\">压力</span>\r\n          <!-- <div class=\"redPoint\"></div> -->\r\n        </div>\r\n      </div>\r\n      <on-duty v-if=\"showDuty\" />\r\n    </div>\r\n    <!-- 调度中心页面 -->\r\n    <DispatchCenterPage v-show=\"selectedTab == '调度中心'\"></DispatchCenterPage>\r\n    <!-- 地图 -->\r\n    <div class=\"mapContainer\" v-if=\"selectedTab == '调度地图'\">\r\n      <xa-map :create=\"initScene\"></xa-map>\r\n    </div>\r\n    <MapLegend\r\n      ref=\"mapLegendRef\"\r\n      :popupShow=\"popupShow\"\r\n      shape=\"rectangle\"\r\n      :data-source=\"legendList\"\r\n      :click-func=\"legendClick\"\r\n      @closePop=\"closePop\"\r\n      @legendTitleNameClick=\"legendTitleNameClick\"\r\n      @eventPopupClick=\"eventPopupClick\"\r\n      @monitorPopupClick=\"monitorPopupClick\"\r\n    ></MapLegend>\r\n    <PressureMonitorDetail\r\n      v-if=\"pressureMonitorShow && selectedTab == '调度地图'\"\r\n      :pressureDataDetail=\"pressureDataDetail\"\r\n      @closePopup_pressure=\"closePopup_pressure\"\r\n    >\r\n    </PressureMonitorDetail>\r\n\r\n    <!-- 查看预案 -->\r\n    <fm-action-sheet :visible.sync=\"prePlanShow\" title=\"查看预案\" :round=\"false\">\r\n      <fm-loading size=\"48px\" v-if=\"loadingIsShow == true\"> </fm-loading>\r\n      <div v-show=\"loadingIsShow == false\" class=\"planContent\">\r\n        <div class=\"littlePlan\" v-for=\"(item, index) in fileList\" :key=\"index\">\r\n          <div class=\"topSide\">\r\n            <img class=\"imgPosition\" src=\"@/assets/img/dispatchCenter/矩形.png\" alt=\"\" />\r\n            <!-- 方案标题 -->\r\n            <span>{{ item.projectTitle }}</span>\r\n          </div>\r\n          <div class=\"centerSide\">\r\n            <!-- 方案内容 -->\r\n            <span>{{ item.planContent }}</span>\r\n          </div>\r\n          <div class=\"bottomSide\">\r\n            <div class=\"innerDiv\">\r\n              <div\r\n                class=\"fileCard\"\r\n                v-for=\"(item7, index) in item.fileList\"\r\n                :key=\"index * 1000\"\r\n                @click=\"goToViewFile(item7.fileToken)\"\r\n              >\r\n                <img src=\"@/assets/img/dispatchCenter/文件链接.png\" alt=\"\" />\r\n                <span>点击预览</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </fm-action-sheet>\r\n    <fm-dialog\r\n      :visible.sync=\"planFileDialogShow\"\r\n      title=\"附件预览\"\r\n      :showConfirmButton=\"false\"\r\n      show-cancel-button\r\n    >\r\n      <div style=\"height: 500px; overflow: hidden\">\r\n        <PreView :fileToken=\"fileTokenValue\" key=\"\"></PreView>\r\n      </div>\r\n    </fm-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport {\r\n  NavBar,\r\n  Search,\r\n  Toast,\r\n  Cell,\r\n  CellGroup,\r\n  PullRefresh,\r\n  List,\r\n  Sidebar,\r\n  SidebarItem,\r\n  SwipeCell,\r\n  Button,\r\n  NoticeBar,\r\n  Icon,\r\n  Dialog,\r\n  ActionSheet,\r\n  Uploader,\r\n  Loading,\r\n  Notify,\r\n} from 'fawkes-mobile-lib'\r\nimport * as api from './api'\r\nimport Bus from '@/utils/bus'\r\nimport { addIconToMap } from '@/utils/mapUtils'\r\nimport { bbox, center as getCenter } from '@turf/turf'\r\nimport _cloneDeep from 'lodash/cloneDeep'\r\n// 压力监测点击弹窗\r\nimport PressureMonitorDetail from '@/views/OneMap/components/PressureMonitorDetail.vue'\r\n// 自定义图例\r\nimport { legendListSelf } from './legendList.js'\r\nimport { ENUM } from '@/store/State/stateTypes'\r\nimport axios from 'axios'\r\n// 地图\r\nimport Vue from 'vue'\r\nimport mapboxgl from 'mapbox-gl'\r\nimport infoPopup from '@/views/DispatchCenter/components/popup.vue' // 事件弹窗\r\nimport PopupHover from '@/views/DispatchCenter/components/PopupHover.vue' // 监测点弹窗\r\nimport MapLegend from '@/views/OneMap/components/mapLegend.vue'\r\nimport onDuty from './components/onDuty.vue'\r\n// 水厂数据\r\nimport { modifyWaterWork, newWaterWork } from '@/views/DispatchCenter/supplyWaterWork.js'\r\nimport PreView from '@/components/PreView/index.vue'\r\n// 调度中心页面（概化图），该页面太大，写在外部\r\nimport DispatchCenterPage from '@/views/DispatchCenter/components/DispatchCenterPage/index.vue'\r\n\r\nconst MapObj = {\r\n  map: null,\r\n  viewer: null,\r\n  popupItem: '', // mapbox气泡框\r\n  marker: '',\r\n  monitorPopups: [],\r\n  monitorPopupContent: [],\r\n  // 事件点popup集合\r\n  eventPopupArray: [],\r\n}\r\nexport default {\r\n  name: 'DispatchCenter',\r\n  components: {\r\n    [NavBar.name]: NavBar,\r\n    [Search.name]: Search,\r\n    [Toast.name]: Toast,\r\n    [Cell.name]: Cell,\r\n    [CellGroup.name]: CellGroup,\r\n    [PullRefresh.name]: PullRefresh,\r\n    [List.name]: List,\r\n    [Sidebar.name]: Sidebar,\r\n    [SidebarItem.name]: SidebarItem,\r\n    [SwipeCell.name]: SwipeCell,\r\n    [Button.name]: Button,\r\n    [NoticeBar.name]: NoticeBar,\r\n    [Icon.name]: Icon,\r\n    [Dialog.name]: Dialog,\r\n    [ActionSheet.name]: ActionSheet,\r\n    [Uploader.name]: Uploader,\r\n    [Loading.name]: Loading,\r\n    [Notify.Component.name]: Notify.Component,\r\n\r\n    PressureMonitorDetail,\r\n    MapLegend,\r\n    PreView,\r\n    DispatchCenterPage,\r\n    onDuty,\r\n  },\r\n  data() {\r\n    return {\r\n      showDuty: false,\r\n      selectedTab: '调度中心',\r\n      showMonitorType: false,\r\n      showPopover: false,\r\n      // 通过 actions 属性来定义菜单选项\r\n      actions: [{ text: '选项一' }, { text: '选项二' }, { text: '选项三' }],\r\n      imputValue: '',\r\n      // 添加至地图的图片\r\n      icons: [\r\n        {\r\n          name: '压力监测(供)*',\r\n          url: require('@/assets/img/map/压力监测.png'),\r\n        },\r\n        {\r\n          name: '压力监测离线供',\r\n          url: require('@/assets/img/map/压力离线供地图.png'),\r\n        },\r\n        {\r\n          name: '压力监测报警供',\r\n          url: require('@/assets/img/map/压力报警供地图.png'),\r\n        },\r\n        {\r\n          name: '泵站',\r\n          url: require('@/assets/img/map/pump.png'),\r\n        },\r\n        {\r\n          name: '再生水厂',\r\n          url: require('@/assets/img/map/再生水厂地图.png'),\r\n        },\r\n        {\r\n          name: '供水厂',\r\n          url: require('@/assets/img/map/供水厂地图.png'),\r\n        },\r\n        {\r\n          name: '给水加压泵站',\r\n          url: require('@/assets/img/map/给水加压泵站地图.png'),\r\n        },\r\n        {\r\n          name: '压力监测(再生)*',\r\n          url: require('@/assets/img/map/再生水压力监测.png'),\r\n        },\r\n        {\r\n          name: '压力监测离线再生',\r\n          url: require('@/assets/img/map/压力离线再生地图.png'),\r\n        },\r\n        {\r\n          name: '压力监测报警再生',\r\n          url: require('@/assets/img/map/压力报警再生地图.png'),\r\n        },\r\n        {\r\n          name: '流量计(供)*',\r\n          url: require('@/assets/img/map/流量计地图.png'),\r\n        },\r\n        {\r\n          name: '流量离线供',\r\n          url: require('@/assets/img/map/流量离线供地图.png'),\r\n        },\r\n        {\r\n          name: '流量报警供',\r\n          url: require('@/assets/img/map/流量报警供地图.png'),\r\n        },\r\n        {\r\n          name: '流量计(再生)*',\r\n          url: require('@/assets/img/map/流量计再生地图.png'),\r\n        },\r\n        {\r\n          name: '流量离线再生',\r\n          url: require('@/assets/img/map/流量离线再生地图.png'),\r\n        },\r\n        {\r\n          name: '流量报警再生',\r\n          url: require('@/assets/img/map/流量报警再生地图.png'),\r\n        },\r\n        {\r\n          name: '事件点',\r\n          url: require('@/assets/img/map/dw.png'),\r\n        },\r\n        // {\r\n        // name: \"提标改造给水厂\",\r\n        // url: require(\"@/assets/img/map/提标改造给水厂.png\"),\r\n        // },\r\n        // {\r\n        // name: \"规划新建给水厂\",\r\n        // url: require(\"@/assets/img/map/规划新建给水厂.png\"),\r\n        // },\r\n      ],\r\n      // 所有监测点数据\r\n      allPointArray: [],\r\n      // 告警监测点\r\n      dangerPointData: [],\r\n      pressureMonitorShow: false, // 压力监测详情面板显隐\r\n      pipelineShow: false, // 管线详情面板显隐\r\n      pressureDataDetail: {}, // 压力监测详情面板基础信息\r\n      pipelineBaseInfo: {}, // 管线详情面板基础信息\r\n      // 事件\r\n      accessToken: this.$storage.get('access_token'),\r\n      formToken: '',\r\n      header: {},\r\n      tableData: [],\r\n\r\n      // 图例是否显示\r\n      popupShow: false,\r\n      legendList: legendListSelf,\r\n      fileList: [], // 事件点匹配的预案附件\r\n      // 某一事件点匹配上的所有预案\r\n      tempFileScheme: [],\r\n      prePlanShow: false,\r\n      fileListArr: [\r\n        // { url: '/static/img/leaf.jpg' },\r\n        // Uploader 根据文件后缀来判断是否为图片文件\r\n        // 如果图片 URL 中不包含类型信息，可以添加 isImage 标记来声明\r\n        { url: 'https://cloud-image', isImage: true },\r\n      ],\r\n      // 查看预案loading状态是否展示\r\n      loadingIsShow: false,\r\n      // 存在在地图上的所有监测点数据集合\r\n      monitorDataInMap: [],\r\n      // 文件fileToken值，点击不同文件就随之改变\r\n      fileTokenValue: '',\r\n      // 文件预览弹窗\r\n      planFileDialogShow: false,\r\n      // 工单列表-类 // 旧同问题上报 abnormal_inform\r\n      smallType: 'dispatch_problem',\r\n    }\r\n  },\r\n  created() {},\r\n  mounted() {\r\n    // popup弹框查看预案点击回调\r\n    Bus.$on('goToViewDetail', (objectType, eventType, feature) => {\r\n      console.log('点击某一事件点后存储的参数', objectType, eventType, feature)\r\n      // 打开查看预案面板\r\n      this.prePlanShow = true\r\n      // 查看预案loading状态展示\r\n      this.loadingIsShow = true\r\n      // 匹配预案\r\n      this.toFind(objectType, eventType, feature)\r\n    })\r\n  },\r\n  beforeDestroy() {\r\n    Bus.$off('goToViewDetail')\r\n  },\r\n  methods: {\r\n    // 新增指令\r\n    addInstructions() {\r\n      this.$router.push({\r\n        name: 'addDispatchOrder',\r\n        query: { mode: 'add' }\r\n      })\r\n    },\r\n    // 点击预案某一文件\r\n    goToViewFile(fileToken) {\r\n      // 附件预览弹窗打开\r\n      this.planFileDialogShow = true\r\n      // 附件token赋值\r\n      this.fileTokenValue = fileToken\r\n    },\r\n    // tab切换回调\r\n    changeType(name) {\r\n      this.selectedTab = name\r\n\r\n      // 顶部调度中心与调度地图切换时，将mapLegend.vue组件中事件popup、监测点popup开启状态变成关闭\r\n      // 事件弹窗开关\r\n      this.$refs.mapLegendRef.eventPopupChecked = false\r\n      // 监测点弹窗\r\n      this.$refs.mapLegendRef.monitorPopupChecked = false\r\n    },\r\n    // 调度中心右上角加号选中回调\r\n    onSelect(action) {\r\n      Toast(action.text)\r\n    },\r\n    // 点击scrollBar回调\r\n    goToDetail(val) {\r\n      switch (val) {\r\n        case '事件':\r\n          this.$router.push({\r\n            name: 'SchedulingEvents',\r\n            query: {},\r\n            params: {},\r\n          })\r\n          break\r\n        case '日志':\r\n          this.$router.push({\r\n            name: 'SchedulingLog',\r\n            query: {},\r\n            params: {},\r\n          })\r\n          break\r\n        case '指令':\r\n          this.$router.push({\r\n            path: '/DispatchCenter/DispatchOrder',\r\n          })\r\n          break\r\n        case '压力':\r\n          this.$router.push({\r\n            path: '/DispatchCenter/PressureAnalysis',\r\n          })\r\n          break\r\n        case '排班':\r\n          this.showDuty = !this.showDuty\r\n          break\r\n      }\r\n    },\r\n    // 图例部分开始------------------------------------------\r\n    // 打开图例\r\n    showMapLegend() {\r\n      this.popupShow = true\r\n    },\r\n    // 关闭图例\r\n    closePop(val) {\r\n      this.popupShow = val\r\n    },\r\n    // 单个图例点击\r\n    legendClick(e, item, id) {\r\n      console.log('图例点击', item, id)\r\n      if (typeof item.id == 'number') {\r\n        this.$notify({\r\n          type: 'warning',\r\n          message: '当前图层暂无数据！',\r\n        })\r\n        return\r\n      }\r\n      item.clickFlag = !item.clickFlag\r\n      this.legendControlLayer(item)\r\n    },\r\n    // 单个图例点击\r\n    legendControlLayer(item) {\r\n      let map = window.xaMap\r\n      if (map.getLayer(item.id)) {\r\n        if (item.clickFlag) {\r\n          map.setLayoutProperty(item.id, 'visibility', 'none')\r\n          if (item.id == 'rd_map_drainpipe_ys_big') {\r\n            let filter = map.getFilter('rd_map_manhole')\r\n            if (\r\n              filter.toString() == ['all'].toString() ||\r\n              filter.toString() == ['in', 'manhole_type', '雨水'].toString()\r\n            ) {\r\n              if (map.getLayoutProperty('rd_map_drainpipe_ws_big', 'visibility') == 'none') {\r\n                filter = ['in', 'manhole_type', '']\r\n              } else {\r\n                filter = ['in', 'manhole_type', '污水']\r\n              }\r\n            }\r\n            // 雨水管线图层控制雨水井、雨水箭头、雨水较小层级图层显示\r\n            map.setLayoutProperty('rd_map_comb', 'visibility', 'none')\r\n\r\n            map.setFilter('rd_map_manhole', filter)\r\n            map.setLayoutProperty('rd_map_drainpipe_ys_big_direction', 'visibility', 'none')\r\n            map.setLayoutProperty('rd_map_drainpipe_ys_small', 'visibility', 'none')\r\n            map.setLayoutProperty('rd_map_drainpipe_ys_small_direction', 'visibility', 'none')\r\n          } else if (item.id == 'map_supply_pipe_circulating') {\r\n            // 循环水（回水）管线控制循环水（回水）节点显示\r\n            map.setLayoutProperty('map_supply_node_circulating', 'visibility', 'none')\r\n          } else if (item.id == 'map_supply_pipe_distribute') {\r\n            // 配水管线控制配水节点显示\r\n            map.setLayoutProperty('map_supply_node_distribute', 'visibility', 'none')\r\n          } else if (item.id == 'map_supply_pipe_delivery') {\r\n            // 输水管线控制输水节点显示\r\n            map.setLayoutProperty('map_supply_node_delivery', 'visibility', 'none')\r\n          } else if (item.id == 'map_recycle_pipe') {\r\n            // 再生水管线控制再生水节点显示\r\n            map.setLayoutProperty('map_recycle_node', 'visibility', 'none')\r\n          } else if (item.id == 'rd_map_drainpipe_ws_big') {\r\n            // 污水管线图层控制污水井、污水箭头、污水较小层级图层显示\r\n            let filter = map.getFilter('rd_map_manhole')\r\n            if (\r\n              filter.toString() == ['all'].toString() ||\r\n              filter.toString() == ['in', 'manhole_type', '污水'].toString()\r\n            ) {\r\n              if (map.getLayoutProperty('rd_map_drainpipe_ys_big', 'visibility') == 'none') {\r\n                filter = ['in', 'manhole_type', '']\r\n              } else {\r\n                filter = ['in', 'manhole_type', '雨水']\r\n              }\r\n            }\r\n            map.setFilter('rd_map_manhole', filter)\r\n            map.setLayoutProperty('rd_map_drainpipe_ws_big_direction', 'visibility', 'none')\r\n            map.setLayoutProperty('rd_map_drainpipe_ws_small', 'visibility', 'none')\r\n            map.setLayoutProperty('rd_map_drainpipe_ws_small_direction', 'visibility', 'none')\r\n          } else if (item.id == '压力监测') {\r\n            // map.setLayoutProperty(\r\n            // \"压力监测-报警\",\r\n            // \"visibility\",\r\n            // \"none\"\r\n            // );\r\n          }\r\n        } else {\r\n          map.setLayoutProperty(item.id, 'visibility', 'visible')\r\n          if (item.id == 'rd_map_drainpipe_ys_big') {\r\n            let filter = map.getFilter('rd_map_manhole')\r\n            if (\r\n              filter.toString() == ['in', 'manhole_type', ''].toString() ||\r\n              filter.toString() == ['in', 'manhole_type', '污水'].toString()\r\n            ) {\r\n              if (map.getLayoutProperty('rd_map_drainpipe_ws_big', 'visibility') != 'none') {\r\n                filter = ['all']\r\n              } else {\r\n                filter = ['in', 'manhole_type', '雨水']\r\n              }\r\n            }\r\n            map.setFilter('rd_map_manhole', filter)\r\n            map.setLayoutProperty('rd_map_comb', 'visibility', 'visible')\r\n            map.setLayoutProperty('rd_map_drainpipe_ys_big_direction', 'visibility', 'visible')\r\n            map.setLayoutProperty('rd_map_drainpipe_ys_small', 'visibility', 'visible')\r\n            map.setLayoutProperty('rd_map_drainpipe_ys_small_direction', 'visibility', 'visible')\r\n          } else if (item.id == 'map_supply_pipe_circulating') {\r\n            map.setLayoutProperty('map_supply_node_circulating', 'visibility', 'visible')\r\n          } else if (item.id == 'map_supply_pipe_distribute') {\r\n            map.setLayoutProperty('map_supply_node_distribute', 'visibility', 'visible')\r\n          } else if (item.id == 'map_supply_pipe_delivery') {\r\n            map.setLayoutProperty('map_supply_node_delivery', 'visibility', 'visible')\r\n          } else if (item.id == 'map_recycle_pipe') {\r\n            map.setLayoutProperty('map_recycle_node', 'visibility', 'visible')\r\n          } else if (item.id == 'rd_map_drainpipe_ws_big') {\r\n            let filter = map.getFilter('rd_map_manhole')\r\n            if (\r\n              filter.toString() == ['in', 'manhole_type', ''].toString() ||\r\n              filter.toString() == ['in', 'manhole_type', '雨水'].toString()\r\n            ) {\r\n              if (map.getLayoutProperty('rd_map_drainpipe_ys_big', 'visibility') != 'none') {\r\n                filter = ['all']\r\n              } else {\r\n                filter = ['in', 'manhole_type', '污水']\r\n              }\r\n            }\r\n            map.setLayoutProperty('rd_map_drainpipe_ws_big_direction', 'visibility', 'visible')\r\n            map.setFilter('rd_map_manhole', filter)\r\n            map.setLayoutProperty('rd_map_manhole', 'visibility', 'visible')\r\n            map.setLayoutProperty('rd_map_drainpipe_ws_small_direction', 'visibility', 'visible')\r\n            map.setLayoutProperty('rd_map_drainpipe_ws_small', 'visibility', 'visible')\r\n          } else if (item.id == '压力监测') {\r\n            // map.setLayoutProperty(\r\n            // \"压力监测-报警\",\r\n            // \"visibility\",\r\n            // \"visible\"\r\n            // );\r\n          }\r\n        }\r\n      }\r\n    },\r\n    // 图例标题点击，控制该标题下所有图层显隐\r\n    legendTitleNameClick(legendTitleName) {\r\n      console.log('图例标题', legendTitleName)\r\n      this.legendList.forEach((item) => {\r\n        if (item.label === legendTitleName) {\r\n          item.titleStatus = !item.titleStatus\r\n          //\r\n          item.options.forEach((smallItem) => {\r\n            // 当该标题下图层内容为显示状态时才进入判断\r\n            if (item.titleStatus === true && typeof smallItem.id == 'number') {\r\n              setTimeout(() => {\r\n                this.$notify({\r\n                  type: 'warning',\r\n                  message: smallItem.label + '图层暂无数据！',\r\n                })\r\n              }, 0)\r\n              return\r\n            }\r\n            if (item.titleStatus === true) {\r\n              // 标题状态点亮时\r\n              smallItem.clickFlag = false // 图层均显示\r\n            } else {\r\n              smallItem.clickFlag = true // 图层均隐藏\r\n            }\r\n            this.legendControlLayer(smallItem)\r\n          })\r\n        }\r\n      })\r\n    },\r\n    // 事件弹窗开关\r\n    eventPopupClick(isShow) {\r\n      console.log('事件', isShow)\r\n      if (isShow) {\r\n        // 事件点popup集合\r\n        MapObj.eventPopupArray = []\r\n        // 如果当前事件点还未加载完毕就退出\r\n        if (this.tableData.length == 0) return\r\n        this.popup1 && this.popup1.remove() // 从地图上移除事件popup\r\n        // 事件弹窗全开\r\n        this.tableData.forEach((item, index) => {\r\n          // console.log(item)\r\n          let popup = new mapboxgl.Popup({\r\n            closeOnClick: false,\r\n            closeButton: false,\r\n            anchor: 'bottom',\r\n            offset: { bottom: [0, -15] },\r\n          })\r\n          popup\r\n            .setLngLat({\r\n              lng: item.appealLng,\r\n              lat: item.appealLat,\r\n            })\r\n            .setHTML('<div id=popup' + item.id + '></div>')\r\n            .addTo(MapObj.map)\r\n\r\n          let defectFromDic = this.$store.state[ENUM].defectFrom\r\n          this.$nextTick(() => {\r\n            // 事件悬浮弹窗\r\n            new infoPopup({\r\n              propsData: {\r\n                // 对象类型\r\n                // item无需JSON.parse\r\n                deviceType: item.formValue.deviceType[1],\r\n                // 事件类型\r\n                faultTypes: item.formValue.faultTypes,\r\n                // 当前事件点的properties\r\n                properties: item,\r\n                formToken: this.formToken,\r\n                id: item.id,\r\n                ticketNo: item.ticketNo,\r\n                name: ' ' + item.title + ' ',\r\n                status: item.ticketStatusName,\r\n                info: {\r\n                  事件来源: defectFromDic.find((it) => it.code == item.defectFrom)['zh-CN'],\r\n                  事件位置: item.address,\r\n                  上报人: item.createByName,\r\n                  智能调度推荐: '预案附件',\r\n                },\r\n                fileList: this.fileList,\r\n              },\r\n            }).$mount('#popup' + item.id)\r\n          })\r\n          // 事件点popup集合\r\n          MapObj.eventPopupArray.push(popup)\r\n        })\r\n      } else {\r\n        // 事件点popup隐藏\r\n        MapObj.eventPopupArray.forEach((popup) => {\r\n          popup.remove()\r\n        })\r\n        // 事件点popup集合\r\n        MapObj.eventPopupArray = []\r\n      }\r\n    },\r\n    // 监测点弹窗开关\r\n    monitorPopupClick(isShow) {\r\n      console.log('监测点', isShow)\r\n      if (isShow) {\r\n        // 如果地图上还未存在监测点图层就退出\r\n        if (this.monitorDataInMap.length == 0) return\r\n        // 监测点popup集合\r\n        MapObj.monitorPopups = []\r\n        // 存在在地图上的所有监测点数据集合\r\n        this.monitorDataInMap.forEach((item) => {\r\n          let pop = new mapboxgl.Popup({\r\n            closeOnClick: false,\r\n            closeButton: false,\r\n            anchor: 'bottom',\r\n            offset: { bottom: [0, -22] },\r\n          })\r\n          pop\r\n            .setLngLat({\r\n              lng: item.lon,\r\n              lat: item.lat,\r\n            })\r\n            .setHTML('<div id=popup' + item.deviceId + '></div>')\r\n            .addTo(window.xaMap)\r\n          // 传递给PopupHover组件，遍历展示数据\r\n          let hoverAndClick = []\r\n          // 1.筛选出需要展示的属性\r\n          hoverAndClick = item.realtimeData.filter((item) => {\r\n            return item.isShow == 0\r\n          })\r\n          // 1.2将properties中设备告警状态添加到具体的属性值中，用于是否用红色字体显示，比如压力值\r\n          hoverAndClick.forEach((item1) => {\r\n            if (item?.isWarn && item?.isWarn == '1') {\r\n              item1.isWarn = 1\r\n            } else {\r\n              item1.isWarn = -1\r\n            }\r\n          })\r\n          // 2.不同设备添加不同展示数据\r\n          hoverAndClick.forEach((item) => {\r\n            // 对需要显示的值进行处理并添加单位\r\n            item.myVal = item.val + ' ' + item.desc\r\n          })\r\n          // 3.时间单独添加在最后\r\n          hoverAndClick.push({\r\n            name: '时间',\r\n            myVal: hoverAndClick.length > 0 ? hoverAndClick[0].time.slice(6, 20) : '',\r\n            isWarn: -1,\r\n          })\r\n          this.$nextTick(() => {\r\n            // 压力监测悬浮弹窗\r\n            new PopupHover({\r\n              propsData: {\r\n                name: item.monitorName,\r\n                belongSystem: item.belongSystem,\r\n                realtimeData: item.realtimeData,\r\n                hoverAndClick: hoverAndClick,\r\n              },\r\n            }).$mount('#popup' + item.deviceId)\r\n          })\r\n          MapObj.monitorPopups.push(pop)\r\n        })\r\n      } else {\r\n        // 监测点popup隐藏\r\n        MapObj.monitorPopups.forEach((popup) => {\r\n          popup.remove()\r\n        })\r\n        // 监测点popup集合\r\n        MapObj.monitorPopups = []\r\n      }\r\n    },\r\n    // 图例部分结束------------------------------------------\r\n    // /*初始化地图事件*/\r\n    async initScene() {\r\n      MapObj.map = window.xaMap\r\n      await addIconToMap(MapObj.map, this.icons)\r\n      MapObj.map.resize()\r\n      // 添加水厂\r\n      this.addWaterFactory()\r\n      // 添加压力监测设备点\r\n      this.getPressurePoint()\r\n      // 添加事件图层 => getTableData() + this.getGeoJson() => renderCluster() 渲染图层和弹窗\r\n      this.addEventsLayer()\r\n\r\n      //修改供水厂图标\r\n      MapObj.map.setLayoutProperty('map_waterwork', 'icon-image', '供水厂')\r\n      MapObj.map.setLayoutProperty('map_waterwork', 'icon-size', 0.6)\r\n      MapObj.map.setLayoutProperty('map_supply_pump', 'icon-image', '给水加压泵站')\r\n      MapObj.map.setLayoutProperty('map_supply_pump', 'icon-size', 0.6)\r\n\r\n      // 隐藏六水合一默认图层\r\n      MapObj.map.setLayoutProperty('rd_map_comb', 'visibility', 'none')\r\n      MapObj.map.setLayoutProperty('rd_map_manhole', 'visibility', 'none')\r\n      // 污水相关\r\n      MapObj.map.setLayoutProperty('rd_map_drainpipe_ws_big', 'visibility', 'none')\r\n\r\n      MapObj.map.setLayoutProperty('rd_map_drainpipe_ws_big_direction', 'visibility', 'none')\r\n      MapObj.map.setLayoutProperty('rd_map_drainpipe_ws_small', 'visibility', 'none')\r\n      MapObj.map.setLayoutProperty('rd_map_drainpipe_ws_small_direction', 'visibility', 'none')\r\n      // 雨水相关\r\n      MapObj.map.setLayoutProperty('rd_map_drainpipe_ys_big', 'visibility', 'none')\r\n      MapObj.map.setLayoutProperty('rd_map_drainpipe_ys_big_direction', 'visibility', 'none')\r\n      MapObj.map.setLayoutProperty('rd_map_drainpipe_ys_small', 'visibility', 'none')\r\n      MapObj.map.setLayoutProperty('rd_map_drainpipe_ys_small_direction', 'visibility', 'none')\r\n      // 显示供水管线图层\r\n      MapObj.map.setLayoutProperty('map_supply_pipe_distribute', 'visibility', 'visible')\r\n      MapObj.map.setLayoutProperty('map_supply_pipe_circulating', 'visibility', 'visible')\r\n      MapObj.map.setLayoutProperty('map_supply_pipe_delivery', 'visibility', 'visible')\r\n      // MapObj.map.setLayoutProperty( \"1111111111111111111111111\", \"visibility\", \"visible\" );\r\n      MapObj.map.setLayoutProperty('map_waterwork', 'visibility', 'visible')\r\n      MapObj.map.setLayoutProperty('map_supply_pump', 'visibility', 'visible')\r\n      // MapObj.map.setLayoutProperty( \"1111111111111111111111111\", \"visibility\", \"visible\" );\r\n      MapObj.map.setLayoutProperty('map_supply_valve', 'visibility', 'visible')\r\n      MapObj.map.setLayoutProperty('map_supply_firehydrant', 'visibility', 'visible')\r\n    },\r\n    // 添加水厂\r\n    async addWaterFactory() {\r\n      let map = window.xaMap\r\n      // let modifyWaterWorkSourceData = {\r\n      //   type: \"FeatureCollection\",\r\n      //   features: modifyWaterWork.map((i) => {\r\n      //     return {\r\n      //       type: \"Feature\",\r\n      //       geometry: {\r\n      //         type: \"Point\",\r\n      //         coordinates: [i.lon, i.lat],\r\n      //       },\r\n      //       properties: i,\r\n      //     };\r\n      //   }),\r\n      // };\r\n      // let newWaterWorkSourceData = {\r\n      //   type: \"FeatureCollection\",\r\n      //   features: newWaterWork.map((i) => {\r\n      //     return {\r\n      //       type: \"Feature\",\r\n      //       geometry: {\r\n      //         type: \"Point\",\r\n      //         coordinates: [i.lon, i.lat],\r\n      //       },\r\n      //       properties: i,\r\n      //     };\r\n      //   }),\r\n      // };\r\n      // await map.addLayer({\r\n      //   id: \"提标改造给水厂\",\r\n      //   type: \"symbol\",\r\n      //   source: {\r\n      //     type: \"geojson\",\r\n      //     data: modifyWaterWorkSourceData,\r\n      //   },\r\n      //   layout: {\r\n      //     \"icon-image\": \"提标改造给水厂\",\r\n      //     \"icon-size\": 1,\r\n      //     // 图标强制全部显示\r\n      //     \"icon-ignore-placement\": true,\r\n      //   },\r\n      // });\r\n      // await map.addLayer({\r\n      //   id: \"规划新建给水厂\",\r\n      //   type: \"symbol\",\r\n      //   source: {\r\n      //     type: \"geojson\",\r\n      //     data: newWaterWorkSourceData,\r\n      //   },\r\n      //   layout: {\r\n      //     \"icon-image\": \"规划新建给水厂\",\r\n      //     \"icon-size\": 1,\r\n      //     // 图标强制全部显示\r\n      //     \"icon-ignore-placement\": true,\r\n      //   },\r\n      // });\r\n      await map.addLayer({\r\n        id: 'recycleFactory',\r\n        source: {\r\n          type: 'geojson',\r\n          data: {\r\n            type: 'FeatureCollection',\r\n            features: [\r\n              {\r\n                type: 'Feature',\r\n                geometry: {\r\n                  type: 'Point',\r\n                  coordinates: [115.948614165383, 39.0726579390552],\r\n                },\r\n              },\r\n            ],\r\n          },\r\n        },\r\n        type: 'symbol',\r\n        layout: {\r\n          'icon-image': '再生水厂',\r\n          visibility: 'none',\r\n          'icon-size': 0.6,\r\n        },\r\n      })\r\n\r\n      // 提标改造给水厂\r\n      modifyWaterWork.forEach((item) => {\r\n        let pop = new mapboxgl.Popup({\r\n          closeOnClick: false,\r\n          closeButton: false,\r\n          anchor: 'bottom',\r\n          offset: { bottom: [0, -15] },\r\n        })\r\n        pop\r\n          .setLngLat({\r\n            lng: item.lon,\r\n            lat: item.lat,\r\n          })\r\n          .setText(item.name)\r\n          .addTo(map)\r\n      })\r\n\r\n      // 规划新建给水厂\r\n      newWaterWork.forEach((item) => {\r\n        let pop = new mapboxgl.Popup({\r\n          closeOnClick: false,\r\n          closeButton: false,\r\n          anchor: 'bottom',\r\n          offset: { bottom: [0, -15] },\r\n        })\r\n        pop\r\n          .setLngLat({\r\n            lng: item.lon,\r\n            lat: item.lat,\r\n          })\r\n          .setText(item.name)\r\n          .addTo(map)\r\n      })\r\n      // map.on(\"mouseenter\", \"提标改造给水厂\", (e) => {\r\n      //   let feature = e.features[0];\r\n      //   if (!this.pop) {\r\n      //     this.pop = new mapboxgl.Popup({\r\n      //       closeOnClick: true,\r\n      //       closeButton: false,\r\n      //       anchor: \"bottom\",\r\n      //       offset: { bottom: [0, -15] },\r\n      //     });\r\n      //   }\r\n      //   this.pop\r\n      //     .setLngLat({\r\n      //       lng: feature.properties.lon,\r\n      //       lat: feature.properties.lat,\r\n      //     })\r\n      //     .setText(feature.properties.name)\r\n      //     .addTo(map);\r\n      // });\r\n      // map.on(\"mouseenter\", \"规划新建给水厂\", (e) => {\r\n      //   let feature = e.features[0];\r\n      //   if (!this.pop) {\r\n      //     this.pop = new mapboxgl.Popup({\r\n      //       closeOnClick: true,\r\n      //       closeButton: false,\r\n      //       anchor: \"bottom\",\r\n      //       offset: { bottom: [0, -15] },\r\n      //     });\r\n      //   }\r\n      //   this.pop\r\n      //     .setLngLat({\r\n      //       lng: feature.properties.lon,\r\n      //       lat: feature.properties.lat,\r\n      //     })\r\n      //     .setText(feature.properties.name)\r\n      //     .addTo(map);\r\n      // });\r\n    },\r\n    // 添加压力监测设备\r\n    async getPressurePoint() {\r\n      let params = {\r\n        deviceType: '',\r\n      }\r\n      let arr = []\r\n      let flowArr = [] // 流量计\r\n      let supplyFlowArr = [] // 供水流量计\r\n      let recycleFlowArr = [] // 再生水流量计\r\n      let pressureArr = [] // 压力计\r\n      let supplyPressureArr = [] // 供水压力计\r\n      let recyclePressureArr = [] // 再生水压力\r\n\r\n      // 获取所有监测设备基础信息\r\n      await api.getAllEquipmentInformation(params).then((res) => {\r\n        if (res.data && res.data.length > 0) {\r\n          // 所有监测点数据赋值\r\n          this.allPointArray = res.data\r\n          console.log('所有监测点数据', res.data)\r\n          let arr = res.data\r\n          flowArr = arr.filter((item) => {\r\n            return item.deviceType == 'Flowmeter'\r\n          })\r\n          supplyFlowArr = flowArr.filter((item) => {\r\n            return item.belongSystem == '供水'\r\n          })\r\n          recycleFlowArr = flowArr.filter((item) => {\r\n            return item.belongSystem == '再生水'\r\n          })\r\n          pressureArr = arr.filter((item) => {\r\n            return item.deviceType == 'IVTM'\r\n          })\r\n          supplyPressureArr = pressureArr.filter((item) => {\r\n            return item.belongSystem == '供水'\r\n          })\r\n          recyclePressureArr = pressureArr.filter((item) => {\r\n            return item.belongSystem == '再生水'\r\n          })\r\n          console.log(\r\n            '压力流量四个类型',\r\n            supplyFlowArr,\r\n            recycleFlowArr,\r\n            supplyPressureArr,\r\n            recyclePressureArr\r\n          )\r\n          // 存在在地图上的所有监测点数据集合\r\n          this.monitorDataInMap = [...supplyFlowArr, ...recycleFlowArr, ...supplyPressureArr, ...recyclePressureArr]\r\n          // 供水压力监测点告警个数\r\n          supplyPressureArr.forEach((item) => {\r\n            console.log(item.iotOnline + '---' + item.isWarn)\r\n          })\r\n          this.addYourLayer(supplyFlowArr, '流量计(供)*', '流量离线供', '流量报警供')\r\n          this.addYourLayer(recycleFlowArr, \"流量计(再生)*\", \"流量离线再生\", \"流量报警再生\");\r\n          this.addYourLayer(supplyPressureArr, '压力监测(供)*', '压力监测离线供', '压力监测报警供')\r\n          this.addYourLayer(recyclePressureArr, \"压力监测(再生)*\", \"压力监测离线再生\", \"压力监测报警再生\");\r\n        }\r\n      })\r\n    },\r\n    // 在地图上添加图标图层\r\n    addYourLayer(pointList, id, offlineImageId, warnImageId) {\r\n      let visibility = 'visible'\r\n      // if (id == '压力监测(供)*') {\r\n      //   visibility = 'visible'\r\n      // } else {\r\n      //   visibility = 'none'\r\n      // }\r\n      const sourceData = {\r\n        type: 'FeatureCollection',\r\n        features: pointList.map((i) => {\r\n          return {\r\n            type: 'Feature',\r\n            geometry: {\r\n              type: 'Point',\r\n              coordinates: [i.lon, i.lat],\r\n            },\r\n            properties: i,\r\n          }\r\n        }),\r\n      }\r\n      if (window.xaMap.getSource(id)) {\r\n        window.xaMap.getSource(id).setData(sourceData)\r\n        return\r\n      }\r\n      window.xaMap.addLayer(\r\n        {\r\n          id: id,\r\n          type: 'symbol',\r\n          source: {\r\n            type: 'geojson',\r\n            data: sourceData,\r\n          },\r\n          layout: {\r\n            'icon-image': [\r\n              'case',\r\n              ['all', ['==', ['get', 'iotOnline'], '0'], ['!=', ['get', 'isWarn'], '1']],\r\n              id,\r\n              ['==', ['get', 'iotOnline'], '1'],\r\n              offlineImageId,\r\n              ['all', ['==', ['get', 'iotOnline'], '0'], ['==', ['get', 'isWarn'], '1']],\r\n              warnImageId,\r\n              id,\r\n            ],\r\n            'icon-size': 0.7,\r\n            // 图标强制全部显示\r\n            'icon-ignore-placement': true,\r\n            visibility: visibility,\r\n          },\r\n          minzoom: 13,\r\n        },\r\n        ''\r\n      )\r\n      let obj = {}\r\n      obj[id] = pointList\r\n      MapObj.monitorPopupContent.push(obj)\r\n      // 鼠标点击\r\n      window.xaMap.on('click', id, this.handleMouseClick)\r\n    },\r\n    // 鼠标点击\r\n    handleMouseClick(e) {\r\n      const feature = e.features[0]\r\n      // window.xaMap.getCanvas().style.cursor = 'pointer'\r\n      // 管线详情面板关闭\r\n      this.pipelineShow = false\r\n      // 赋值传递给详情面板PressureMonitor.vue\r\n      this.pressureDataDetail = _cloneDeep(feature.properties)\r\n      this.pressureDataDetail.realtimeData = JSON.parse(feature.properties.realtimeData)\r\n      // 压力监测详情面板\r\n      this.pressureMonitorShow = true\r\n    },\r\n    // 压力监测详情面板PressureMonitor.vue关闭按钮回调\r\n    closePopup_pressure() {\r\n      // 压力监测详情面板\r\n      this.pressureMonitorShow = false\r\n    },\r\n\r\n    // 事件地图部分----------------------------------------\r\n    // 添加事件图层，先获取header，再通过header获取事件，再将事件列表添加至地图\r\n    async addEventsLayer() {\r\n      // 业务类型固定为“供水”\r\n      // let extParam = \"{\\\"sysSource\\\":\\\"outwork\\\",\\\"createType\\\":\\\"PC\\\"\" + \",\\\"device_type\\\":\" + \"[\" + \"\\\"\" + \"supply\" + \"\\\"\" + \"]\" + \"}\";\r\n      let extParam = ''\r\n      let extParamJson = {\r\n        // \"sysSource\": \"outwork\",\r\n        createType: 'PC',\r\n        // \"device_type\": [\"supply\"] // 要换成 supply、sewage\r\n      }\r\n      extParam = JSON.stringify(extParamJson)\r\n      let params = {\r\n        sysCode: 'outwork',\r\n        smallType: this.smallType,\r\n        extParam: extParam,\r\n        extListParam: [\r\n          { keyList: ['deviceType'], valueList: ['recycle', 'supply', '供水', '再生水'] },\r\n        ], // 同时查再生水和供水\r\n        page: {\r\n          current: 1,\r\n          size: -1,\r\n        },\r\n      }\r\n      // 获取header，查询工单用\r\n      axios({\r\n        // url: 'http://172.20.79.70/main/userCenterApi/sso/tokenByToken',\r\n        url: process.env.VUE_APP_WPG_URL + '/main/userCenterApi/sso/tokenByToken',\r\n        method: 'post',\r\n        params: {\r\n          token: this.accessToken,\r\n        },\r\n        headers: {\r\n          Authorization: 'Basic b3V0d29yazp3cGcyMDIw',\r\n        },\r\n      }).then(async (res) => {\r\n        if (res.status == 200) {\r\n          this.formToken = res.data.resultData.token\r\n          this.header = {\r\n            // 'Content-Type': 'application/json', // 若有 则文件上传 出错\r\n            Authorization: 'Bearer ' + this.formToken,\r\n          }\r\n          console.log('this.header查询工单用:', this.header)\r\n          await this.getTableData(params) // 获取事件列表\r\n          this.getGeoJson()\r\n        }\r\n      })\r\n    },\r\n    // 获取事件列表\r\n    async getTableData(params) {\r\n      this.tableData = []\r\n      console.log('获取事件列表参数', params)\r\n      await axios({\r\n        url: process.env.VUE_APP_THIRD_REQUEST_URL + '/main/outworkapi/ticketStatisticClient/getTicketList',\r\n        method: 'post',\r\n        data: params,\r\n        headers: this.header,\r\n      }).then((res) => {\r\n        console.log('获取事件列表结果', res)\r\n        if (res.status == 200 && res.data != null) {\r\n          this.tableData = res.data?.resultData?.records || []\r\n          console.log('事件列表records', this.tableData)\r\n        }\r\n      })\r\n    },\r\n    // 将事件列表添加至地图\r\n    getGeoJson() {\r\n      let features = []\r\n      let withoutPositionCount = 0\r\n      console.log('聚合的tableData', this.tableData)\r\n      if (this.tableData.length == 0) return\r\n\r\n      this.tableData.forEach((item) => {\r\n        let feature = {}\r\n        let properties = {}\r\n        let geometry = {}\r\n\r\n        properties = item\r\n        properties.defectFrom = item.formValue.defectFrom\r\n        feature.properties = properties\r\n        feature.type = 'Feature'\r\n        geometry.type = 'Point'\r\n        if (item.appealLat && item.appealLng) {\r\n          // geometry.coordinates = [item.appealLat, item.appealLon]\r\n          geometry.coordinates = [item.appealLng, item.appealLat] // wgs84\r\n          feature.geometry = geometry\r\n          features.push(feature)\r\n        } else if (\r\n          item.formValue.deviceDetail?.latitude &&\r\n          item.formValue.deviceDetail?.longitude\r\n        ) {\r\n          geometry.coordinates = [\r\n            item.formValue.deviceDetail.longitude,\r\n            item.formValue.deviceDetail.latitude,\r\n          ]\r\n          feature.geometry = geometry\r\n          features.push(feature)\r\n        } else if (\r\n          item.formValue.ticketAddress?.longitude &&\r\n          item.formValue.ticketAddress?.latitude\r\n        ) {\r\n          geometry.coordinates = [\r\n            item.formValue.ticketAddress.longitude,\r\n            item.formValue.ticketAddress.latitude,\r\n          ]\r\n          feature.geometry = geometry\r\n          features.push(feature)\r\n        } else {\r\n          // geometry.coordinates = [39.06683064435245, 115.9453947097063]\r\n          withoutPositionCount += 1\r\n        }\r\n      })\r\n      console.log('无坐标个数', withoutPositionCount)\r\n      // 聚合数据 构造头部\r\n      let geoJson = {\r\n        type: 'FeatureCollection',\r\n        crs: { type: 'name', properties: { name: 'urn:ogc:def:crs:OGC:1.3:CRS84' } },\r\n        features: [],\r\n      }\r\n      geoJson.features = features\r\n      console.log('聚合的geoJson', geoJson)\r\n      this.renderCluster(geoJson)\r\n    },\r\n    // 渲染\r\n    renderCluster(geoJsonSource) {\r\n      ;['clusters', 'cluster-count', 'unclustered-point'].forEach((item) => {\r\n        if (MapObj.map.getLayer(item)) {\r\n          MapObj.map.removeLayer(item)\r\n        }\r\n      })\r\n      if (MapObj.map.getSource('earthquakes')) {\r\n        MapObj.map.removeSource('earthquakes')\r\n      }\r\n      MapObj.map.addSource('earthquakes', {\r\n        type: 'geojson',\r\n        // Point to GeoJSON data. This example visualizes all M1.0+ earthquakes\r\n        // from 12/22/15 to 1/21/16 as logged by USGS' Earthquake hazards program.\r\n        // data: \"https://docs.mapbox.com/mapbox-gl-js/assets/earthquakes.geojson\",\r\n        data: geoJsonSource,\r\n        cluster: true,\r\n        clusterMaxZoom: 14, // Max zoom to cluster points on\r\n        clusterRadius: 50, // Radius of each cluster when clustering points (defaults to 50)\r\n      })\r\n\r\n      MapObj.map.addLayer({\r\n        id: 'clusters',\r\n        type: 'circle',\r\n        source: 'earthquakes',\r\n        filter: ['has', 'point_count'],\r\n        paint: {\r\n          // Use step expressions (https://docs.mapbox.com/mapbox-gl-js/style-spec/#expressions-step)\r\n          // with three steps to implement three types of circles:\r\n          // * Blue, 20px circles when point count is less than 100\r\n          // * Yellow, 30px circles when point count is between 100 and 750\r\n          // * Pink, 40px circles when point count is greater than or equal to 750\r\n          'circle-color': ['step', ['get', 'point_count'], '#51bbd6', 10, '#f1f075', 75, '#f28cb1'],\r\n          'circle-radius': ['step', ['get', 'point_count'], 20, 10, 30, 75, 40],\r\n        },\r\n      })\r\n\r\n      MapObj.map.addLayer({\r\n        id: 'cluster-count',\r\n        type: 'symbol',\r\n        source: 'earthquakes',\r\n        filter: ['has', 'point_count'],\r\n        layout: {\r\n          'text-field': '{point_count_abbreviated}',\r\n          'text-font': ['DIN Offc Pro Medium', 'Arial Unicode MS Bold'],\r\n          'text-size': 12,\r\n        },\r\n      })\r\n\r\n      MapObj.map.addLayer({\r\n        id: 'unclustered-point',\r\n        source: 'earthquakes',\r\n        filter: ['!', ['has', 'point_count']],\r\n        type: 'symbol',\r\n        layout: {\r\n          'icon-image': '事件点', // 点的图标\r\n          visibility: 'visible',\r\n          'icon-size': 0.7,\r\n        },\r\n      })\r\n\r\n      let defectFromDic = this.$store.state[ENUM].defectFrom\r\n      let that = this\r\n      MapObj.map.on('click', 'unclustered-point', (e) => {\r\n        // 如果当前事件点所有popup为打开状态，即事件点popup数组长度不为0，退出该次点击事件\r\n        if (MapObj.eventPopupArray.length > 0) return\r\n        // 每次点击新的事件点就清除预案数据\r\n        this.fileList = []\r\n        console.log('e.features: ', e.features)\r\n        // console.log('formValue: ', JSON.parse(e.features[0].properties.formValue))\r\n        MapObj.map.getCanvas().style.cursor = 'pointer'\r\n\r\n        let formValue = JSON.parse(e.features[0].properties.formValue)\r\n        console.log('formValue: ', formValue)\r\n\r\n        // 对象类型\r\n        let objectType = formValue.deviceType[1]\r\n        // 事件类型\r\n        let eventType = formValue.faultTypes\r\n\r\n        var coordinates = e.features[0].geometry.coordinates.slice()\r\n        // console.log('经纬度', coordinates)\r\n        // Ensure that if the map is zoomed out such that multiple\r\n        // copies of the feature are visible, the popup appears\r\n        // over the copy being pointed to.\r\n        while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {\r\n          coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360\r\n        }\r\n        // Create a popup, but don't add it to the map yet.\r\n        this.popup1 = new mapboxgl.Popup({\r\n          closeOnClick: true,\r\n          closeButton: false,\r\n          anchor: 'bottom',\r\n          offset: { bottom: [0, -15] },\r\n        })\r\n\r\n        this.popup1\r\n          .setLngLat(coordinates)\r\n          .setHTML('<div id=\"vue-popup-pressure\"></div>')\r\n          .addTo(MapObj.map)\r\n        // .addTo(window.xaMap);\r\n        let formToken = that.formToken\r\n        // 事件悬浮弹窗\r\n        new infoPopup({\r\n          propsData: {\r\n            // 对象类型\r\n            deviceType: formValue.deviceType[1],\r\n            // 事件类型\r\n            faultTypes: formValue.faultTypes,\r\n            // 当前事件点的properties\r\n            properties: e.features[0].properties,\r\n            formToken: formToken,\r\n            id: e.features[0].properties.id,\r\n            ticketNo: e.features[0].properties.ticketNo,\r\n            name: ' ' + e.features[0].properties.title + ' ',\r\n            status: e.features[0].properties.ticketStatusName,\r\n            info: {\r\n              事件来源: defectFromDic.find((it) => it.code == e.features[0].properties.defectFrom)[\r\n                'zh-CN'\r\n              ],\r\n              事件位置: e.features[0].properties.address,\r\n              上报人: e.features[0].properties.createByName,\r\n              智能调度推荐: '预案附件',\r\n            },\r\n            fileList: this.fileList,\r\n          },\r\n        }).$mount('#vue-popup-pressure')\r\n      })\r\n\r\n      // inspect a cluster on click\r\n      MapObj.map.on('click', 'clusters', function (e) {\r\n        var features = MapObj.map.queryRenderedFeatures(e.point, { layers: ['clusters'] })\r\n        var clusterId = features[0].properties.cluster_id\r\n        MapObj.map\r\n          .getSource('earthquakes')\r\n          .getClusterExpansionZoom(clusterId, function (err, zoom) {\r\n            if (err) return\r\n            MapObj.map.easeTo({\r\n              center: features[0].geometry.coordinates,\r\n              zoom: zoom,\r\n            })\r\n          })\r\n      })\r\n      MapObj.map.setMinZoom(0)\r\n      MapObj.map.setMaxZoom(30)\r\n      // console.log('now MapObj.map layers: ', MapObj.map.getStyle().layers)\r\n    },\r\n    // 匹配预案\r\n    async toFind(objectType, eventType, feature) {\r\n      let params = {\r\n        page: 1,\r\n        size: 99,\r\n        objectType: objectType,\r\n        eventType: eventType,\r\n      }\r\n      console.log('匹配预案参数', params)\r\n      // 某一事件点匹配上的所有预案\r\n      this.tempFileScheme = []\r\n      // 匹配调度预案\r\n      await api.getSchema(params).then((res) => {\r\n        console.log('匹配预案结果', res)\r\n        if (res.status && res.data != null) {\r\n          this.tempFileScheme = res.data.records\r\n        }\r\n        console.log('匹配上的预案数组', res.data.records)\r\n        if (this.tempFileScheme.length == 0) {\r\n          console.log('未匹配到预案')\r\n          this.fileList = []\r\n          this.loadingIsShow = false\r\n          Notify({ type: 'warning', message: '暂无匹配预案', duration: 1000 })\r\n          return\r\n        }\r\n        // 根据匹配上的预案获取预案文件？\r\n        this.getFileInfoByToken(this.tempFileScheme, feature)\r\n      })\r\n    },\r\n    // 根据匹配上的预案获取预案文件？\r\n    async getFileInfoByToken(tempFileScheme, feature) {\r\n      for (let i = 0; i < tempFileScheme.length; i++) {\r\n        console.log('每个预案---' + i, tempFileScheme[i])\r\n        if ('fileList' in tempFileScheme[i] && tempFileScheme[i].fileList?.length > 0) {\r\n          for (let j = 0; j < tempFileScheme[i].fileList.length; j++) {\r\n            let parmas = {\r\n              f8s: [tempFileScheme[i].fileList[j].fileToken],\r\n            }\r\n            await api.getFileByToken(parmas).then((res) => {\r\n              console.log('根据文件token获取文件', res)\r\n\r\n              tempFileScheme[i].fileList[j].url = res.data[0].link\r\n              // tempFileScheme[i].fileList[j].url =\r\n              //   'https://cn.bing.com/images/search?q=%E5%9B%BE%E7%89%87&FORM=IQFRBA&id=49E031AAC7715C25D8E03215367A7B4A50E14354'\r\n              tempFileScheme[i].fileList[j].uid = tempFileScheme[i].fileList[j].id\r\n              tempFileScheme[i].fileList[j].fileToken = tempFileScheme[i].fileList[j].fileToken\r\n              tempFileScheme[i].fileList[j].name = tempFileScheme[i].fileList[j].fileName\r\n              // console.log('tempFileScheme[i].fileList[j]: ', tempFileScheme[i].fileList[j])\r\n            })\r\n          }\r\n        } else {\r\n        }\r\n      }\r\n      console.log('处理后的文件数据', tempFileScheme)\r\n      // this.fileList = tempFileScheme[0]?.fileList ? tempFileScheme[0].fileList : []\r\n      this.fileList = tempFileScheme\r\n      // 查看预案loading状态消失\r\n      this.loadingIsShow = false\r\n\r\n      let defectFromDic = this.$store.state[ENUM].defectFrom\r\n    },\r\n  },\r\n}\r\n</script>\r\n\r\n<style scoped lang=\"less\">\r\n::-webkit-scrollbar {\r\n  display: none;\r\n  /* Chrome Safari */\r\n}\r\n\r\n// loading加载状态\r\n/deep/.fm-loading {\r\n  margin-top: 150px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\n/deep/.mapboxgl-popup-content {\r\n  display: flex;\r\n  justify-content: center;\r\n  box-shadow: 0 0 transparent;\r\n  background: transparent;\r\n  padding: 0;\r\n\r\n  height: 186px;\r\n}\r\n\r\n// 去除mapbox弹窗下的三角形\r\n/deep/.mapboxgl-popup-tip {\r\n  display: none;\r\n}\r\n\r\n// 查看预案开始----------------------\r\n/deep/.fm-popup--bottom {\r\n  bottom: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 40%;\r\n  background-color: #ffffff;\r\n}\r\n\r\n/deep/.fm-action-sheet__close {\r\n  display: none;\r\n}\r\n\r\n.planContent {\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: flex-start;\r\n  align-items: center;\r\n  height: 97%;\r\n  overflow-y: scroll;\r\n  padding: 16px 16px 0; // 适应卡片margin-bottom布局\r\n  background-color: #f5f7f9;\r\n\r\n  .littlePlan {\r\n    width: 690px;\r\n    height: 304px;\r\n    min-height: 340px;\r\n    background: #ffffff;\r\n    border-radius: 16px;\r\n    margin-bottom: 16px;\r\n\r\n    .topSide {\r\n      position: relative;\r\n      display: flex;\r\n      align-items: center;\r\n      // padding-left: 30px;\r\n      width: 100%;\r\n      height: 20%;\r\n      font-size: 36px;\r\n      font-family: PingFangSC-Semibold, PingFang SC;\r\n      font-weight: 600;\r\n      color: #191919;\r\n      // background-color: rgb(83, 255, 103);\r\n\r\n      .imgPosition {\r\n        position: absolute;\r\n        width: 6px;\r\n        top: 14px;\r\n        left: 0;\r\n      }\r\n\r\n      span {\r\n        padding-left: 30px;\r\n        width: 100%;\r\n        white-space: nowrap;\r\n        overflow: hidden;\r\n        text-overflow: ellipsis;\r\n      }\r\n    }\r\n\r\n    .centerSide {\r\n      display: flex;\r\n      align-items: center;\r\n      // padding-left: 30px;\r\n      width: 100%;\r\n      height: 25%;\r\n      font-size: 32px;\r\n      font-family: PingFangSC-Regular, PingFang SC;\r\n      font-weight: 400;\r\n      color: #333333;\r\n      // background-color: rgb(255, 83, 186);\r\n\r\n      span {\r\n        padding-left: 30px;\r\n        width: 100%;\r\n        white-space: nowrap;\r\n        overflow: hidden;\r\n        text-overflow: ellipsis;\r\n      }\r\n    }\r\n\r\n    .bottomSide {\r\n      display: flex;\r\n      align-items: center;\r\n      // padding-left: 30px;\r\n      width: 100%;\r\n      height: 55%;\r\n      // background-color: rgb(48, 230, 208);\r\n\r\n      .innerDiv {\r\n        display: flex;\r\n        align-items: center;\r\n        margin: 0 30px;\r\n        width: calc(100% - 60px);\r\n        height: 100%;\r\n        white-space: nowrap;\r\n        overflow-x: overlay;\r\n\r\n        // background-color: rgb(238, 97, 97);\r\n        .fileCard {\r\n          width: 120px;\r\n          height: 180px;\r\n          // background-color: rgb(53, 165, 43);\r\n          display: flex;\r\n          flex-direction: column;\r\n          justify-content: space-around;\r\n          align-items: center;\r\n          font-size: 26px;\r\n          font-family: PingFangSC-Regular, PingFang SC;\r\n          font-weight: 400;\r\n          color: #333333;\r\n          border-radius: 12px;\r\n\r\n          img {\r\n            width: 120px;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// 查看预案结束----------------------\r\n.DispatchCenter {\r\n  width: 100%;\r\n  height: 100%;\r\n\r\n  /deep/ .fm-hairline--bottom::after {\r\n    display: none;\r\n  }\r\n\r\n  // background-color: rgb(255, 150, 150);\r\n  .top {\r\n    width: 100%;\r\n    height: 70px;\r\n    padding: 12px 0;\r\n    position: relative;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n\r\n    .top-title {\r\n      width: 400px;\r\n      height: 64px;\r\n      background: #f5f5f5;\r\n      border-radius: 36px;\r\n      display: flex;\r\n      align-items: center;\r\n      padding: 4px;\r\n\r\n      span {\r\n        width: 50%;\r\n        height: 100%;\r\n        font-size: 28px;\r\n        font-family: PingFangSC-Regular, PingFang SC;\r\n        font-weight: 400;\r\n        color: #555555;\r\n        line-height: 40px;\r\n        border-radius: 36px;\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n      }\r\n\r\n      .active {\r\n        background: #1b67d8;\r\n        box-shadow: 0px 8px 16px 0px rgba(104, 115, 127, 0.06);\r\n        font-weight: 500;\r\n        color: #ffffff;\r\n      }\r\n    }\r\n  }\r\n\r\n  .scroll {\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 100%;\r\n    height: 88px;\r\n    overflow-x: visible;\r\n\r\n    .scrollBar {\r\n      display: flex;\r\n      justify-content: flex-start;\r\n      width: 100%;\r\n      height: 88px;\r\n      overflow-x: overlay;\r\n      box-shadow: 0px 2px 20px 0px rgba(104, 115, 127, 0.07);\r\n      background-color: rgb(255, 255, 255);\r\n      display: flex;\r\n      flex-direction: row;\r\n\r\n      .itemCard {\r\n        position: relative;\r\n        width: 150px;\r\n        min-width: 150px;\r\n        height: 100%;\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n\r\n        // background-color: rgb(136, 236, 141);\r\n        img {\r\n          width: 32px;\r\n        }\r\n\r\n        .littleText {\r\n          padding-left: 8px;\r\n          font-size: 28px;\r\n          font-family: PingFangSC-Regular, PingFang SC;\r\n          font-weight: 400;\r\n          color: #555555;\r\n        }\r\n\r\n        .redPoint {\r\n          position: absolute;\r\n          top: 6px;\r\n          right: 6px;\r\n          width: 12px;\r\n          height: 12px;\r\n          background: #ff4b4b;\r\n          border-radius: 16px;\r\n          border: 1px solid #f7f7f7;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  .mapContainer {\r\n    height: calc(100% - 295px);\r\n    width: 100%;\r\n    // background-color: rgb(97, 40, 255);\r\n  }\r\n\r\n  /deep/.fm-search {\r\n    width: 100%;\r\n    padding: 20px 36px;\r\n    background-color: #ffffff;\r\n  }\r\n\r\n  /deep/.fm-search__content {\r\n    background-color: #f7f6f9;\r\n    box-shadow: 0 0.10667rem 0.26667rem 0 rgb(104 115 127 / 20%);\r\n    border-radius: 0.21333rem;\r\n    height: 72px;\r\n  }\r\n}\r\n</style>\r\n"]}]}