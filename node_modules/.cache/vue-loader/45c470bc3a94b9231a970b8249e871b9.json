{"remainingRequest":"D:\\Code\\Project\\WL\\xasw-mobile\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Code\\Project\\WL\\xasw-mobile\\src\\views\\inspectionManage\\daily-task.vue?vue&type=script&lang=js","dependencies":[{"path":"D:\\Code\\Project\\WL\\xasw-mobile\\src\\views\\inspectionManage\\daily-task.vue","mtime":1708928163428},{"path":"D:\\Code\\Project\\WL\\xasw-mobile\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Code\\Project\\WL\\xasw-mobile\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"D:\\Code\\Project\\WL\\xasw-mobile\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Code\\Project\\WL\\xasw-mobile\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["daily-task.vue"],"names":[],"mappings":";AAgfile":"daily-task.vue","sourceRoot":"src/views/inspectionManage","sourcesContent":["<template>\r\n  <div class=\"task-map full-width\">\r\n    <!-- 导航栏 -->\r\n    <div class=\"navbar-box\">\r\n      <fm-nav-bar :title=\"navbarTitle\" left-arrow @click-left=\"clickBack\" @click-right=\"openPopup\">\r\n        <template #right>\r\n          <fm-popover :visible.sync=\"showPopover\" trigger=\"click\" :actions=\"actions\" @select=\"onSelect\"\r\n            placement=\"bottom-end\">\r\n            <template #reference>\r\n              <img style=\"width: 34px\" v-if=\"!isView\" :src=\"require('@/assets/img/inspection/增加.png')\" />\r\n            </template>\r\n          </fm-popover>\r\n        </template>\r\n      </fm-nav-bar>\r\n    </div>\r\n    <!-- 地图 -->\r\n    <MapComp ref=\"mymap\" :ifInspection=\"true\" @mapLoaded=\"mapLoaded\" :legendConfig=\"legendConfig\"></MapComp>\r\n    <!-- <fm-popup\r\n      :visible.sync=\"pointListShow\"\r\n      close-on-click-modal\r\n      :close-on-popstate=\"true\"\r\n      position=\"bottom\"\r\n      safe-area-inset-bottom\r\n    >\r\n      <fm-tabs type=\"card\" style=\"padding-top: 20px\">\r\n        <fm-tab label=\"未上报关键点\">\r\n          <fm-empty v-if=\"keyDetailList.length <= 0\" description=\"暂无数据\" mode=\"list\"></fm-empty>\r\n        </fm-tab>\r\n        <fm-tab label=\"已上报关键点\">\r\n          <fm-empty v-if=\"keyDetailList.length <= 0\" description=\"暂无数据\" mode=\"list\"></fm-empty>\r\n        </fm-tab>\r\n      </fm-tabs>\r\n    </fm-popup> -->\r\n    <!-- 开始记录与结束记录 -->\r\n    <div class=\"start-record\" v-show=\"!isView\">\r\n      <img v-if=\"!ifRecording\" :src=\"require('@/assets/img/inspection/暂停.png')\" @click=\"startInspRecord\" />\r\n      <img v-else :src=\"require('@/assets/img/inspection/开始.png')\" @click=\"endRecord('pause')\" />\r\n    </div>\r\n    <!-- 数据面板 -->\r\n    <div class=\"controlCard\" v-show=\"!isView\">\r\n      <div class=\"controlContent\">\r\n        <div class=\"infoContent\">\r\n          <div class=\"endControl\">\r\n            <div class=\"leftText\">\r\n              <img :src=\"require('@/assets/img/inspection/剩余时间.png')\" />\r\n              <fm-count-down style=\"margin: auto\" :time=\"getRestTime(taskDetail.taskEndTime)\" format=\"DD天HH小时\" />\r\n            </div>\r\n            <div class=\"rightButton\">\r\n              <fm-button v-show=\"ifRecording\" class=\"endBtn\" round @click=\"endTask\">结束</fm-button>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"bottomSide\">\r\n            <div class=\"block\">\r\n              <div class=\"rate\" style=\"font-size: 18px\">\r\n                <div class=\"centerStyle\">\r\n                  {{ changeToRate(taskDetail.coverage) }}\r\n                </div>\r\n              </div>\r\n              <div class=\"name\" style=\"font-size: 14px\">覆盖率</div>\r\n            </div>\r\n\r\n            <div class=\"block\" @click=\"openKeyPointList\" style=\"cursor: pointer;\">\r\n              <div class=\"rate\">\r\n                <div class=\"centerStyle\">\r\n                  <div class=\"inspKp\" style=\"font-size: 19px\">\r\n                    {{ changeToInspCount(taskDetail.reportRate) }}\r\n                  </div>\r\n                  <div class=\"uninspKp\" style=\"font-size: 14px\">\r\n                    /{{ changeToAllInspCount(taskDetail.reportRate) }}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"name\" style=\"font-size: 14px\">关键点</div>\r\n            </div>\r\n\r\n            <div class=\"block\" @click=\"reportClick\" style=\"cursor: pointer;\">\r\n              <div class=\"rate\" style=\"font-size: 18px\">\r\n                <div class=\"centerStyle\">\r\n                  {{ problemDataList1.length + problemDataList2.length }}\r\n                </div>\r\n              </div>\r\n              <div class=\"name\" style=\"font-size: 14px\">上报</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"viewCard\" v-show=\"isView\">\r\n      <div class=\"controlContent\">\r\n        <div class=\"infoContent\">\r\n          <div class=\"bottomSide\">\r\n            <div class=\"block\">\r\n              <div class=\"rate\" style=\"font-size: 18px\">\r\n                <div class=\"centerStyle\">\r\n                  {{ changeToRate(taskDetail.coverage) }}\r\n                </div>\r\n              </div>\r\n              <div class=\"name\" style=\"font-size: 14px\">覆盖率</div>\r\n            </div>\r\n\r\n            <div class=\"block\" @click=\"openKeyPointList\" style=\"cursor: pointer;\">\r\n              <div class=\"rate\">\r\n                <div class=\"centerStyle\">\r\n                  <div class=\"inspKp\" style=\"font-size: 19px\">\r\n                    {{ changeToInspCount(taskDetail.reportRate) }}\r\n                  </div>\r\n                  <div class=\"uninspKp\" style=\"font-size: 14px\">\r\n                    /{{ changeToAllInspCount(taskDetail.reportRate) }}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"name\" style=\"font-size: 14px\">关键点</div>\r\n            </div>\r\n\r\n            <div class=\"block\" @click=\"reportClick\" style=\"cursor: pointer;\">\r\n              <div class=\"rate\" style=\"font-size: 18px\">\r\n                <div class=\"centerStyle\">\r\n                  {{ problemDataList1.length + problemDataList2.length }}\r\n                </div>\r\n              </div>\r\n              <div class=\"name\" style=\"font-size: 14px\">上报</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <!-- 轨迹显示与定位功能 -->\r\n    <div class=\"tool-box\">\r\n      <div class=\"location\" @click=\"startLocation\">\r\n        <fm-image class=\"location-image\" :src=\"require('@/assets/img/inspection/location.png')\"></fm-image>\r\n      </div>\r\n    </div>\r\n    <!-- 签到框 -->\r\n    <fm-popup :visible.sync=\"signShow\" :modal=\"false\" round position=\"bottom\"\r\n      :style=\"{ height: signForm.deviceStatus == '1' ? '60%' : '50%' }\">\r\n      <div class=\"popup-view\">\r\n        <fm-form ref=\"signForm\">\r\n          <div class=\"title\">\r\n            <img :src=\"require('@/assets/img/inspection/sideIcon.png')\" />\r\n            <div class=\"deviceId\">{{ deviceName }}</div>\r\n          </div>\r\n          <fm-field :name=\"signForm.deviceStatus\" error label=\"运行情况\" required>\r\n            <template #input>\r\n              <fm-radio-group v-model=\"signForm.deviceStatus\" :disabled=\"hasSignIn\" direction=\"horizontal\">\r\n                <fm-radio name=\"0\">正常</fm-radio>\r\n                <fm-radio name=\"1\">异常</fm-radio>\r\n              </fm-radio-group>\r\n            </template>\r\n          </fm-field>\r\n          <fm-field v-if=\"signForm.deviceStatus == '1'\" :disabled=\"hasSignIn\" label=\"是否上报\" required>\r\n          </fm-field>\r\n          <fm-field :name=\"signForm.isReport\" v-if=\"signForm.deviceStatus == '1'\">\r\n            <template #input>\r\n              <fm-radio-group v-model=\"signForm.isReport\" :disabled=\"hasSignIn\" direction=\"horizontal\">\r\n                <fm-radio v-for=\"(item, index) in reportChose\" :key=\"index\" :name=\"item.value\">{{ item.name }}\r\n                </fm-radio>\r\n              </fm-radio-group>\r\n            </template>\r\n          </fm-field>\r\n\r\n          <!--\r\n            { value: \"正常/异常\", label: \"正常/异常\" },\r\n            { value: \"开启/关闭\", label: \"开启/关闭\" },\r\n            { value: \"是/否\", label: \"是/否\" },\r\n            { value: \"数值\", label: \"数值\" },\r\n          -->\r\n          <!-- 巡检要点list，已巡检和未巡检要点从不同接口中获取 -->\r\n          <fm-field v-for=\"(item, index) in keyPointsInspectionList\" :key=\"item.id\" :label=\"item.mainPoint\" required>\r\n            <template #input>\r\n              <fm-radio-group v-if=\"item.inputType == '正常/异常' || item.ext1 == '正常/异常'\" v-model=\"item.mainValue\" :disabled=\"hasSignIn\">\r\n                <fm-radio name=\"正常\">正常</fm-radio>\r\n                <fm-radio name=\"异常\">异常</fm-radio>\r\n              </fm-radio-group>\r\n              <fm-radio-group v-if=\"item.inputType == '开启/关闭' || item.ext1 == '开启/关闭'\" v-model=\"item.mainValue\" :disabled=\"hasSignIn\">\r\n                <fm-radio name=\"开启\">开启</fm-radio>\r\n                <fm-radio name=\"关闭\">关闭</fm-radio>\r\n              </fm-radio-group>\r\n              <fm-radio-group v-if=\"item.inputType == '是/否' || item.ext1 == '是/否'\" v-model=\"item.mainValue\" :disabled=\"hasSignIn\">\r\n                <fm-radio name=\"是\">是</fm-radio>\r\n                <fm-radio name=\"否\">否</fm-radio>\r\n              </fm-radio-group>\r\n              <fm-field v-if=\"item.inputType == '数值' || item.ext1 == '数值'\" type=\"number\" v-model=\"item.mainValue\" :disabled=\"hasSignIn\" />\r\n            </template>\r\n          </fm-field>\r\n\r\n          <uploader v-model=\"attachment\" @fileChange=\"fileChange\" multiple :maxImagesCount=\"2\" :deletable=\"!hasSignIn\" :disabled=\"hasSignIn\"\r\n            type=\"image\" />\r\n          <fm-field v-if=\"waterLevelShow\" label=\"液位（米）\" type=\"number\" required name=\"liquidLevel\" placehold=\"请输入液位\" :disabled=\"hasSignIn\"\r\n            v-model=\"signForm.liquidLevel\">\r\n          </fm-field>\r\n          <fm-field label=\"备注\" name=\"remark\" type=\"textarea\" placehold=\"请输入\" :disabled=\"hasSignIn\"\r\n            v-model=\"signForm.remark\">\r\n          </fm-field>\r\n        </fm-form>\r\n      </div>\r\n      <div class=\"btnArea\" v-show=\"!hasSignIn\">\r\n        <fm-button class=\"btn1\" @click=\"onCancel\" round type=\"default\">取消</fm-button>\r\n        <fm-button class=\"btn2\" @click=\"onConfirm\" round type=\"primary\">提交</fm-button>\r\n      </div>\r\n      <div class=\"btnArea\" v-show=\"hasSignIn\">\r\n        <fm-button class=\"btn\" @click=\"onCancel\" round type=\"default\">关闭</fm-button>\r\n      </div>\r\n    </fm-popup>\r\n    <fm-popup :visible.sync=\"reportShow\" @close=\"handleClose\" round position=\"bottom\"\r\n      :overlay-style=\"{ background: 'rgba(0, 0, 0, 0.1)' }\" :style=\"{ height: '50%' }\">\r\n      <fm-tabs v-model=\"active\" swipeable style=\"height: 100%\">\r\n        <fm-tab label=\"问题上报\">\r\n          <div v-for=\"(item, index) in problemDataList1\" :key=\"index\">\r\n            <problemCardInfo type=\"001\" :cardInfo=\"item\" @toDetailPanel=\"toDetailPanel\" @flyToPoint=\"flyToPoint\">\r\n            </problemCardInfo>\r\n          </div>\r\n        </fm-tab>\r\n        <fm-tab label=\"设施缺陷\">\r\n          <div v-for=\"(item, index) in problemDataList2\" :key=\"index\">\r\n            <problemCardInfo type=\"002\" :cardInfo=\"item\" @toDetailPanel=\"toDetailPanel\" @flyToPoint=\"flyToPoint\">\r\n            </problemCardInfo>\r\n          </div>\r\n        </fm-tab>\r\n      </fm-tabs>\r\n    </fm-popup>\r\n\r\n    <!-- 提示层 -->\r\n    <div v-show=\"ifTips\" class=\"tip-tools\">\r\n      <img :src=\"require('@/assets/img/tips.png')\" class=\"tipImg\" />\r\n      <div class=\"context\">请在地图上选择设施或者点位</div>\r\n    </div>\r\n    <fm-overlay :show=\"ifEndTask\" z-index=\"10\">\r\n      <div class=\"confirm-tip\">\r\n        <div class=\"contentSelf\">\r\n          <div class=\"icon\">\r\n            <img :src=\"require('@/assets/img/inspection/终止.png')\" width=\"60\" style=\"margin: auto\" />\r\n          </div>\r\n          <div class=\"info\">\r\n            <span>{{ `您还有${changeToAllInspCount(taskDetail.reportRate) - changeToInspCount(taskDetail.reportRate)}个关键点未打卡，确定提前中止巡检任务？` }}</span>\r\n          </div>\r\n          <div class=\"input\">\r\n            <fm-field v-model=\"stopReason\" placeholder=\"请输入终止原因\" rows=\"3\" autosize type=\"textarea\" maxlength=\"200\" show-word-limit></fm-field>\r\n          </div>\r\n        </div>\r\n        <div class=\"confirm_btn\">\r\n          <div class=\"btn1 btn2\" @click=\"continueTask\">继续任务</div>\r\n          <div class=\"btn1\" @click=\"stopTask\">中止任务</div>\r\n        </div>\r\n      </div>\r\n    </fm-overlay>\r\n    <fm-overlay :show=\"ifLeaveTask\" z-index=\"10\">\r\n      <div class=\"confirm-tip\">\r\n        <div class=\"contentSelf\">\r\n          <div class=\"icon\">\r\n            <img :src=\"require('@/assets/img/inspection/终止.png')\" width=\"60\" style=\"margin: auto\" />\r\n          </div>\r\n          <div class=\"info\">\r\n            <span>{{ '当前为巡检状态，继续退出会暂停巡检，请确定是否退出?' }}</span>\r\n          </div>\r\n        </div>\r\n        <div class=\"confirm_btn\">\r\n          <div class=\"btn1 btn2\" @click=\"cancelLeave\">取消</div>\r\n          <div class=\"btn1\" @click=\"confirmLeave\">退出</div>\r\n        </div>\r\n      </div>\r\n    </fm-overlay>\r\n    <!-- 关键点列表 -->\r\n    <div class=\"content\" :class=\"showKeyList ? '' : 'inactive'\">\r\n      <div class=\"contentArea\">\r\n        <div style=\"overflow-x: scroll; height: 74px;\">\r\n          <div class=\"buttonArea\" :style=\"buttonAreaStyle\">\r\n            <fm-button\r\n              round\r\n              v-for=\"it of buttonList\"\r\n              :key=\"it\"\r\n              class=\"button\"\r\n              :style=\"currentSelect == it ? { 'color': '#1B67D8', 'background': '#DDE8F9' } : {}\"\r\n              @click=\"changeBizType(it)\"\r\n            >{{ it }}</fm-button>\r\n          </div>\r\n        </div>\r\n        <div class=\"listArea\">\r\n          <fm-list\r\n            v-model=\"loading\"\r\n            :finished=\"finished\"\r\n            finished-text=\"到底了\"\r\n          >\r\n            <div v-for=\"(it, idx) of unInspKeyDetailList\" :key=\"it.id\" class=\"list\">\r\n              <div class=\"list_num\">{{ idx + 1 }}</div>\r\n              <div class=\"list_type\">{{ it.deviceType || '' }}</div>\r\n              <div class=\"list_id\">{{ it.deviceId || '' }}</div>\r\n              <div class=\"list_deal\" @click=\"goToDeal(it)\">\r\n                定位\r\n                <img\r\n                  width=\"24\"\r\n                  height=\"24\"\r\n                  style=\"margin: auto 0 auto 4px;\"\r\n                  :src=\"require('@/assets/img/maintenance/deal.png')\"\r\n                />\r\n              </div>\r\n            </div>\r\n          </fm-list>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n<script>\r\nimport bus from '../../views/inspectMap/utils/Bus.js'\r\nimport axios from 'axios'\r\nimport dayjs from 'dayjs'\r\nimport MapComp from '../../views/inspectMap/index.vue'\r\nimport request from '@/utils/request'\r\nimport * as api from './api'\r\nimport { Toast, Dialog, Notify } from 'fawkes-mobile-lib'\r\nimport * as turf from '@turf/turf'\r\nimport Uploader from '@/components/upload/Uploader.vue'\r\nimport problemCardInfo from './problemCardInfo';\r\nimport API from \"@/common/config.js\";\r\nimport _cloneDeep from 'lodash/cloneDeep'\r\nconst mapObj = {\r\n  map: null,\r\n  mapInstance: null,\r\n}\r\nlet pauseStateTrackPoints = []\r\nlet pauseStatePipeIdList = []\r\nexport default {\r\n  name: 'daily-task',\r\n  components: {\r\n    MapComp,\r\n    Uploader,\r\n    problemCardInfo\r\n  },\r\n  data() {\r\n    return {\r\n      showKeyList: false,\r\n      buttonList: [],\r\n      unInspKeyDetailList: [],\r\n      loading: false,\r\n      finished: true,\r\n      currentSelect: '全部',\r\n      isResume: true,\r\n      ifLeaveTask: false,\r\n      stopReason: '',\r\n      ifEndTask: false,\r\n      legendConfig: [],\r\n      ifTips: false,\r\n      reportDataIsLoaded: false,\r\n      // 巡检任务下所有巡检管线\r\n      allTaskLines: [],\r\n      isView: true,\r\n      active: 0,\r\n      deviceName: '',\r\n      hasSignIn: false,\r\n      showPopover: false,\r\n      actions: [\r\n        {\r\n          text: '问题上报',\r\n        },\r\n        {\r\n          text: '设施缺陷',\r\n        },\r\n      ],\r\n      currentRate: 0,\r\n      // 控制关键点列表显隐\r\n      pointListShow: false,\r\n      // 全局发声函数\r\n      // 记录开始巡检的时间，用于判断是否在开始巡检的10s内\r\n      startRecordTimer: '',\r\n      navbarTitle: '日常任务',\r\n      // 上报失败的巡检轨迹点位数组\r\n      reportFailTrackPoints: [],\r\n      isShowRoute: true,\r\n      inspBusinessType: '',\r\n      recordData: [],\r\n      // 当前巡检员所处位置\r\n      currentPosition: null,\r\n      lines: [],\r\n      // 巡检员信息\r\n      userInfo: {},\r\n      ifRecording: false,\r\n      selectEventType: false,\r\n      eventTypeList: [],\r\n      signShow: false,\r\n      attachment: '',\r\n      signForm: {\r\n        deviceStatus: '1',\r\n        inspImagesList: [],\r\n        remark: '',\r\n        isReport: '',\r\n        taskId: '',\r\n        pointId: '',\r\n        liquidLevel: '',\r\n      },\r\n      taskDetail: {\r\n        coverage: '0/0',\r\n        reportRate: '0/0',\r\n        planEndTime: '',\r\n      },\r\n      engInfoDTO: {},\r\n      taskRestTime: 0,\r\n      reportFooterShow: false,\r\n      feature: {},\r\n      planDetail: {},\r\n      // 用于地图中显示范围和关键点\r\n      inspRangeList: [],\r\n      rangeList: [],\r\n      keyDetailList: [],\r\n      isRunList: [\r\n        {\r\n          name: '正常',\r\n          value: '1',\r\n        },\r\n        {\r\n          name: '异常',\r\n          value: '0',\r\n        },\r\n      ],\r\n      reportChose: [\r\n        {\r\n          name: '问题上报',\r\n          value: '问题上报',\r\n        },\r\n        {\r\n          name: '新增缺陷',\r\n          value: '新增缺陷',\r\n        },\r\n        {\r\n          name: '无需上报',\r\n          value: '无需上报',\r\n        },\r\n      ],\r\n      rules: {\r\n      },\r\n      previewURL: '/sys-storage/download_image?f8s=',\r\n      upimgPreview: [],\r\n      headers: {},\r\n      url: {\r\n        // 本页面使用到的url\r\n        uploadFile: 'sys-storage/upload',\r\n        findFile: 'ecidi-cmp/file/cmpFileGroup/findFilesByGroupId',\r\n      },\r\n      pollingFlag: false,\r\n      pollingGapTime: 3,\r\n      trackPointList: [],\r\n      trackPointTimeList: [],\r\n      overSpeedTrackLineList: [],\r\n      trackLocation_start: '',\r\n      trackLocation_end: '',\r\n      showVisible: false,\r\n      reportShow: false, // 问题上报面板显示\r\n      accessToken: this.$storage.get('access_token'),\r\n      header: {},\r\n      formToken: '',\r\n      // 问题上报list\r\n      problemDataList1: [],\r\n      // 设施缺陷list\r\n      problemDataList2: [],\r\n      // 液位输入框是否显示\r\n      waterLevelShow: false,\r\n      // 巡检要点list数据\r\n      keyPointsInspectionList: [],\r\n    }\r\n  },\r\n  computed: {\r\n    buttonAreaStyle() {\r\n      return {\r\n        '--width': this.buttonList.length * (80 + 10) + 'px',\r\n      }\r\n    },\r\n  },\r\n  created() {\r\n    // 获取问题上报和设施缺陷数据\r\n    this.getCardListData()\r\n  },\r\n  mounted() {\r\n    document.addEventListener(\"pause\", this.pause, false)\r\n    document.addEventListener(\"resume\", this.resume, false)\r\n    this.userInfo = this.$store.state.userInfo\r\n    console.log('this.userInfo: ', this.userInfo);\r\n    this.isStart = false\r\n    localStorage.setItem('startRecordLines', 'end')\r\n    this.navbarTitle = '日常任务'\r\n    let that = this\r\n    bus.$off('startSignIn').$on('startSignIn', (feature) => {\r\n      that.startSignIn(feature)\r\n    })\r\n    this.isView = this.$route.query.isView\r\n    const id = this.$route.query.taskId\r\n    this.getTaskById(id)\r\n    this.getTrackRecordsById(id)\r\n  },\r\n  methods: {\r\n    openKeyPointList() {\r\n      this.showKeyList = true\r\n    },\r\n    goToDeal(obj) {\r\n      if (obj.startLongitude && obj.startLatitude) {\r\n        this.flyToPoint([obj.startLongitude, obj.startLatitude])\r\n      } else {\r\n        Toast.warning({\r\n          message: '当前设施无地理坐标信息',\r\n          duration: 2000\r\n        })\r\n        return\r\n      }\r\n    },\r\n    changeBizType(type) {\r\n      this.currentSelect = type\r\n      this.unInspKeyDetailList = []\r\n      if (type == '全部') {\r\n        this.unInspKeyDetailList = this.keyDetailList.filter(it => !it.deviceStatus)\r\n      } else {\r\n        this.unInspKeyDetailList = this.keyDetailList.filter(it => !it.deviceStatus && it.bizType == type)\r\n      }\r\n    },\r\n    // 获取问题上报和设施缺陷数据\r\n    getCardListData() {\r\n      // 获取header，查询工单用\r\n      axios({\r\n        url: process.env.VUE_APP_THIRD_REQUEST_URL + '/main/userCenterApi/sso/tokenByToken',\r\n        method: 'post',\r\n        params: {\r\n          token: this.accessToken,\r\n        },\r\n        headers: {\r\n          Authorization: 'Basic b3V0d29yazp3cGcyMDIw',\r\n        },\r\n      }).then((res) => {\r\n        if (res.status == 200) {\r\n          this.formToken = res.data.resultData.token\r\n          this.header = {\r\n            'Content-Type': 'application/json',\r\n            Authorization: 'Bearer ' + this.formToken,\r\n          }\r\n        }\r\n      })\r\n    },\r\n    async getProblemDataList(params) {\r\n      this.problemDataList1 = []\r\n      this.problemDataList2 = []\r\n\r\n      let commonParams = Object.assign({\r\n        sysCode: 'outwork',\r\n        // token: this.accessToken,\r\n        page: {\r\n          current: 1,\r\n          size: 99999, // 查全部\r\n        }\r\n      }, params)\r\n      // 问题上报\r\n      let params1 = {\r\n        ...commonParams,\r\n        smallType: 'abnormal_inform'\r\n      }\r\n      // 设施缺陷\r\n      let params2 = {\r\n        ...commonParams,\r\n        smallType: 'defect'\r\n      }\r\n      let problemPointFeatures = []\r\n      // 问题上报\r\n      await this.getAxiosData(params1, this.problemDataList1)\r\n      // 设施缺陷\r\n      await this.getAxiosData(params2, this.problemDataList2)\r\n      let allProblem = this.problemDataList1.concat(this.problemDataList2)\r\n      allProblem.forEach(it => {\r\n        problemPointFeatures.push({\r\n          type: 'Feature',\r\n          geometry: {\r\n            type: 'Point',\r\n            coordinates: it.lnglat\r\n          },\r\n          properties: {\r\n            id: it.id,\r\n            title: it.title\r\n          }\r\n        })\r\n      })\r\n      this.$refs.mymap.addInspEventLayer(problemPointFeatures)\r\n      this.reportDataIsLoaded = true\r\n    },\r\n    getAxiosData(params, problemDataList) {\r\n      return new Promise((resolve, reject) => {\r\n        axios({\r\n          url: process.env.VUE_APP_THIRD_REQUEST_URL + '/main/outworkapi/ticketStatisticClient/getTicketList',\r\n          method: 'post',\r\n          data: params,\r\n          headers: this.header,\r\n        }).then((res) => {\r\n          if (res.status == 200) {\r\n            res.data.resultData.records.forEach((item) => {\r\n              console.log('item: ', item);\r\n              problemDataList.push({\r\n                id: item.id, // 工单ID\r\n                title: item.title, // 工单标题\r\n                ticketStatusName: item.ticketStatusName,\r\n                handleType: item.formValue.handleType, // 描述\r\n                createByName: item.createByName, // 创建人\r\n                createTime: item.createTime.substring(0, 10), // 创建时间\r\n                defectFrom: item.formValue.defectFrom,\r\n                faultTypes: item.formValue.detail?.defectType || item.formValue.faultTypes,\r\n                // fileUrl: item.formValue?.handleImgs?.[0]?.fileUrl,\r\n                // 图片地址\r\n                url: item.formValue?.files?.[0]?.url,\r\n                // 发生经纬度\r\n                lnglat: [item.appealLng, item.appealLat] || [item.formValue.deviceDetail.longitude, item.formValue.deviceDetail.latitude],\r\n                // deviceType: item.formValue?.deviceType || [],\r\n                deviceType: item.formValue?.deviceType || item.formValue?.device_type || [],\r\n                questionDescribe: item.formValue.questionDescribe,\r\n              })\r\n            })\r\n            resolve()\r\n          }\r\n          // problemDataList.forEach((item) => {\r\n          //   // console.log('图片地址', item.url)\r\n          // })\r\n        })\r\n      })\r\n    },\r\n    // 问题上报点击标题、设施缺陷点击卡片进入详情页  \r\n    toDetailPanel(cardDetail) {\r\n      this.$router.push({\r\n        name: 'detailProblemOrder',\r\n        query: { id: cardDetail.id }\r\n      })\r\n    },\r\n    // 卡片定位\r\n    flyToPoint(lnglat) {\r\n      mapObj.map.flyTo({ center: lnglat, zoom: 17.5 })\r\n    },\r\n    // 上报\r\n    reportClick() {\r\n      if (this.reportDataIsLoaded) {\r\n        this.reportShow = true\r\n        mapObj.map.setLayoutProperty('eventPointsLayer', 'visibility', 'visible')\r\n      } else {\r\n        Toast.loading({\r\n          message: '上报数据加载中。。。',\r\n          loadingType: 'spinner',\r\n          duration: 1500\r\n        })\r\n        return\r\n      }\r\n    },\r\n    handleClose() {\r\n      mapObj.map.setLayoutProperty('eventPointsLayer', 'visibility', 'none')\r\n    },\r\n    fileChange(file) {\r\n      this.signForm.inspImagesList = []\r\n      if (file.fileList.length == 0) {\r\n        this.attachment = ''\r\n      }\r\n      file.fileList.forEach(it => {\r\n        this.signForm.inspImagesList.push(\r\n          {\r\n            fileId: it.response.groupToken,\r\n            imagesName: it.url\r\n          }\r\n        )\r\n      })\r\n      console.log(this.signForm)\r\n    },\r\n    continueTask() {\r\n      this.stopReason = ''\r\n      this.ifEndTask = false\r\n    },\r\n    stopTask() {\r\n      if (this.stopReason == '') {\r\n        Toast.warning({\r\n          message: '请输入终止原因',\r\n          duration: 1500\r\n        })\r\n        return\r\n      }\r\n      this.ifEndTask = false\r\n      this.endRecordConfirm('end')\r\n    },\r\n    async endTask() {\r\n      if (this.isView) {\r\n        Toast({\r\n          message: '该巡检任务已结束',\r\n          duration: 1500\r\n        })\r\n        return\r\n      }\r\n      // bus.$off('updateData')\r\n      await this.getTaskById(this.$route.query.taskId)\r\n      let hasInspKp = this.changeToInspCount(this.taskDetail.reportRate)\r\n      let allInspKp = this.changeToAllInspCount(this.taskDetail.reportRate)\r\n      if ((allInspKp - hasInspKp == 0) && this.changeToRate(this.taskDetail.coverage) == '100%') {\r\n        this.endRecordConfirm('end')\r\n      } else {\r\n        this.ifEndTask = true\r\n      }\r\n    },\r\n    openPopup() {\r\n      if (this.isView) {\r\n        return\r\n      }\r\n      this.showPopover = true\r\n    },\r\n    onSelect(val) {\r\n      if (this.isView) {\r\n        Toast({\r\n          message: '该巡检任务已结束',\r\n          duration: '1500'\r\n        })\r\n        return\r\n      }\r\n      this.ifTips = true\r\n      mapObj.map.off('click', 'keypointsLayer', this.$refs.mymap.signInBuffer)\r\n      val.text == '问题上报' ? mapObj.map.on('click', this.selectReportPoint) : mapObj.map.on('click', this.selectFlawPoint)\r\n    },\r\n    selectReportPoint(e) {\r\n      let features = mapObj.map.queryRenderedFeatures(e.point)\r\n      if (this.ifTips) {\r\n        this.ifTips = false\r\n      }\r\n      if (features.length > 0) {\r\n        if (\r\n          features[0].source != \"inspUser\"\r\n          // && features[0].source != \"initInspLineSource\" \r\n          && features[0].source != \"keypoints\"\r\n          && (features[0].geometry.type === \"Point\")\r\n        ) {\r\n          this.$refs.mymap.addEventObjMarker(features[0], 'device', 'event', { gridId: this.planDetail.gridId, gridName: this.planDetail.gridName, gridManager: { fullName: this.planDetail.gridManager, username: this.planDetail.userName, userId: this.planDetail.userId } });\r\n        } else if (features.length > 1\r\n          && features[1].source != \"eventPoints\"\r\n          && features[1].source != \"inspUser\"\r\n          && features[1].source != \"keypoints\"\r\n          && (features[1].geometry.type === \"Point\")\r\n        ) {\r\n          this.$refs.mymap.addEventObjMarker(features[1], 'device', 'event', { gridId: this.planDetail.gridId, gridName: this.planDetail.gridName, gridManager: { fullName: this.planDetail.gridManager, username: this.planDetail.userName, userId: this.planDetail.userId } });\r\n        }\r\n      } else {\r\n        this.$refs.mymap.addEventObjMarker(e.lngLat, 'lnglat', 'event', { gridId: this.planDetail.gridId, gridName: this.planDetail.gridName, gridManager: { fullName: this.planDetail.gridManager, username: this.planDetail.userName, userId: this.planDetail.userId } });\r\n      }\r\n      mapObj.map.on('click', 'keypointsLayer', this.$refs.mymap.signInBuffer)\r\n      mapObj.map.off('click', this.selectReportPoint)\r\n    },\r\n    selectFlawPoint(e) {\r\n      let features = mapObj.map.queryRenderedFeatures(e.point)\r\n      if (this.ifTips) {\r\n        this.ifTips = false\r\n      }\r\n      if (features.length > 0) {\r\n        if (\r\n          features[0].source != \"eventPoints\"\r\n          && features[0].source != \"inspUser\"\r\n          // && features[0].source != \"initInspLineSource\" \r\n          && features[0].source != \"keypoints\"\r\n          && (features[0].geometry.type === \"Point\")\r\n        ) {\r\n          this.$refs.mymap.addEventObjMarker(features[0], 'device', 'flaw', { gridId: this.planDetail.gridId, gridName: this.planDetail.gridName });\r\n        } else if (features.length > 1\r\n          && features[1].source != \"eventPoints\"\r\n          && features[1].source != \"inspUser\"\r\n          && features[1].source != \"keypoints\"\r\n          && (features[1].geometry.type === \"Point\")\r\n        ) {\r\n          this.$refs.mymap.addEventObjMarker(features[1], 'device', 'flaw', { gridId: this.planDetail.gridId, gridName: this.planDetail.gridName });\r\n        }\r\n      } else {\r\n        this.$refs.mymap.addEventObjMarker(e.lngLat, 'lnglat', 'flaw', { gridId: this.planDetail.gridId, gridName: this.planDetail.gridName });\r\n      }\r\n      mapObj.map.on('click', 'keypointsLayer', this.$refs.mymap.signInBuffer)\r\n      mapObj.map.off('click', this.selectFlawPoint)\r\n    },\r\n    getRestTime(time) {\r\n      return time ? new Date(time).getTime() - new Date().getTime() : 0\r\n    },\r\n    changeToInspCount(reportRate) {\r\n      if (reportRate.includes('/')) {\r\n        return Number(reportRate.split('/')[0])\r\n      } else {\r\n        return 0\r\n      }\r\n    },\r\n    changeToAllInspCount(reportRate) {\r\n      if (reportRate.includes('/')) {\r\n        return Number(reportRate.split('/')[1])\r\n      } else {\r\n        return 0\r\n      }\r\n    },\r\n    changeToRate(coverage) {\r\n      if (coverage.includes('/')) {\r\n        let insp = Number(coverage.split('/')[0])\r\n        let uninsp = Number(coverage.split('/')[1])\r\n        if (uninsp) {\r\n          return ((insp / uninsp) * 100).toFixed(2) + '%'\r\n        } else {\r\n          return '0%'\r\n        }\r\n      } else {\r\n        return '0%'\r\n      }\r\n    },\r\n    mapLoaded(mapInstance) {\r\n      console.log('mapLoadedddddddd')\r\n      let that = this\r\n      mapObj.mapInstance = mapInstance\r\n      mapObj.map = mapInstance.map\r\n      // 巡检模拟\r\n      // mapObj.map.on('click', e => {\r\n      //   if (that.trackPointList.length == 0) {\r\n      //     that.trackPointList.push([e.lngLat.lng, e.lngLat.lat])\r\n      //   } else {\r\n      //     that.drawInspLine({ longitude: e.lngLat.lng, latitude: e.lngLat.lat, locTime: that.$dayjs().format('YYYY-MM-DD HH:mm:ss'), locType: 'GPS' })\r\n      //   }\r\n      // })\r\n      mapObj.map.on('click', () => {\r\n        this.showKeyList = false\r\n      })\r\n      this.addMapImg()\r\n      if (typeof yuanchu != 'undefined') {\r\n        yuanchu.locationAMap.requestSingleLocation(\r\n          ['1'],\r\n          (res) => {\r\n            that.currentPosition = JSON.parse(JSON.stringify(res))\r\n            const param = {\r\n              ...that.currentPosition,\r\n            }\r\n            this.$refs.mymap.setInspUserPosition(param)\r\n          },\r\n          (err) => {\r\n            console.log('err=', err)\r\n          }\r\n        )\r\n      }\r\n      // // 巡检模拟\r\n      // mapObj.map.on('click', e => {\r\n      //   that.currentPosition = {\r\n      //     longitude: e.lngLat.lng,\r\n      //     latitude: e.lngLat.lat,\r\n      //     locTime: that.$dayjs().format('YYYY-MM-DD HH:mm:ss'),\r\n      //     locType: 'GPS',\r\n      //   }\r\n      //   const param = {\r\n      //     ...that.currentPosition,\r\n      //   }\r\n      //   this.$refs.mymap.setInspUserPosition(param)\r\n      //   // if (that.trackPointList.length == 0) {\r\n      //   //   that.trackPointList.push([e.lngLat.lng, e.lngLat.lat])\r\n      //   // } else {\r\n      //   //   that.drawInspLine({ longitude: e.lngLat.lng, latitude: e.lngLat.lat, locTime: that.$dayjs().format('YYYY-MM-DD HH:mm:ss'), locType: 'GPS' })\r\n      //   // }\r\n      // })\r\n    },\r\n    // 刷新任务\r\n    refreshTask() {\r\n      const id = this.$route.query.taskId\r\n      this.getTaskById(id, 'refresh')\r\n    },\r\n    async getTrackRecordsById(id) {\r\n      const res = await request({\r\n        url: '/xasw-pipe-operation/inspTask/track',\r\n        method: 'get',\r\n        params: { id, pageNum: 1, pageSize: 9999 },\r\n      })\r\n      if (res && res.status) {\r\n        console.log(res)\r\n      }\r\n    },\r\n    // 根据任务id获取巡检状况\r\n    async getTaskById(id, type = null) {\r\n      let toast = Toast.loading({\r\n        message: '地图加载中...',\r\n        loadingType: 'spinner',\r\n        duration: 0,\r\n        forbidClick: true\r\n      })\r\n      // 处理已巡检管线的接口\r\n      const recordLines = await api.recordedPipeLine({\r\n        taskId: id,\r\n        page: 1,\r\n        size: 9999\r\n      })\r\n      this.lines = []\r\n      if (recordLines.status) {\r\n        this.lines = recordLines.data.records.map((item) => item.pipeId)\r\n      }\r\n      const res = await request({\r\n        url: '/xasw-pipe-operation/inspTask/getById',\r\n        method: 'get',\r\n        params: { id, bizScope: this.$route.query.taskType }\r\n      })\r\n      if (res && res.status) {\r\n        this.taskDetail = res.data.inspTask\r\n        this.planDetail = res.data.inspPlan\r\n        this.buttonList = ['全部'].concat(this.planDetail.bizType.split(','))\r\n        this.inspRangeList = res.data.detailList.map((range) => {\r\n          return {\r\n            taskId: id,\r\n            ...range,\r\n          }\r\n        })\r\n        setTimeout(() => {\r\n          this.legendConfig = [\r\n            {\r\n              label: '污水',\r\n              clickFlag: this.planDetail.bizType.includes('污水') ? true : false\r\n            },\r\n            {\r\n              label: '雨水',\r\n              clickFlag: this.planDetail.bizType.includes('雨水') ? true : false\r\n            },\r\n            {\r\n              label: '供水',\r\n              clickFlag: this.planDetail.bizType.includes('供水') ? true : false\r\n            },\r\n            {\r\n              label: '再生水',\r\n              clickFlag: this.planDetail.bizType.includes('再生水') ? true : false\r\n            }\r\n          ];\r\n        }, 5000)\r\n        // 修改未巡检(0)任务状态至巡检中(1)\r\n        if (this.$route.query.isNew && this.taskDetail.taskStatus != 1) {\r\n          this.startOrEndTaskRecord(1)\r\n        }\r\n        if (type != 'refresh') {\r\n          const allTaskLines = await api.getAllTaskLines({\r\n            devType: '管线',\r\n            gridId: this.planDetail.gridId,\r\n            pageNum: 1,\r\n            pageSize: 999999,\r\n            bizScope: this.$route.query.taskType,\r\n            bizType: this.planDetail.bizType\r\n          })\r\n          if (allTaskLines.status) {\r\n            this.allTaskLines = []\r\n            allTaskLines.data.list.forEach(item => {\r\n              this.allTaskLines.push({\r\n                type: 'Feature',\r\n                id: item.id,\r\n                geometry: JSON.parse(item.geom),\r\n                properties: {\r\n                  id: item.id,\r\n                  length: item['length'],\r\n                  bizType: item.bizType\r\n                }\r\n              })\r\n            })\r\n            this.$refs.mymap.setAllInspLineSource(this.allTaskLines)\r\n          }\r\n        }\r\n        const kpRes = await request({\r\n          url: '/xasw-pipe-operation/inspTask/point',\r\n          method: 'get',\r\n          params: { id, gridId: this.planDetail.gridId, pageNum: 1, pageSize: 9999, bizScope: this.$route.query.taskType, bizType: this.planDetail.bizType },\r\n        })\r\n        this.keyDetailList = []\r\n        if (kpRes && kpRes.status) {\r\n          let keys = Object.keys(kpRes.data)\r\n          keys.forEach((item) => {\r\n            this.keyDetailList.push(...kpRes.data[item].list)\r\n          })\r\n          this.unInspKeyDetailList = this.keyDetailList.filter(it => !it.deviceStatus)\r\n        }\r\n        let completion = this.changeToRate(this.taskDetail.coverage)\r\n        this.navbarTitle = this.taskDetail.taskName\r\n        try {\r\n          const that = this\r\n          let timer = setInterval(function () {\r\n            // 30s后取消\r\n            setTimeout(() => {\r\n              clearInterval(timer)\r\n            }, 30000)\r\n            if (that.$refs.mymap && that.$refs.mymap.isOnLoaded()) {\r\n              clearInterval(timer)\r\n              that.$refs.mymap.addKeyPoints(that.keyDetailList)\r\n              if (type != 'refresh') {\r\n                that.$refs.mymap.addRangeList(that.inspRangeList)\r\n              }\r\n              const params = {\r\n                extParam: {\r\n                  task_id: that.$route.query.taskId\r\n                }\r\n              }\r\n              // 问题上报、设施缺陷接口\r\n              that.getProblemDataList(params)\r\n              that.$refs.mymap.addInspRecordTileLineSource(that.lines, completion)\r\n              toast.clear()\r\n              if (!that.currentPosition) return\r\n              const param = {\r\n                ...that.currentPosition,\r\n              }\r\n              that.$refs.mymap.setInspUserPosition(param)\r\n            }\r\n          }, 500)\r\n        } catch (e) {\r\n          console.log(e)\r\n        }\r\n      } else {\r\n        Toast({\r\n          message: '网络状态较差，加载任务失败',\r\n          icon: 'warn',\r\n          duration: 3000\r\n        })\r\n      }\r\n    },\r\n    pause() {\r\n      console.log('进入后台')\r\n      if (this.ifRecording && this.isResume) {\r\n        this.isResume = false\r\n      }\r\n    },\r\n    resume() {\r\n      console.log('进入前台')\r\n      if (this.ifRecording) {\r\n        this.isResume = true\r\n        pauseStateTrackPoints.length > 0 && this.upLoadPauseStateTrackPoints(this.deepClone(pauseStateTrackPoints))\r\n        pauseStatePipeIdList.length > 0 && this.upLoadPauseStatePipeIdList(this.deepClone(pauseStatePipeIdList))\r\n      }\r\n    },\r\n    upLoadPauseStatePipeIdList(data) {\r\n      let that = this\r\n      api.recordInspLine(data).then(async res => {\r\n        if (res.status) {\r\n          console.log('后台巡检管线补充数据上传成功')\r\n          pauseStatePipeIdList.splice(0, data.length) // 移除上传成功的数据。避免重复上传\r\n          const res = await request({\r\n            url: '/xasw-pipe-operation/inspTask/getById',\r\n            method: 'get',\r\n            params: { id: that.$route.query.taskId, bizScope: that.$route.query.taskType }\r\n          })\r\n          if (res.status) {\r\n            that.taskDetail = res.data.inspTask\r\n          }\r\n        } else {\r\n          that.$refs.mymap.uploadFiledPipeIdList.push(...data)\r\n        }\r\n      }).catch(err => {\r\n        setTimeout(() => {\r\n          this.upLoadPauseStatePipeIdList(data)\r\n        }, 5 * 1000)\r\n      })\r\n    },\r\n    upLoadPauseStateTrackPoints(data) {\r\n      api.inspectionTrack(data).then((res) => {\r\n        if (res && res.status) {\r\n          console.log('后台巡检轨迹补充点位上传成功')\r\n          pauseStateTrackPoints.splice(0, data.length) // 移除上传成功的点位。避免重复上传\r\n        } else {\r\n          console.log('后台巡检轨迹补充点位上传异常')\r\n          this.reportFailTrackPoints.push(...data)\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        setTimeout(() => {\r\n          this.upLoadPauseStateTrackPoints(data)\r\n        }, 5 * 1000)\r\n      })\r\n    },\r\n    // 轮询 currentPosition，绘制轨迹线\r\n    polling() {\r\n      let that = this\r\n      if (that.pollingFlag) {\r\n        if (typeof yuanchu != 'undefined') {\r\n          yuanchu.locationAMap.requestLocations(\r\n            [that.$route.query.taskType == '人巡' ? '4' : '2', '1', '20', '100', '0', true],\r\n            (res) => {\r\n              console.log(res)\r\n              that.drawInspLine(res)\r\n            },\r\n            (err) => {\r\n              // Toast.error({\r\n              //   message: 'err' + err,\r\n              //   duration: 2000,\r\n              // })\r\n            }\r\n          )\r\n        }\r\n      }\r\n    },\r\n    drawInspLine(position) {\r\n      const that = this\r\n      that.currentPosition = JSON.parse(JSON.stringify(position))\r\n      that.currentPosition = Object.assign(that.currentPosition, {\r\n        direction: 0\r\n      })\r\n      if (that.currentPosition.locType != 'SAME_REQ' && that.currentPosition.locType != 'FIX_CACHE') { // 过滤缓存定位数据\r\n        let lastPoint = that.trackPointList[that.trackPointList.length - 1]\r\n        let distance = that.GetDistance(lastPoint, [that.currentPosition.longitude, that.currentPosition.latitude]) * 1000\r\n        // 记录过程点\r\n        that.postTrackData_Point(\r\n          that.trackPointList[that.trackPointList.length - 1],\r\n          that.trackPointTimeList[that.trackPointTimeList.length - 1],\r\n          distance\r\n        ).then(res => {\r\n          if (res) {\r\n            // 改变巡检轨迹缓冲区范围内的管线颜色\r\n            let geom = {\r\n              type: 'LineString',\r\n              coordinates: [\r\n                [lastPoint[0], lastPoint[1]],\r\n                [that.currentPosition.longitude, that.currentPosition.latitude],\r\n              ]\r\n            }\r\n            let promise = new Promise((resolve, reject) => {\r\n              that.changeInspLineSourceBySpeed(geom, resolve)\r\n            })\r\n            promise.then(r => {\r\n              if (r) {\r\n                that.trackPointList.push([\r\n                  that.currentPosition.longitude,\r\n                  that.currentPosition.latitude\r\n                ])\r\n                that.trackPointTimeList.push(that.currentPosition.locTime)\r\n                // 构造临时线对象\r\n                let jsonLine = {\r\n                  type: 'Feature',\r\n                  properties: {},\r\n                  geometry: {\r\n                    type: 'LineString',\r\n                    coordinates: that.trackPointList,\r\n                  },\r\n                }\r\n                const coord = [parseFloat(that.currentPosition.longitude), parseFloat(that.currentPosition.latitude)];\r\n                const point = turf.point(coord);\r\n                mapObj.mapInstance.setSourceData(\"inspUser\", {\r\n                  type: \"FeatureCollection\",\r\n                  features: [point]\r\n                })\r\n                let jsonLineFeatureCollection = {\r\n                  type: 'FeatureCollection',\r\n                  features: [jsonLine],\r\n                }\r\n                if (mapObj.map.getSource('trackLineSource_now')) {\r\n                  mapObj.map.getSource('trackLineSource_now').setData(jsonLineFeatureCollection)\r\n                } else {\r\n                  mapObj.map.addSource('trackLineSource_now', {\r\n                    type: 'geojson',\r\n                    data: jsonLineFeatureCollection,\r\n                  })\r\n                }\r\n                if (mapObj.map.getLayer('trackLineLayer_now')) {\r\n                } else {\r\n                  mapObj.map.addLayer({\r\n                    id: 'trackLineLayer_now',\r\n                    type: 'line',\r\n                    source: 'trackLineSource_now',\r\n                    layout: {\r\n                      'line-cap': 'round',\r\n                      'line-join': 'round',\r\n                      'line-sort-key': 1,\r\n                      visibility: 'visible',\r\n                      // visibility: \"none\"\r\n                    },\r\n                    paint: {\r\n                      'line-color': '#addd52',\r\n                      'line-width': 5,\r\n                      'line-opacity': 0.8\r\n                    },\r\n                  }, 'inspUserLayer')\r\n                }\r\n                if (mapObj.map.getLayer('trackLineLayer_arrow')) {\r\n                } else {\r\n                  mapObj.map.addLayer({\r\n                    id: 'trackLineLayer_arrow',\r\n                    type: 'symbol',\r\n                    source: 'trackLineSource_now',\r\n                    layout: {\r\n                      'symbol-placement': 'line',\r\n                      'symbol-spacing': 20,\r\n                      'icon-image': 'arrowIcon',\r\n                      'icon-size': 0.5,\r\n                      'icon-allow-overlap': true,\r\n                      'symbol-sort-key': 3,\r\n                      visibility: 'visible'\r\n                    },\r\n                  }, 'inspUserLayer')\r\n                }\r\n              }\r\n            })\r\n          }\r\n        })\r\n      }\r\n    },\r\n    // 根据速度改变巡检管线颜色\r\n    changeInspLineSourceBySpeed(position, resolve) {\r\n      // const coord = [parseFloat(position.longitude), parseFloat(position.latitude)];\r\n      // const point = turf.point(coord);\r\n      const that = this\r\n      try {\r\n        // 改变周围要素的状态\r\n        let buffered = turf.buffer(position, that.$route.query.taskType == '人巡' ? 0.025 : 0.045, { unit: 'kilometers' });\r\n        that.changeInspLineState(buffered, resolve);\r\n      } catch (e) {\r\n        console.log(e);\r\n      }\r\n    },\r\n    // 设置巡检管线为已巡检\r\n    changeInspLineState(geometry, resolve) {\r\n      let that = this\r\n      // 将地理坐标系转化为屏幕坐标系\r\n      function geoTransToPixel(geom) {\r\n        const polygonBox = turf.bbox(geom);\r\n        const southWest = [polygonBox[0], polygonBox[1]];\r\n        const northEast = [polygonBox[2], polygonBox[3]];\r\n        let southWestPointPixel = mapObj.map.project(southWest);\r\n        let northEastPointPixel = mapObj.map.project(northEast);\r\n        // 增大bbox的查询范围\r\n        southWestPointPixel = [\r\n          southWestPointPixel.x - 50,\r\n          southWestPointPixel.y + 50\r\n        ]\r\n        northEastPointPixel = [\r\n          northEastPointPixel.x + 50,\r\n          northEastPointPixel.y - 50\r\n        ]\r\n        return [southWestPointPixel, northEastPointPixel];\r\n      }\r\n      // 对每个划分出来的bbox进行处理\r\n      function chunk(geom, resolve) {\r\n        const boxFeatures = mapObj.map.queryRenderedFeatures(geoTransToPixel(geom), {\r\n          layers: [\"initInspLineLayer\"]\r\n        });\r\n        console.log(boxFeatures, 'boxFeatures')\r\n        let tempPipeList = []\r\n        boxFeatures.forEach(feat => {\r\n          try {\r\n            const result = turf.booleanDisjoint(feat.geometry, geometry)\r\n            // 如果查出的要素与真实的范围相交且没有被巡检过，则改变其状态,并记录其关键字\r\n            if (!result && !feat.state.isInsp) {\r\n              mapObj.map.setFeatureState({\r\n                source: feat.source,\r\n                id: feat.id\r\n              }, { isInsp: true })\r\n              if (!tempPipeList.map(it => it.pipeId).includes(feat.id)) {\r\n                let date = that.$dayjs().format('YYYY-MM-DD HH:mm:ss')\r\n                tempPipeList.push({\r\n                  inspDate: date,\r\n                  pipeId: feat.id,\r\n                  ext3: feat.properties.bizType,\r\n                  pipeLength: feat.properties['length'] || 0,\r\n                  taskId: that.$route.query.taskId\r\n                })\r\n              }\r\n            }\r\n          } catch (error) {\r\n            console.log(error)\r\n          }\r\n        })\r\n        if (that.isResume) {\r\n          tempPipeList.length > 0 && api.recordInspLine(tempPipeList).then(async res => {\r\n            if (res.status) {\r\n              const res = await request({\r\n                url: '/xasw-pipe-operation/inspTask/getById',\r\n                method: 'get',\r\n                params: { id: that.$route.query.taskId, bizScope: that.$route.query.taskType }\r\n              })\r\n              if (res.status) {\r\n                that.taskDetail = res.data.inspTask\r\n              }\r\n            } else {\r\n              console.log('上传失败的tempPipeList: ', tempPipeList);\r\n              that.$refs.mymap.uploadFiledPipeIdList.push(...tempPipeList)\r\n            }\r\n          })\r\n        } else {\r\n          tempPipeList.length > 0 && pauseStatePipeIdList.push(...tempPipeList)\r\n        }\r\n        resolve(true)\r\n      }\r\n      // function cb(features) {\r\n      //   if (features.length > 0) {\r\n      //     setTimeout(() => {\r\n      //       chunk(features.shift());\r\n      //       cb(features);\r\n      //     }, 100);\r\n      //   }\r\n      // }\r\n      chunk(geometry, resolve)\r\n      // cb([geometry]);\r\n    },\r\n    // 绘制起始点\r\n    drawStartPoint() {\r\n      let that = this\r\n      return new Promise(function (resolve, reject) {\r\n        if (typeof yuanchu != 'undefined') {\r\n          yuanchu.locationAMap.requestSingleLocation(\r\n            ['1'],\r\n            (res) => {\r\n              that.currentPosition = JSON.parse(JSON.stringify(res))\r\n              const param = {\r\n                ...that.currentPosition,\r\n              }\r\n              console.log(res)\r\n              that.$refs.mymap.setInspUserPosition(param)\r\n              if (that.currentPosition != null) {\r\n                let recordData = []\r\n                recordData.push({\r\n                  taskId: that.taskDetail.id, // 任务id\r\n                  longitude: that.currentPosition.longitude,\r\n                  latitude: that.currentPosition.latitude,\r\n                  inspTime: that.currentPosition.locTime,\r\n                  distance: 0, // 第一个点距离为0\r\n                  inspDate: that.currentPosition.locTime,\r\n                  inspector: that.userInfo.userFullName,\r\n                })\r\n                api.inspectionTrack(recordData)\r\n                  .then((res) => {\r\n                    if (res && res.status) {\r\n                      // 使用上报点位作为起点\r\n                      console.log('起始点存储成功')\r\n                      that.trackPointList.push([that.currentPosition.longitude, that.currentPosition.latitude])\r\n                      that.trackPointTimeList.push(that.currentPosition.locTime)\r\n                      let jsonPoint = {\r\n                        type: 'Feature',\r\n                        properties: {},\r\n                        geometry: {\r\n                          type: 'Point',\r\n                          coordinates: [that.currentPosition.longitude, that.currentPosition.latitude],\r\n                        },\r\n                      }\r\n                      let jsonPointFeatureCollection = {\r\n                        type: 'FeatureCollection',\r\n                        features: [jsonPoint],\r\n                      }\r\n                      if (mapObj.map.getSource('startPointSource_now')) {\r\n                        mapObj.map.getSource('startPointSource_now').setData(jsonPointFeatureCollection)\r\n                      } else {\r\n                        mapObj.map.addSource('startPointSource_now', {\r\n                          type: 'geojson',\r\n                          data: jsonPointFeatureCollection,\r\n                        })\r\n                      }\r\n                      if (mapObj.map.getLayer('startPointLayer_now')) {\r\n                      } else {\r\n                        mapObj.map.addLayer({\r\n                          id: 'startPointLayer_now',\r\n                          type: 'circle',\r\n                          source: 'startPointSource_now',\r\n                          layout: {\r\n                            'circle-sort-key': 5,\r\n                            visibility: 'visible',\r\n                            // visibility: \"none\"\r\n                          },\r\n                          paint: {\r\n                            'circle-radius': 3,\r\n                            'circle-stroke-width': 5,\r\n                            'circle-stroke-color': '#2A83E6',\r\n                            'circle-color': 'white',\r\n                          },\r\n                        }, 'inspUserLayer')\r\n                      }\r\n                      // label\r\n                      if (mapObj.map.getLayer('startPoint_label')) {\r\n                      } else {\r\n                        mapObj.map.addLayer({\r\n                          id: 'startPoint_label',\r\n                          type: 'symbol',\r\n                          source: 'startPointSource_now',\r\n                          layout: {\r\n                            'symbol-placement': 'point',\r\n                            'icon-image': 'start_point',\r\n                            'icon-size': 0.6,\r\n                            'icon-offset': [0, -35],\r\n                            'icon-allow-overlap': true,\r\n                            'symbol-sort-key': 2,\r\n                            visibility: 'visible',\r\n                            // visibility: \"none\"\r\n                          },\r\n                        })\r\n                      }\r\n                      resolve(true)\r\n                    } else {\r\n                      resolve(false)\r\n                    }\r\n                  })\r\n                  .catch((err) => {\r\n                    reject(err)\r\n                  })\r\n              }\r\n            },\r\n            (err) => {\r\n              console.log('err=', err)\r\n            }\r\n          )\r\n        }\r\n      })\r\n    },\r\n    // 绘制终止点\r\n    async drawEndPoint(type) {\r\n      let that = this\r\n      if (that.currentPosition != null) {\r\n        let lastPoint = that.trackPointList[that.trackPointList.length - 1]\r\n        let distance = that.GetDistance(lastPoint, [that.currentPosition.longitude, that.currentPosition.latitude]) * 1000\r\n        let toast = Toast.loading({\r\n          message: '程序关闭中',\r\n          loadingType: 'spinner',\r\n          duration: 0,\r\n          forbidClick: true\r\n        })\r\n        // 记录终止点\r\n        that.postTrackData_Point(\r\n          that.trackPointList[that.trackPointList.length - 1],\r\n          that.trackPointTimeList[that.trackPointTimeList.length - 1],\r\n          distance\r\n        ).then(res => {\r\n          if (res) {\r\n            toast.close()\r\n            Toast.info({\r\n              message: '暂停成功',\r\n              duration: 1000\r\n            })\r\n            if (typeof yuanchu != 'undefined') {\r\n              yuanchu.locationAMap.stopRequestLocations()\r\n            }\r\n            that.trackPointList.push([that.currentPosition.longitude, that.currentPosition.latitude])\r\n            that.trackPointTimeList.push(that.currentPosition.locTime)\r\n            let jsonPoint = {\r\n              type: 'Feature',\r\n              properties: {},\r\n              geometry: {\r\n                type: 'Point',\r\n                coordinates: [that.currentPosition.longitude, that.currentPosition.latitude],\r\n              },\r\n            }\r\n            let jsonPointFeatureCollection = {\r\n              type: 'FeatureCollection',\r\n              features: [jsonPoint],\r\n            }\r\n            if (mapObj.map.getSource('endPointSource_now')) {\r\n              mapObj.map.getSource('endPointSource_now').setData(jsonPointFeatureCollection)\r\n            } else {\r\n              mapObj.map.addSource('endPointSource_now', {\r\n                type: 'geojson',\r\n                data: jsonPointFeatureCollection,\r\n              })\r\n            }\r\n            if (mapObj.map.getLayer('endPointLayer_now')) {\r\n            } else {\r\n              mapObj.map.addLayer({\r\n                id: 'endPointLayer_now',\r\n                type: 'circle',\r\n                source: 'endPointSource_now',\r\n                layout: {\r\n                  'circle-sort-key': 5,\r\n                  visibility: 'visible',\r\n                  // visibility: \"none\"\r\n                },\r\n                paint: {\r\n                  'circle-radius': 3,\r\n                  'circle-stroke-width': 5,\r\n                  'circle-stroke-color': '#addd52',\r\n                  'circle-color': 'white',\r\n                },\r\n              }, 'inspUserLayer')\r\n            }\r\n\r\n            // 补充trackline\r\n            let jsonLine = {\r\n              type: 'Feature',\r\n              properties: {},\r\n              geometry: {\r\n                type: 'LineString',\r\n                coordinates: that.trackPointList,\r\n              },\r\n            }\r\n            let jsonLineFeatureCollection = {\r\n              type: 'FeatureCollection',\r\n              features: [jsonLine],\r\n            }\r\n            if (mapObj.map.getSource('trackLineSource_now')) {\r\n              mapObj.map.getSource('trackLineSource_now').setData(jsonLineFeatureCollection)\r\n            } else {\r\n              mapObj.map.addSource('trackLineSource_now', {\r\n                type: 'geojson',\r\n                data: jsonLineFeatureCollection,\r\n              })\r\n            }\r\n            if (mapObj.map.getLayer('trackLineLayer_now')) {\r\n            } else {\r\n              mapObj.map.addLayer({\r\n                id: 'trackLineLayer_now',\r\n                type: 'line',\r\n                source: 'trackLineSource_now',\r\n                layout: {\r\n                  'line-cap': 'round',\r\n                  'line-join': 'round',\r\n                  visibility: 'visible',\r\n                  // visibility: \"none\"\r\n                },\r\n                paint: {\r\n                  'line-color': '#addd52',\r\n                  'line-width': 5,\r\n                  'line-opacity': 0.8,\r\n                },\r\n              }, 'inspUserLayer')\r\n            }\r\n            // label\r\n            if (mapObj.map.getLayer('endPoint_label')) {\r\n            } else {\r\n              mapObj.map.addLayer({\r\n                id: 'endPoint_label',\r\n                type: 'symbol',\r\n                source: 'endPointSource_now',\r\n                layout: {\r\n                  'symbol-placement': 'point',\r\n                  'icon-image': 'end_point',\r\n                  'icon-size': 0.6,\r\n                  'icon-offset': [0, -35],\r\n                  'icon-allow-overlap': true,\r\n                  'symbol-sort-key': 2,\r\n                  visibility: 'visible',\r\n                  // visibility: \"none\"\r\n                },\r\n              })\r\n            }\r\n            // 上传之前上传失败的点位\r\n            that.reportFailTrackPoints.length > 0 && that.postFailTrackData()\r\n            that.$refs.mymap.uploadFiledPipeIdList.length > 0 && api.recordInspLine(that.$refs.mymap.uploadFiledPipeIdList).then(res => {\r\n              if (res.status) {\r\n                console.log('管线补充上传成功')\r\n                that.$refs.mymap.uploadFiledPipeIdList = []\r\n              }\r\n            })\r\n            if (type == 'end') {\r\n              this.startOrEndTaskRecord(2) // 已巡检状态 '2'\r\n            } else {\r\n              this.pollingFlag = false\r\n              this.ifRecording = false\r\n              localStorage.setItem('startRecordLines', 'end')\r\n              if (type == 'pause') {\r\n                Toast.success({\r\n                  message: '暂停成功',\r\n                  duration: 2000\r\n                })\r\n                this.refreshTask()\r\n              } else if (type == 'leave') {\r\n                this.$router.go(-1)\r\n              }\r\n            }\r\n          } else {\r\n            Toast.error({\r\n              message: type == 'end' ? '结束失败' : '暂停失败'\r\n            })\r\n          }\r\n        })\r\n      } else {\r\n        let type = type\r\n        let timer = setTimeout(() => {\r\n          that.drawEndPoint(type)\r\n        }, 1000)\r\n      }\r\n    },\r\n    async postFailTrackData() {\r\n      let that = this\r\n      await api\r\n        .inspectionTrack(that.reportFailTrackPoints)\r\n        .then((res) => {\r\n          if (res && res.status) {\r\n            console.log('轨迹存储成功')\r\n            that.reportFailTrackPoints = []\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          console.log('巡检轨迹存储失败：' + err)\r\n        })\r\n    },\r\n\r\n    // 单点-后端记录轨迹数据\r\n    postTrackData_Point(pointData, timeData, distance) {\r\n      return new Promise(async (resolve, reject) => {\r\n        let that = this\r\n        for (let p = 0; p < pointData.length; p++) {\r\n          pointData[p] = Number(pointData[p])\r\n        }\r\n        let date_now = dayjs().format('YYYY-MM-DD HH:mm:ss')\r\n        let recordData = []\r\n        recordData.push({\r\n          taskId: that.taskDetail.id,\r\n          inspDate: timeData,\r\n          inspTime: date_now,\r\n          distance,\r\n          inspector: that.userInfo.userFullname,\r\n          longitude: pointData[0],\r\n          latitude: pointData[1],\r\n        })\r\n        if (that.isResume) {\r\n          await api\r\n            .inspectionTrack(recordData)\r\n            .then((res) => {\r\n              if (res && res.status) {\r\n                console.log('轨迹存储成功', recordData)\r\n                resolve(true)\r\n              } else {\r\n                // 上传失败的点位，暂时存在app端\r\n                that.reportFailTrackPoints.push(recordData)\r\n                console.log('that.reportFailTrackPoints: ', that.reportFailTrackPoints);\r\n                resolve(true)\r\n              }\r\n            })\r\n        } else {\r\n          pauseStateTrackPoints.push(...recordData)\r\n          resolve(true)\r\n        }\r\n      })\r\n    },\r\n    startOrEndTaskRecord(status) {\r\n      let data = {\r\n        planId: this.planDetail.id,\r\n        taskName: this.taskDetail.taskName,\r\n        taskCode: this.taskDetail.taskCode,\r\n        taskStatus: status,\r\n        id: this.taskDetail.id,\r\n        taskType: this.taskDetail.taskType,\r\n        bizType: this.planDetail.bizType,\r\n        ext1: status == 2 ? this.stopReason : ''\r\n      }\r\n      if (status == 1) {\r\n        data.planStartTime = this.$dayjs().format('YYYY-MM-DD HH:mm:ss')\r\n      } else if (status == 2) {\r\n        data.planEndTime = this.$dayjs().format('YYYY-MM-DD HH:mm:ss')\r\n      }\r\n      let that = this\r\n      api.changeTaskStatus(data).then((res) => {\r\n        if (res.status) {\r\n          if (status == 2) {\r\n            Toast.success({\r\n              message: '结束成功',\r\n              duration: 2000,\r\n              onClose: () => {\r\n                that.pollingFlag = false\r\n                that.ifRecording = false\r\n                localStorage.setItem('startRecordLines', 'end')\r\n                that.isView = true\r\n                that.$router.go(-1)\r\n              }\r\n            })\r\n          }\r\n        } else {\r\n          if (status == 2) {\r\n            Toast.error({\r\n              message: '结束失败, 请重试',\r\n              duration: 1500\r\n            })\r\n          }\r\n        }\r\n      })\r\n    },\r\n    // 清除缓存的轨迹数据\r\n    clearBufferTrack() {\r\n      let that = this\r\n      that.isResume = true\r\n      that.ifRecording = false\r\n      that.currentPosition = null\r\n      //数组归零\r\n      that.trackPointList = []\r\n      that.trackPointTimeList = []\r\n      that.overSpeedTrackLineList = []\r\n      pauseStateTrackPoints = []\r\n      pauseStatePipeIdList = []\r\n      //数据源清空\r\n      if (mapObj.map.getSource('trackLineSource_now')) {\r\n        mapObj.map.getSource('trackLineSource_now').setData({\r\n          type: 'FeatureCollection',\r\n          features: [],\r\n        })\r\n      }\r\n      if (mapObj.map.getSource('trackLineSource_overSpeed')) {\r\n        mapObj.map.getSource('trackLineSource_overSpeed').setData({\r\n          type: 'FeatureCollection',\r\n          features: [],\r\n        })\r\n      }\r\n      if (mapObj.map.getSource('startPointSource_now')) {\r\n        mapObj.map.getSource('startPointSource_now').setData({\r\n          type: 'FeatureCollection',\r\n          features: [],\r\n        })\r\n      }\r\n\r\n      if (mapObj.map.getSource('endPointSource_now')) {\r\n        mapObj.map.getSource('endPointSource_now').setData({\r\n          type: 'FeatureCollection',\r\n          features: [],\r\n        })\r\n      }\r\n    },\r\n    addMapImg() {\r\n      mapObj.map.loadImage(\r\n        require('@assets/img/inspection/white_arrow_right.png'),\r\n        function (error, image) {\r\n          if (error) throw error\r\n          if (!mapObj.map.hasImage('arrowIcon')) {\r\n            mapObj.map.addImage('arrowIcon', image, {})\r\n          }\r\n        }\r\n      )\r\n      mapObj.map.loadImage(\r\n        require('@assets/img/inspection/icon_starting_point.png'),\r\n        function (error, image) {\r\n          if (error) throw error\r\n          if (!mapObj.map.hasImage('start_point')) {\r\n            mapObj.map.addImage('start_point', image, {})\r\n          }\r\n        }\r\n      )\r\n      mapObj.map.loadImage(\r\n        require('@assets/img/inspection/icon_at_end.png'),\r\n        function (error, image) {\r\n          if (error) throw error\r\n          if (!mapObj.map.hasImage('end_point')) {\r\n            mapObj.map.addImage('end_point', image, {})\r\n          }\r\n        }\r\n      )\r\n    },\r\n    // 开始记录 上传起点成功后才进入巡检过程\r\n    startInspRecord() {\r\n      if (this.isView) {\r\n        Toast({\r\n          message: '该巡检任务已结束',\r\n          duration: 1500\r\n        })\r\n        return\r\n      }\r\n      if (!this.currentPosition || !this.currentPosition.longitude) {\r\n        Toast.warning({\r\n          message: '当前GPS信号弱，请稍后尝试',\r\n          duration: 2000\r\n        })\r\n        return\r\n      }\r\n      this.clearBufferTrack()\r\n      let toast = Toast.loading({\r\n        message: '程序启动中',\r\n        loadingType: 'spinner',\r\n        duration: 0,\r\n        forbidClick: true\r\n      })\r\n      this.drawStartPoint()\r\n        .then((res) => {\r\n          if (res) {\r\n            toast.close()\r\n            Toast.info({\r\n              message: '开始记录',\r\n              duration: 1500\r\n            })\r\n            this.pollingFlag = true\r\n            this.ifRecording = true\r\n            localStorage.setItem('startRecordLines', 'start')\r\n            // 开始轮询\r\n            this.polling()\r\n            // 记录当前时间\r\n            this.startRecordTimer = new Date()\r\n          } else {\r\n            Toast.error({\r\n              message: '接口异常，无法开始任务',\r\n              duration: 2000\r\n            })\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          console.log(err)\r\n          Toast.error({\r\n            message: '网络状态异常，正在重试',\r\n            duration: 2000\r\n          })\r\n          setTimeout(() => {\r\n            this.drawStartPoint()\r\n          }, 5000)\r\n        })\r\n    },\r\n    // 结束记录\r\n    endRecord(type) {\r\n      let diff = Math.floor((new Date() - this.startRecordTimer) / 1000)\r\n      if (diff <= 10) {\r\n        Toast.info({\r\n          message: `结束太快了,请${10 - diff}秒后再试`,\r\n          duration: 1000\r\n        })\r\n        return\r\n      }\r\n      this.endRecordConfirm(type)\r\n    },\r\n    // 结束记录确认\r\n    endRecordConfirm(type) {\r\n      this.drawEndPoint(type)\r\n    },\r\n    // 开始定位\r\n    startLocation() {\r\n      let that = this\r\n      yuanchu.locationAMap.requestSingleLocation(\r\n        ['1'],\r\n        (res) => {\r\n          that.currentPosition = JSON.parse(JSON.stringify(res))\r\n          const param = {\r\n            ...that.currentPosition,\r\n          }\r\n          if (!that.currentPosition || !that.currentPosition.longitude || !that.currentPosition.latitude) {\r\n            Toast.error({\r\n              message: '获取位置失败!',\r\n              duration: 2000\r\n            })\r\n            return\r\n          } else {\r\n            const coord = [parseFloat(that.currentPosition.longitude), parseFloat(that.currentPosition.latitude)]\r\n            that.$refs.mymap.setInspUserPosition(param)\r\n            that.flyToPoint(coord)\r\n          }\r\n        },\r\n        (err) => {\r\n          console.log('err=', err)\r\n        }\r\n      )\r\n    },\r\n    goEventOrFlawDetail(feature, type) {\r\n      let currentPoint = feature\r\n      console.log(feature)\r\n      currentPoint = feature\r\n      currentPoint.bigType = feature.bizType || ''\r\n      currentPoint.gridId = this.planDetail.gridId\r\n      currentPoint.gridName = this.planDetail.gridName\r\n      currentPoint.gridManager = { fullName: this.planDetail.gridManager, username: this.planDetail.userName }\r\n      currentPoint.lng = feature.geom.coordinates[0]\r\n      currentPoint.lat = feature.geom.coordinates[1]\r\n      currentPoint.road_name = feature.road || ''\r\n      currentPoint.smallType = feature.deviceType || ''\r\n      currentPoint.code = feature.deviceId || ''\r\n      currentPoint.taskId = this.taskDetail.id\r\n      if (type == 'event') {\r\n        this.$router.push({\r\n          name: 'addProblemIndex',\r\n          query: { msg: currentPoint, token: this.formToken, taskId: this.$route.query.taskId, from: 'insp' },\r\n          params: { type: 'add' },\r\n        })\r\n      } else {\r\n        this.$router.push({\r\n          name: 'addFlaws',\r\n          query: { msg: currentPoint, token: this.formToken, taskId: this.$route.query.taskId, from: 'insp' },\r\n          params: { type: 'add' }\r\n        })\r\n      }\r\n    },\r\n    // 确认\r\n    onConfirm() {\r\n      if (true) {\r\n        let that = this\r\n        let feature = this.signForm.feature\r\n        let copySignForm = this.deepClone(this.signForm)\r\n        if (that.attachment == '') {\r\n          Notify({ type: 'error', message: '请上传附件' })\r\n          return\r\n        }\r\n        // 液位输入框是否显示（污水检查井必须填写液位字段）\r\n        if (this.waterLevelShow == true) {\r\n          if (copySignForm.liquidLevel == '') {\r\n            Notify({ type: 'error', message: '请输入液位' })\r\n            return\r\n          }\r\n        }\r\n        copySignForm.inspDate = dayjs().format('YYYY-MM-DD HH:mm:ss')\r\n        copySignForm.ext1 = copySignForm.remark // 备注\r\n        copySignForm.ext2 = '1' // 巡检记录的ext2字段，默认为1（待复核），已通过为2，已退回为3\r\n        delete copySignForm.feature\r\n\r\n        // resultList通过巡检要点list处理并添加到form中\r\n        let resultList = []\r\n        let textInFlag = false\r\n        // 巡检要点list数据\r\n        if (this.keyPointsInspectionList.length > 0) {\r\n          this.keyPointsInspectionList.forEach(item => {\r\n            resultList.push({\r\n              mainId: item.id, // 巡检要点id\r\n              mainPoint: item.mainPoint, // 巡检要点名称\r\n              mainValue: item.mainValue, // 该要点巡检结果\r\n              ext1: item.inputType, // 巡检要点输入类型，用于查询详情时判断html结构\r\n            })\r\n          })\r\n          for (let i = 0; i < resultList.length; i++) {\r\n            // 不为''或者全空格\r\n            if (resultList[i].mainValue == '' || resultList[i].mainValue.trim() == '') {\r\n              textInFlag = true\r\n            }\r\n          }\r\n        }\r\n        if (textInFlag) {\r\n          Notify({ type: 'error', message: '请将巡检要点补充完整' })\r\n          return\r\n        }\r\n        copySignForm.resultList = resultList\r\n        console.log('提交参数', _cloneDeep(copySignForm));\r\n        \r\n        api.signIn(copySignForm).then((res) => {\r\n          if (res && res.status) {\r\n            Toast.success({\r\n              message: '此关键点签到成功',\r\n              duration: 1000,\r\n              forbidClick: true,\r\n              onClose: () => {\r\n                // 巡检事件上报\r\n                if (copySignForm.isReport == '问题上报') {\r\n                  that.goEventOrFlawDetail(feature, 'event');\r\n                } else if (copySignForm.isReport == '新增缺陷') {\r\n                  that.goEventOrFlawDetail(feature, 'flaw');\r\n                } else {\r\n                  that.refreshTask()\r\n                }\r\n              }\r\n            })\r\n          } else {\r\n            Toast.error({\r\n              message: '此关键点签到失败',\r\n              duration: 2000\r\n            })\r\n          }\r\n          this.signShow = false\r\n          this.signForm.remark = ''\r\n          this.signForm.liquidLevel = ''\r\n          this.signForm.deviceStatus = '0'\r\n          this.signForm.isReport = ''\r\n          this.signForm.inspImagesList = []\r\n          this.attachment = ''\r\n          mapObj.mapInstance.setSourceData('buffered', {\r\n            type: 'FeatureCollection',\r\n            features: [],\r\n          })\r\n        })\r\n        // localStorage.setItem(\"isReportEvent\", false);\r\n      } else {\r\n        console.log('验证失败')\r\n      }\r\n    },\r\n    // 取消\r\n    onCancel() {\r\n      this.signShow = false\r\n      mapObj.mapInstance.setSourceData('buffered', {\r\n        type: 'FeatureCollection',\r\n        features: [],\r\n      })\r\n    },\r\n    cancelLeave() {\r\n      this.ifLeaveTask = false\r\n    },\r\n    confirmLeave() {\r\n      this.ifLeaveTask = false\r\n      this.endRecord('leave')\r\n    },\r\n    clickBack() {\r\n      if (this.ifRecording) {\r\n        this.ifLeaveTask = true\r\n      } else {\r\n        this.$router.go(-1)\r\n      }\r\n    },\r\n    // 签到\r\n    async startSignIn(feature) {\r\n      console.log('--------签到--------', feature);\r\n      if (feature.bizType == '污水' && feature.deviceType == '检查井') {\r\n        // 液位输入框是否显示\r\n        this.waterLevelShow = true\r\n      } else {\r\n        this.waterLevelShow = false\r\n      }\r\n      this.pointListShow = false\r\n      this.attachment = ''\r\n      this.signForm.isReport = ''\r\n      this.deviceName = feature.deviceType + (feature.deviceId || '')\r\n      // -----------------------------------------------------------------------------------------------------\r\n      //  deviceStatus状态（0正常 1异常 2未巡检） 巡检记录的ext2字段，默认为1（待复核），已通过为2，已退回为3\r\n      if (!feature.deviceStatus || feature.deviceStatus == '2' || feature.ext2 == '3') {\r\n        if (this.$route.query.isView) {\r\n          Toast.warning({\r\n            message: '任务已结束，无法继续打卡',\r\n            duration: 2000\r\n          })\r\n          mapObj.map.getSource('buffered') &&\r\n            mapObj.mapInstance.setSourceData('buffered', {\r\n              type: 'FeatureCollection',\r\n              features: [],\r\n            })\r\n          return\r\n        }\r\n        // 利用feature来判断是否处于35m范围内，如果处于，可以进行签到，否则不能进行签到\r\n        const position = this.currentPosition\r\n        if (!position) {\r\n          Toast.warning({\r\n            message: '获取不到巡检人位置',\r\n            duration: 2000\r\n          })\r\n          mapObj.map.getSource('buffered') &&\r\n          mapObj.mapInstance.setSourceData('buffered', {\r\n            type: 'FeatureCollection',\r\n            features: [],\r\n          })\r\n          return\r\n        }\r\n        const coord = [\r\n          parseFloat(position.longitude),\r\n          parseFloat(position.latitude),\r\n        ]\r\n        const point = turf.point(coord)\r\n        const engGeom = feature.geom\r\n        const buffered = turf.buffer(engGeom, 0.020, { unit: 'kilometers' })\r\n        const isInBuffer = turf.inside(point, buffered)\r\n        if (!isInBuffer) {\r\n          Toast.warning({\r\n            message: '未处于该关键点范围内',\r\n            duration: 2000\r\n          })\r\n          return\r\n        }\r\n        console.log('feature数据', feature);\r\n        // 巡检要点list数据\r\n        this.keyPointsInspectionList = []\r\n        let params4 = {\r\n          bizType: feature.bizType, // 业务类型（污水）\r\n          objectType: feature.deviceType, // 巡检对象类型名称（检查井）\r\n        }\r\n        // app端根据类型查询启用的巡检要点列表\r\n        api.inspPointCheckList(params4)\r\n          .then(res => {\r\n            this.keyPointsInspectionList = res?.data?.filter((item) => {\r\n              return item.mainStatus === \"启用中\"\r\n              // item = {\r\n              //   \"id\": \"1655843007768236033\",\r\n              //   \"createBy\": \"fawkes\",\r\n              //   \"createDate\": \"2023-05-09 15:51:51\",\r\n              //   \"updateBy\": null,\r\n              //   \"updateDate\": null,\r\n              //   \"deleteFlag\": 0,\r\n              //   \"mainPoint\": \"井内是否有大量淤积或杂物影响排水\",\r\n              //   \"inputType\": \"是/否\",\r\n              //   \"unit\": \"/\",\r\n              //   \"mainStatus\": \"启用中\",\r\n              //   \"bizType\": \"污水\",\r\n              //   \"objectType\": \"检查井\",\r\n              //   \"remarks\": null,\r\n              //   \"portalId\": null,\r\n              //   \"tenantId\": 100000\r\n              // }\r\n            }) || []\r\n            // 巡检要点list数据\r\n            if (this.keyPointsInspectionList.length > 0) {\r\n              this.keyPointsInspectionList.forEach((item) => {\r\n                let iT = ['']\r\n                // 如果inputType中存在'/'，则将其转换成数组，巡检要点结果mainValue默认为第一个值（\"inputType\": \"是/否\",），否则mainValue为''\r\n                if (item.inputType.indexOf('/') > -1) {\r\n                  iT = item.inputType.split('/')\r\n                }\r\n                this.$set(item, 'mainValue', iT[0]) // 该要点巡检结果\r\n              })\r\n            }\r\n            // this.keyPointsInspectionList = [\r\n            //   {\r\n            //     \"id\": \"1655843007768236033\",\r\n            //     \"createBy\": \"fawkes\",\r\n            //     \"createDate\": \"2023-05-09 15:51:51\",\r\n            //     \"updateBy\": null,\r\n            //     \"updateDate\": null,\r\n            //     \"deleteFlag\": 0,\r\n            //     \"mainPoint\": \"测试正常异常测试正常异常测试正常异常测试正常异常\",\r\n            //     \"inputType\": \"正常/异常\",\r\n            //     \"unit\": \"/\",\r\n            //     \"mainStatus\": \"启用中\",\r\n            //     \"bizType\": \"污水\",\r\n            //     \"objectType\": \"检查井\",\r\n            //     \"remarks\": null,\r\n            //     \"portalId\": null,\r\n            //     \"tenantId\": 100000,\r\n            //     \"mainValue\": \"正常\"\r\n            //   },\r\n            //   {\r\n            //     \"id\": \"1655843007768236034\",\r\n            //     \"createBy\": \"fawkes\",\r\n            //     \"createDate\": \"2023-05-09 15:51:51\",\r\n            //     \"updateBy\": null,\r\n            //     \"updateDate\": null,\r\n            //     \"deleteFlag\": 0,\r\n            //     \"mainPoint\": \"测试开启关闭测试开启关闭测试开启关闭测试开启关闭\",\r\n            //     \"inputType\": \"开启/关闭\",\r\n            //     \"unit\": \"/\",\r\n            //     \"mainStatus\": \"启用中\",\r\n            //     \"bizType\": \"污水\",\r\n            //     \"objectType\": \"检查井\",\r\n            //     \"remarks\": null,\r\n            //     \"portalId\": null,\r\n            //     \"tenantId\": 100000,\r\n            //     \"mainValue\": \"关闭\"\r\n            //   },\r\n            //   {\r\n            //     \"id\": \"1655843007768236035\",\r\n            //     \"createBy\": \"fawkes\",\r\n            //     \"createDate\": \"2023-05-09 15:51:51\",\r\n            //     \"updateBy\": null,\r\n            //     \"updateDate\": null,\r\n            //     \"deleteFlag\": 0,\r\n            //     \"mainPoint\": \"测试是否测试是否测试是否测试是否\",\r\n            //     \"inputType\": \"是/否\",\r\n            //     \"unit\": \"/\",\r\n            //     \"mainStatus\": \"启用中\",\r\n            //     \"bizType\": \"污水\",\r\n            //     \"objectType\": \"检查井\",\r\n            //     \"remarks\": null,\r\n            //     \"portalId\": null,\r\n            //     \"tenantId\": 100000,\r\n            //     \"mainValue\": \"是\"\r\n            //   },\r\n            //   {\r\n            //     \"id\": \"1655843007768236035\",\r\n            //     \"createBy\": \"fawkes\",\r\n            //     \"createDate\": \"2023-05-09 15:51:51\",\r\n            //     \"updateBy\": null,\r\n            //     \"updateDate\": null,\r\n            //     \"deleteFlag\": 0,\r\n            //     \"mainPoint\": \"测试数值测试数值测试数值测试数值\",\r\n            //     \"inputType\": \"数值\",\r\n            //     \"unit\": \"/\",\r\n            //     \"mainStatus\": \"启用中\",\r\n            //     \"bizType\": \"污水\",\r\n            //     \"objectType\": \"检查井\",\r\n            //     \"remarks\": null,\r\n            //     \"portalId\": null,\r\n            //     \"tenantId\": 100000,\r\n            //     \"mainValue\": \"\"\r\n            //   }\r\n            // ]\r\n            console.log('当前业务及设施类型下的巡检要点list', _cloneDeep(this.keyPointsInspectionList),);\r\n          })\r\n          .catch(err => { })\r\n          .finally(() => {\r\n            this.signShow = true\r\n            // 未巡检\r\n            this.hasSignIn = false\r\n            this.signForm.remark = ''\r\n            this.signForm.liquidLevel = ''\r\n            this.signForm.ext3 = feature.bizType\r\n            this.signForm.deviceStatus = '0'\r\n            this.signForm.inspImagesList = []\r\n            this.signForm.pointId = feature.id\r\n            this.signForm.taskId = this.$route.query.taskId,\r\n            this.signForm.feature = feature\r\n          })\r\n      } else {\r\n        let toast = Toast.loading({\r\n          message: '正在加载',\r\n          forbidClick: true,\r\n          loadingType: 'spinner',\r\n          duration: 0\r\n        })\r\n        this.hasSignIn = true\r\n        let params = {\r\n          page: 1,\r\n          size: 999,\r\n          deviceStatus: feature.deviceStatus,\r\n          pointId: feature.id,\r\n          taskId: this.$route.query.taskId,\r\n        }\r\n        const res = await request({\r\n          url: '/xasw-pipe-operation/inspPointRecord/page',\r\n          method: 'get',\r\n          params: params,\r\n        })\r\n        if (res && res.status) {\r\n          let result = res.data.records[0]\r\n          this.signForm.deviceStatus = result.deviceStatus\r\n          this.signForm.remark = result.ext1\r\n          this.signForm.liquidLevel = result.liquidLevel\r\n          this.signForm.isReport = result.isReport\r\n          const att = await request({\r\n            url: '/xasw-pipe-operation/inspPointRecord',\r\n            method: 'get',\r\n            params: { id: result.id }\r\n          })\r\n          if (att && att.status) {\r\n            console.log('已巡检关键点详情数据', _cloneDeep(att));\r\n            this.signForm.inspImagesList = att.data.inspImagesList\r\n            this.attachment = att.data.inspImagesList[0].fileId\r\n            // 巡检要点list\r\n            this.keyPointsInspectionList = att?.data?.resultList || []\r\n          }\r\n          toast.clear()\r\n          this.signShow = true\r\n        }\r\n      }\r\n    },\r\n    // 深拷贝\r\n    deepClone(data) {\r\n      return JSON.parse(JSON.stringify(data))\r\n    },\r\n    reportEvent(feature) {\r\n      this.reportFooterShow = false\r\n      this.$router.push({\r\n        path: '/pages/inspectionManage/add-event',\r\n        query: {\r\n          taskId: this.taskDetail.taskId,\r\n          feature: feature,\r\n          rangeList: this.rangeList,\r\n          taskDetail: this.taskDetail,\r\n        },\r\n      })\r\n    },\r\n    GetDistance(coordArray1, coordArray2) {\r\n      let lng1 = coordArray1[0]\r\n      let lat1 = coordArray1[1]\r\n      let lng2 = coordArray2[0]\r\n      let lat2 = coordArray2[1]\r\n      let radLat1 = (lat1 * Math.PI) / 180.0\r\n      let radLat2 = (lat2 * Math.PI) / 180.0\r\n      let a = radLat1 - radLat2\r\n      let b = (lng1 * Math.PI) / 180.0 - (lng2 * Math.PI) / 180.0\r\n      let s =\r\n        2 *\r\n        Math.asin(\r\n          Math.sqrt(\r\n            Math.pow(Math.sin(a / 2), 2) +\r\n            Math.cos(radLat1) * Math.cos(radLat2) * Math.pow(Math.sin(b / 2), 2)\r\n          )\r\n        )\r\n      s = s * 6378.137 // EARTH_RADIUS;\r\n      s = Math.round(s * 10000) / 10000\r\n      return s\r\n    },\r\n    resetMapView() {\r\n      this.$refs.mymap && mapObj.map.resetNorthPitch()\r\n    }\r\n  },\r\n  beforeDestroy() {\r\n    Toast.clear()\r\n    this.pollingFlag = false\r\n    this.clearBufferTrack()\r\n    document.removeEventListener(\"pause\", this.pause)\r\n    document.removeEventListener(\"resume\", this.resume)\r\n    if (typeof yuanchu != 'undefined') {\r\n      yuanchu.locationAMap.stopRequestLocations()\r\n    }\r\n    localStorage.removeItem('startRecordLines')\r\n    bus.$off('startSignIn')\r\n  }\r\n}\r\n</script>\r\n<style lang=\"less\" scoped>\r\n//隐藏滚动条\r\n&::-webkit-scrollbar {\r\n  display: none; //Chrome | Safari\r\n}\r\n/deep/.mapboxgl-popup-content {\r\n  width: auto;\r\n  min-width: 280px;\r\n  height: 50px;\r\n  padding: 24px 36px;\r\n  border-radius: 18px;\r\n  box-shadow: 10px 10px 30px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.task-map {\r\n  width: 100%;\r\n  height: 100%;\r\n  overflow: hidden;\r\n\r\n  .content {\r\n    width: 100%;\r\n    height: 40%;\r\n    background: #ffffff;\r\n    box-shadow: 0px -6px 12px 0px rgba(104, 115, 127, 0.1);\r\n    border-radius: 30px 30px 0 0;\r\n    position: absolute;\r\n    bottom: 0;\r\n    z-index: 4;\r\n    transition: all 0.5s;\r\n    .contentArea {\r\n      width: 100%;\r\n      height: 100%;\r\n      background: #f5f7f9;\r\n      display: flex;\r\n      flex-direction: column;\r\n      .buttonArea {\r\n        width: var(--width);\r\n        padding: 30px 20px;\r\n        display: flex;\r\n        .button {\r\n          min-width: 160px;\r\n          margin: 0 10px;\r\n          border: none;\r\n          box-shadow: 0px 4px 16px 0px rgba(104, 115, 127, 0.06);\r\n        }\r\n      }\r\n      .listArea {\r\n        margin: 0 4%;\r\n        background: #ffffff;\r\n        height: calc(100% - 148px);\r\n        padding: 20px 36px 0;\r\n        border-radius: 16px 16px 0 0;\r\n        overflow-y: scroll;\r\n        .list {\r\n          height: 45px;\r\n          display: flex;\r\n          padding: 40px 0;\r\n          border-bottom: 1px solid #eeeeee;\r\n          .list_num {\r\n            min-width: 60px;\r\n            margin-right: 30px;\r\n            margin-left: 10px;\r\n            height: 43px;\r\n            font-size: 36px;\r\n            font-family: Helvetica-Bold, Helvetica;\r\n            font-weight: bold;\r\n            color: #1b67d8;\r\n            line-height: 43px;\r\n          }\r\n          .list_type {\r\n            min-width: 160px;\r\n            height: 45px;\r\n            font-size: 32px;\r\n            font-family: PingFangSC-Regular, PingFang SC;\r\n            font-weight: 400;\r\n            color: #333333;\r\n            line-height: 45px;\r\n          }\r\n          .list_id {\r\n            min-width: 200px;\r\n            height: 45px;\r\n            font-size: 32px;\r\n            font-family: PingFangSC-Regular, PingFang SC;\r\n            font-weight: 400;\r\n            color: #333333;\r\n            line-height: 45px;\r\n          }\r\n          .list_deal {\r\n            height: 45px;\r\n            font-size: 32px;\r\n            font-family: PingFangSC-Regular, PingFang SC;\r\n            font-weight: 400;\r\n            color: #1b67d8;\r\n            line-height: 45px;\r\n            display: flex;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  .inactive {\r\n    height: 0;\r\n  }\r\n\r\n  .tip-tools {\r\n    position: fixed;\r\n    display: flex;\r\n    top: 15%;\r\n    left: 200px;\r\n    border-radius: 16px;\r\n    padding: 24px;\r\n    background: #FFFFFF;\r\n    box-shadow: 0px 10px 18px 0px rgba(0, 0, 0, 0.06);\r\n    border: 2px solid rgba(23, 144, 254, 0.6);\r\n\r\n    .tipImg {\r\n      width: 32px;\r\n      height: 32px;\r\n      margin-right: 16px;\r\n    }\r\n\r\n    .context {\r\n      font-size: 24px;\r\n      font-family: MicrosoftYaHei;\r\n      color: #1B67D8;\r\n      line-height: 31px;\r\n    }\r\n  }\r\n\r\n  .confirm-tip {\r\n    width: 80%;\r\n    height: 44%;\r\n    margin: auto;\r\n    background: #FFFFFF;\r\n    border-radius: 16px;\r\n    margin: 50% auto;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    /deep/.contentSelf {\r\n      height: calc(100% - 164px);\r\n      padding: 32px;\r\n      display: flex;\r\n      flex-direction: column;\r\n      .icon {\r\n        width: 100%;\r\n        height: 100px;\r\n        display: flex;\r\n        margin: 24px 0 28px;\r\n      }\r\n      .info {\r\n        height: auto;\r\n        font-size: 28px;\r\n        font-family: PingFangSC-Regular, PingFang SC;\r\n        font-weight: 400;\r\n        color: #555555;\r\n        line-height: 40px;\r\n        text-align: center;\r\n      }\r\n    }\r\n    /deep/.confirm_btn {\r\n      width: 100%;\r\n      height: 100px;\r\n      display: flex;\r\n      .btn1 {\r\n        width: 50%;\r\n        height: 100%;\r\n        border-top: 1px solid #DCDEE3;\r\n        font-size: 32px;\r\n        font-family: PingFangSC-Regular, PingFang SC;\r\n        font-weight: 400;\r\n        color: #333333;\r\n        line-height: 100px;\r\n        text-align: center;\r\n      }\r\n      .btn2 {\r\n        border-right: 1px solid #DCDEE3;\r\n      }\r\n    }\r\n  }\r\n\r\n  .alert {\r\n    top: 2.22rem;\r\n    position: fixed;\r\n    width: 100%;\r\n    z-index: 4;\r\n    background-color: #62707c;\r\n    opacity: 0.5;\r\n    font-size: 1rem;\r\n\r\n    .u-alert-content {\r\n      width: 100%;\r\n    }\r\n  }\r\n\r\n  .progress {\r\n    width: 80%;\r\n    height: 1rem;\r\n    background-color: #fff;\r\n    box-shadow: 0 0.4rem 0.6rem 0 rgba(0, 0, 0, 0.2);\r\n    border-radius: 0.1rem;\r\n    margin: 0 0.3rem;\r\n    padding: 0.1rem 0.15rem;\r\n    position: fixed;\r\n    top: 2.5rem;\r\n\r\n    &-box {\r\n      width: 100%;\r\n      margin: 0.3rem 0;\r\n      display: flex;\r\n\r\n      .pro-dot {\r\n        width: 0.3rem;\r\n        height: 0.3rem;\r\n        border-radius: 50%;\r\n        float: left;\r\n        margin: auto 0.3rem;\r\n      }\r\n\r\n      .pro-text {\r\n        line-height: 0.5rem;\r\n        display: flex;\r\n        font-size: 12px;\r\n        float: left;\r\n      }\r\n    }\r\n  }\r\n\r\n  .pro-circle {\r\n    position: fixed;\r\n    width: 1rem;\r\n    height: 1rem;\r\n    right: 0.1rem;\r\n    padding: 0.1rem;\r\n    top: 2.5rem;\r\n    // margin: 0.27rem 0rem;\r\n    background-color: #fff;\r\n    z-index: 3;\r\n    box-shadow: 0rem 0.22rem 0.61rem 0rem rgba(0, 0, 0, 0.2);\r\n    border-radius: 0.1rem;\r\n\r\n    .progress-text-view {\r\n      font-size: 0.4rem;\r\n      z-index: 4;\r\n\r\n      .progress-text-up {\r\n        color: #306cc8;\r\n      }\r\n\r\n      .progress-text-down {\r\n        border-top: 0.05rem solid #555555;\r\n      }\r\n    }\r\n  }\r\n\r\n  .point-list {\r\n    position: fixed;\r\n    width: 1.2rem;\r\n    height: 1.2rem;\r\n    left: 0.3rem;\r\n    bottom: 2rem;\r\n    background-color: #fff;\r\n    z-index: 3;\r\n    box-shadow: 0rem 0.22rem 0.61rem 0rem rgba(0, 0, 0, 0.2);\r\n    border-radius: 0.27rem;\r\n\r\n    .list-image {\r\n      margin: 0.18rem;\r\n      width: 0.82rem;\r\n      height: 0.82rem;\r\n    }\r\n  }\r\n\r\n  .footer {\r\n    width: inherit;\r\n    padding: 1.11rem 0.83rem;\r\n    color: #333333;\r\n    background-color: #ffffff;\r\n    height: 3.55rem;\r\n    z-index: 4;\r\n    position: fixed;\r\n    bottom: 0rem;\r\n\r\n    &-content {\r\n      float: left;\r\n    }\r\n\r\n    &-btn {\r\n      float: right;\r\n      width: 4.44rem;\r\n      height: 1.77rem;\r\n      line-height: 1.77rem;\r\n      border-radius: 0.88rem;\r\n    }\r\n  }\r\n\r\n  .start-record {\r\n    position: absolute;\r\n    z-index: 3;\r\n    left: 50%;\r\n    bottom: 235px;\r\n    transform: translate(-50%, 0);\r\n\r\n    img {\r\n      width: 140px;\r\n      height: 140px;\r\n    }\r\n  }\r\n\r\n  .controlCard {\r\n    width: 100%;\r\n    height: 328px;\r\n    position: absolute;\r\n    bottom: 0;\r\n    background-image: url('~@/assets/img/inspection/controlBg.png');\r\n    background-repeat: no-repeat;\r\n    background-size: 100%;\r\n\r\n    .controlContent {\r\n      margin: 60px 30px 0;\r\n      display: flex;\r\n      flex-direction: column;\r\n\r\n      .infoContent {\r\n        display: flex;\r\n        flex-direction: column;\r\n        justify-content: space-around;\r\n        margin-bottom: 24px;\r\n\r\n        .block {\r\n          text-align: center;\r\n          width: 210px;\r\n          height: 160px;\r\n          display: flex;\r\n          flex-direction: column;\r\n          align-items: center;\r\n          background: rgba(27, 103, 216, 0.05);\r\n          border-radius: 16px;\r\n          // margin: 0 20px;\r\n\r\n          .rate {\r\n            width: 100%;\r\n            height: 50%;\r\n            display: flex;\r\n            align-items: center;\r\n            margin: auto;\r\n            font-size: 48px;\r\n            font-family: Helvetica-Bold, Helvetica;\r\n            font-weight: bold;\r\n            color: #306cc8;\r\n\r\n            .centerStyle {\r\n              margin: auto;\r\n              display: flex;\r\n              align-items: center;\r\n              font-size: 38px;\r\n              font-family: Helvetica-Bold, Helvetica;\r\n              font-weight: bold;\r\n\r\n              .inspKp {\r\n                padding-bottom: 3px;\r\n                padding-right: 3px;\r\n                color: #306cc8;\r\n              }\r\n\r\n              .uninspKp {\r\n                color: #191919;\r\n                letter-spacing: 3px;\r\n              }\r\n            }\r\n          }\r\n\r\n          .name {\r\n            font-size: 14px;\r\n            font-family: PingFangSC-Regular, PingFang SC;\r\n            font-weight: 400;\r\n            color: #555555;\r\n            width: 100%;\r\n            height: 33%;\r\n          }\r\n        }\r\n      }\r\n\r\n      .bottomSide {\r\n        width: 100%;\r\n        display: flex;\r\n        margin-top: 24px;\r\n        justify-content: space-around;\r\n      }\r\n\r\n      .endControl {\r\n        display: flex;\r\n        justify-content: space-between;\r\n        align-items: center;\r\n\r\n        .leftText {\r\n          width: 27%;\r\n          display: flex;\r\n          justify-content: space-around;\r\n          align-items: center;\r\n\r\n          img {\r\n            width: 32px;\r\n            height: 32px;\r\n            margin: auto;\r\n          }\r\n\r\n          /deep/.fm-count-down {\r\n            font-size: 24px;\r\n            color: #306cc8;\r\n          }\r\n        }\r\n\r\n        .rightButton {\r\n          display: flex;\r\n\r\n          .endBtn {\r\n            font-size: 24px;\r\n            width: 120px;\r\n            height: 60px;\r\n            background: #ffffff;\r\n            color: #306cc8;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  .viewCard {\r\n    width: 100%;\r\n    height: 260px;\r\n    position: absolute;\r\n    bottom: 0;\r\n    background: #FFFFFF;\r\n    box-shadow: 0px 0px 18px 0px rgba(104, 115, 127, 0.18);\r\n    // background-image: url('~@/assets/img/inspection/controlBg.png');\r\n    // background-repeat: no-repeat;\r\n    // background-size: 100%;\r\n\r\n    .controlContent {\r\n      margin: 32px 30px 0;\r\n      display: flex;\r\n      flex-direction: column;\r\n\r\n      .infoContent {\r\n        display: flex;\r\n        flex-direction: column;\r\n        justify-content: space-around;\r\n        margin-bottom: 24px;\r\n\r\n        .block {\r\n          text-align: center;\r\n          width: 210px;\r\n          height: 160px;\r\n          display: flex;\r\n          flex-direction: column;\r\n          align-items: center;\r\n          background: rgba(27, 103, 216, 0.05);\r\n          border-radius: 16px;\r\n          // margin: 0 20px;\r\n\r\n          .rate {\r\n            width: 100%;\r\n            height: 50%;\r\n            display: flex;\r\n            align-items: center;\r\n            margin: auto;\r\n            font-size: 48px;\r\n            font-family: Helvetica-Bold, Helvetica;\r\n            font-weight: bold;\r\n            color: #306cc8;\r\n\r\n            .centerStyle {\r\n              margin: auto;\r\n              display: flex;\r\n              align-items: center;\r\n              font-size: 38px;\r\n              font-family: Helvetica-Bold, Helvetica;\r\n              font-weight: bold;\r\n\r\n              .inspKp {\r\n                padding-bottom: 3px;\r\n                padding-right: 3px;\r\n                color: #306cc8;\r\n              }\r\n\r\n              .uninspKp {\r\n                color: #191919;\r\n                letter-spacing: 3px;\r\n              }\r\n            }\r\n          }\r\n\r\n          .name {\r\n            font-size: 14px;\r\n            font-family: PingFangSC-Regular, PingFang SC;\r\n            font-weight: 400;\r\n            color: #555555;\r\n            width: 100%;\r\n            height: 33%;\r\n          }\r\n        }\r\n      }\r\n\r\n      .bottomSide {\r\n        width: 100%;\r\n        display: flex;\r\n        margin-top: 24px;\r\n        justify-content: space-around;\r\n      }\r\n\r\n      .endControl {\r\n        display: flex;\r\n        justify-content: space-between;\r\n        align-items: center;\r\n\r\n        .leftText {\r\n          width: 27%;\r\n          display: flex;\r\n          justify-content: space-around;\r\n          align-items: center;\r\n\r\n          img {\r\n            width: 32px;\r\n            height: 32px;\r\n            margin: auto;\r\n          }\r\n\r\n          /deep/.fm-count-down {\r\n            font-size: 24px;\r\n            color: #306cc8;\r\n          }\r\n        }\r\n\r\n        .rightButton {\r\n          display: flex;\r\n\r\n          .endBtn {\r\n            font-size: 24px;\r\n            width: 120px;\r\n            height: 60px;\r\n            background: #ffffff;\r\n            color: #306cc8;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  .tool-box {\r\n    position: fixed;\r\n    width: 1.2rem;\r\n    height: auto;\r\n    right: 0.3rem;\r\n    bottom: 350px;\r\n\r\n    .refresh {\r\n      width: 1.2rem;\r\n      height: 1.2rem;\r\n      margin-bottom: 0.55rem;\r\n      background-color: #fff;\r\n      z-index: 3;\r\n      box-shadow: 0rem 0.22rem 0.61rem 0rem rgba(0, 0, 0, 0.2);\r\n      border-radius: 0.27rem;\r\n\r\n      &-image {\r\n        margin: 0.18rem;\r\n        width: 0.82rem;\r\n        height: 0.82rem;\r\n      }\r\n    }\r\n\r\n    .route {\r\n      width: 1.2rem;\r\n      height: 1.2rem;\r\n      margin-bottom: 0.55rem;\r\n      background-color: #fff;\r\n      z-index: 3;\r\n      box-shadow: 0rem 0.22rem 0.61rem 0rem rgba(0, 0, 0, 0.2);\r\n      border-radius: 0.27rem;\r\n\r\n      &-image {\r\n        margin: 0.18rem;\r\n        width: 0.82rem;\r\n        height: 0.82rem;\r\n      }\r\n    }\r\n\r\n    .location {\r\n      width: 1.2rem;\r\n      height: 1.2rem;\r\n      background-color: #fff;\r\n      z-index: 3;\r\n      box-shadow: 0rem 0.22rem 0.61rem 0rem rgba(0, 0, 0, 0.2);\r\n      border-radius: 60px;\r\n\r\n      &-image {\r\n        margin: 0.18rem;\r\n        width: 0.82rem;\r\n        height: 0.82rem;\r\n      }\r\n    }\r\n  }\r\n\r\n  /deep/.fm-popup {\r\n    background: #f5f7f9;\r\n  }\r\n\r\n  .popup-view {\r\n    height: auto;\r\n    width: auto;\r\n    margin: 32px;\r\n    overflow: scroll;\r\n    border-radius: 32px;\r\n    background-color: #fff;\r\n\r\n    /deep/.fm-radio--horizontal {\r\n      margin-right: 20px;\r\n    }\r\n\r\n    .title {\r\n      display: flex;\r\n      margin-top: 32px;\r\n      padding-bottom: 32px;\r\n      border-bottom: 1px #f5f5f5 solid;\r\n\r\n      img {\r\n        width: 6px;\r\n        height: 40px;\r\n      }\r\n\r\n      .deviceId {\r\n        margin-left: 32px;\r\n        font-size: 36px;\r\n        font-family: PingFangSC-Semibold, PingFang SC;\r\n        font-weight: 600;\r\n        color: #191919;\r\n        line-height: 50px;\r\n      }\r\n    }\r\n\r\n    /deep/.fm-uploader__wrapper {\r\n      margin-left: 16px;\r\n    }\r\n\r\n    .preview-cover {\r\n      position: absolute;\r\n      bottom: 0;\r\n      box-sizing: border-box;\r\n      width: 100%;\r\n      padding: 4px;\r\n      color: #fff;\r\n      font-size: 12px;\r\n      text-align: center;\r\n      background: rgba(0, 0, 0, 0.3);\r\n    }\r\n  }\r\n\r\n  .btnArea {\r\n    display: flex;\r\n\r\n    .btn {\r\n      width: 94%;\r\n      margin: 0 auto;\r\n    }\r\n\r\n    .btn1 {\r\n      width: 44%;\r\n      margin: 0 12px 0 30px;\r\n    }\r\n\r\n    .btn2 {\r\n      width: 44%;\r\n      margin: 0 30px 0 12px;\r\n    }\r\n  }\r\n\r\n  .confirm-pop {\r\n    .title {\r\n      border-left: 0.22rem solid #306cc8;\r\n      margin: 0.27rem;\r\n      padding-left: 0.55rem;\r\n    }\r\n\r\n    .content {\r\n      border-top: 0.027rem solid rgba(128, 128, 128, 0.322);\r\n      width: 11.66rem;\r\n      padding: 1.33rem;\r\n      text-align: center;\r\n      background-color: #fff;\r\n\r\n      &-view {\r\n        font-size: 0.88rem;\r\n      }\r\n\r\n      .confirm-btn {\r\n        margin-top: 2.22rem;\r\n        justify-items: center;\r\n\r\n        .popup-btn {\r\n          float: left;\r\n          width: 3.33rem;\r\n          height: 1.77rem;\r\n          border-radius: 0.27rem;\r\n\r\n          &-l {\r\n            margin-left: 0.55rem;\r\n            margin-right: 0.55rem;\r\n          }\r\n\r\n          &-r {\r\n            margin-left: 0.55rem;\r\n            margin-right: 0.55rem;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n</style>\r\n"]}]}