{"remainingRequest":"E:\\ty_project\\xasw-yy\\revenue\\xasw-mobile\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\ty_project\\xasw-yy\\revenue\\xasw-mobile\\src\\views\\PipeNetLeakDetection\\LeakDetectionMapPage.vue?vue&type=script&lang=js","dependencies":[{"path":"E:\\ty_project\\xasw-yy\\revenue\\xasw-mobile\\src\\views\\PipeNetLeakDetection\\LeakDetectionMapPage.vue","mtime":1708928163406},{"path":"E:\\ty_project\\xasw-yy\\revenue\\xasw-mobile\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\ty_project\\xasw-yy\\revenue\\xasw-mobile\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"E:\\ty_project\\xasw-yy\\revenue\\xasw-mobile\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\ty_project\\xasw-yy\\revenue\\xasw-mobile\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["LeakDetectionMapPage.vue"],"names":[],"mappings":";AAufile":"LeakDetectionMapPage.vue","sourceRoot":"src/views/PipeNetLeakDetection","sourcesContent":["<template>\r\n  <div class=\"MapPage\">\r\n    <fm-nav-bar\r\n      left-arrow\r\n      :title=\"taskDetail.taskName\"\r\n      @click-left=\"goBackToTask\"\r\n      @click-right=\"onSelect\"\r\n    >\r\n      <template #right>\r\n        <template>\r\n          <i\r\n            v-if=\"!isView && isInspectorLoad\"\r\n            class=\"fm-icon fm-icon-plus\"\r\n            style=\"font-size: 18px\"\r\n          ></i>\r\n        </template>\r\n      </template>\r\n    </fm-nav-bar>\r\n    <!-- 地图 -->\r\n    <div class=\"mapContainer\">\r\n      <MapComp ref=\"mymap\" :ifInspection=\"true\" @mapLoaded=\"mapLoaded\"></MapComp>\r\n    </div>\r\n    <!-- 开始记录与结束记录 -->\r\n    <div class=\"start-record\" v-if=\"!isView && isInspectorLoad\">\r\n      <img\r\n        v-if=\"!ifRecording\"\r\n        :src=\"require('@/assets/img/inspection/暂停.png')\"\r\n        @click=\"startInspRecord\"\r\n      />\r\n      <img v-else :src=\"require('@/assets/img/inspection/开始.png')\" @click=\"endRecord('pause')\" />\r\n    </div>\r\n    <!-- 数据面板 -->\r\n    <!-- 非查看状态 -->\r\n    <div class=\"controlCard\" v-if=\"!isView && isInspectorLoad\">\r\n      <div class=\"controlContent\">\r\n        <div class=\"infoContent\">\r\n          <div class=\"endControl\">\r\n            <div class=\"leftText\">\r\n              <img :src=\"require('@/assets/img/inspection/剩余时间.png')\" />\r\n              <fm-count-down\r\n                style=\"margin: auto\"\r\n                :time=\"getRestTime(taskDetail.taskEndTime)\"\r\n                format=\"DD天HH小时\"\r\n              />\r\n            </div>\r\n            <div class=\"rightButton\">\r\n              <fm-button v-show=\"ifRecording\" class=\"endBtn\" round @click=\"endTask\">结束</fm-button>\r\n            </div>\r\n          </div>\r\n          <div class=\"bottomSide\">\r\n            <div class=\"block\">\r\n              <div class=\"rate\" style=\"font-size: 18px\">\r\n                <div class=\"centerStyle\">\r\n                  {{ changeToRate(taskDetail.coverage) }}\r\n                </div>\r\n              </div>\r\n              <div class=\"nameStyle\" style=\"font-size: 14px\">覆盖率</div>\r\n            </div>\r\n            <div class=\"block\" @click=\"reportClick\" style=\"cursor: pointer\">\r\n              <div class=\"rate\" style=\"font-size: 18px\">\r\n                <div class=\"centerStyle\">\r\n                  {{ problemDataList.length }}\r\n                </div>\r\n              </div>\r\n              <div class=\"nameStyle\" style=\"font-size: 14px\">上报泄漏点</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <!-- 查看状态 -->\r\n    <div class=\"viewCard\" v-if=\"isView || !isInspectorLoad\">\r\n      <div class=\"controlContent\">\r\n        <div class=\"infoContent\">\r\n          <div class=\"bottomSide\">\r\n            <div class=\"block\">\r\n              <div class=\"rate\" style=\"font-size: 18px\">\r\n                <div class=\"centerStyle\">\r\n                  {{ changeToRate(taskDetail.coverage) }}\r\n                </div>\r\n              </div>\r\n              <div class=\"nameStyle\" style=\"font-size: 14px\">覆盖率</div>\r\n            </div>\r\n            <div class=\"block\" @click=\"reportClick\" style=\"cursor: pointer\">\r\n              <div class=\"rate\" style=\"font-size: 18px\">\r\n                <div class=\"centerStyle\">\r\n                  {{ problemDataList.length }}\r\n                </div>\r\n              </div>\r\n              <div class=\"nameStyle\" style=\"font-size: 14px\">上报泄漏点</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <!-- 轨迹显示与定位功能 -->\r\n    <div class=\"tool-box\">\r\n      <!-- 地图旋转、俯视角度重置 -->\r\n      <!-- <div class=\"refresh\" @click=\"resetMapView\">\r\n        <fm-image class=\"refresh-image\" :src=\"require('@/assets/img/inspection/reset.png')\"></fm-image>\r\n      </div>\r\n      <div class=\"route\" @click=\"showRoute\">\r\n        <fm-image\r\n          v-if=\"isShowRoute\"\r\n          class=\"route-image\"\r\n          :src=\"require('@/assets/img/inspection/route2.png')\"\r\n        ></fm-image>\r\n        <fm-image v-else class=\"route-image\" :src=\"require('@/assets/img/inspection/route.png')\"></fm-image>\r\n      </div> -->\r\n      <div class=\"location\" @click=\"startLocation\">\r\n        <fm-image\r\n          class=\"location-image\"\r\n          :src=\"require('@/assets/img/inspection/location.png')\"\r\n        ></fm-image>\r\n      </div>\r\n    </div>\r\n    <fm-popup\r\n      :visible.sync=\"reportShow\"\r\n      @close=\"handleClose\"\r\n      round\r\n      position=\"bottom\"\r\n      :overlay-style=\"{ background: 'rgba(0, 0, 0, 0.1)' }\"\r\n      :style=\"{ height: '50%' }\"\r\n    >\r\n      <fm-tabs v-model=\"active\" swipeable style=\"height: 100%\">\r\n        <fm-tab label=\"\">\r\n          <div v-for=\"(item, index) in problemDataList\" :key=\"index\">\r\n            <LeakReportCardInfo\r\n              :cardInfo=\"item\"\r\n              @toDetailPanel=\"toDetailPanel\"\r\n              @flyToPoint=\"flyToPoint\"\r\n            >\r\n            </LeakReportCardInfo>\r\n          </div>\r\n        </fm-tab>\r\n      </fm-tabs>\r\n    </fm-popup>\r\n    <!-- 提示层 -->\r\n    <div v-show=\"ifTips\" class=\"tip-tools\">\r\n      <img :src=\"require('@/assets/img/tips.png')\" class=\"tipImg\" />\r\n      <div class=\"context\">请在地图上选择泄漏管线</div>\r\n    </div>\r\n    <fm-overlay :show=\"ifEndTask\" z-index=\"4\">\r\n      <div class=\"confirm-tip\">\r\n        <div class=\"content\">\r\n          <div class=\"icon\">\r\n            <img\r\n              :src=\"require('@/assets/img/inspection/终止.png')\"\r\n              width=\"60\"\r\n              style=\"margin: auto\"\r\n            />\r\n          </div>\r\n          <!-- 结束任务时判断是否已经完成巡检，如果没完成就提示是否退出 -->\r\n          <div class=\"info\">\r\n            <span>{{ `确定提前中止巡检任务？` }}</span>\r\n          </div>\r\n          <div class=\"input\">\r\n            <fm-field\r\n              v-model=\"stopReason\"\r\n              placeholder=\"请输入终止原因\"\r\n              rows=\"3\"\r\n              autosize\r\n              type=\"textarea\"\r\n              maxlength=\"200\"\r\n              show-word-limit\r\n            ></fm-field>\r\n          </div>\r\n        </div>\r\n        <div class=\"confirm_btn\">\r\n          <div class=\"btn1 btn2\" @click=\"continueTask\">继续任务</div>\r\n          <div class=\"btn1\" @click=\"stopTask\">中止任务</div>\r\n        </div>\r\n      </div>\r\n    </fm-overlay>\r\n    <fm-overlay :show=\"ifLeaveTask\" z-index=\"4\">\r\n      <!-- 当前正在巡检中时，返回任务页时提示是否离开该任务 -->\r\n      <div class=\"confirm-tip\" style=\"height: 29%\">\r\n        <div class=\"content\">\r\n          <div class=\"icon\">\r\n            <img\r\n              :src=\"require('@/assets/img/inspection/终止.png')\"\r\n              width=\"60\"\r\n              style=\"margin: auto\"\r\n            />\r\n          </div>\r\n          <div class=\"info\">\r\n            <span>{{ `当前为测漏状态，继续退出会暂停测漏，请确定是否退出？` }}</span>\r\n          </div>\r\n        </div>\r\n        <div class=\"confirm_btn\">\r\n          <div class=\"btn1 btn2\" @click=\"cancelLeave\">取消</div>\r\n          <div class=\"btn1\" @click=\"confirmLeave\">退出</div>\r\n        </div>\r\n      </div>\r\n    </fm-overlay>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport Vue from 'vue'\r\nimport axios from 'axios'\r\nimport * as Api from './api'\r\nimport bus from '@/utils/bus'\r\nimport { ENUM } from '@/store/State/stateTypes'\r\nimport * as turf from '@turf/turf'\r\nimport { bbox, center as getCenter } from '@turf/turf'\r\nimport _cloneDeep from 'lodash/cloneDeep'\r\nimport { addIconToMap } from '@/utils/mapUtils'\r\nimport mapboxgl from 'mapbox-gl'\r\nimport { Toast, Dialog, Notify } from 'fawkes-mobile-lib'\r\nimport MapComp from '@/views/inspectMap/index.vue'\r\nimport mixins from '@/views/inspectMap/mixins/mixins.js'\r\nimport dayjs from 'dayjs'\r\nimport request from '@/utils/request'\r\nimport LeakReportCardInfo from './LeakReportCardInfo'\r\nimport Popup from './Popup.vue'\r\nconst PopupItem = Vue.extend(Popup)\r\n\r\nconst mapObj = {\r\n  map: null,\r\n  mapInstance: null,\r\n}\r\nlet pauseStateTrackPoints = []\r\nlet pauseStatePipeIdList = []\r\nexport default {\r\n  name: '',\r\n  mixins: [mixins],\r\n  components: {\r\n    MapComp,\r\n    LeakReportCardInfo,\r\n  },\r\n  data() {\r\n    return {\r\n      isResume: true,\r\n      // 添加至地图的图片\r\n      icons: [\r\n        {\r\n          name: '泄漏点',\r\n          url: require('@/assets/img/map/泄漏点.png'),\r\n        },\r\n      ],\r\n      // 当前点击的任务\r\n      taskDetail: {},\r\n      // 巡检员信息\r\n      userInfo: {},\r\n      // 巡检任务下所有巡检管线\r\n      allTaskLines: [],\r\n      // 当前巡检员所处位置\r\n      currentPosition: null,\r\n      // 是否开始记录\r\n      ifRecording: false,\r\n      // 轮询状态\r\n      pollingFlag: false,\r\n      // 是否为查看状态\r\n      isView: false,\r\n      // 是否为巡检员登陆，true为巡检员登录\r\n      isInspectorLoad: true,\r\n      isOnLoad: false,\r\n      // 轨迹点\r\n      trackPointList: [],\r\n      // 轨迹时间\r\n      trackPointTimeList: [],\r\n      // 超速线段\r\n      overSpeedTrackLineList: [],\r\n      // 记录开始巡检的时间，用于判断是否在开始巡检的10s内\r\n      startRecordTimer: '',\r\n      // 上报失败的巡检轨迹点位数组\r\n      reportFailTrackPoints: [],\r\n      // 右上角加号弹框\r\n      showPopover: false,\r\n      ifTips: false,\r\n      actions: [\r\n        {\r\n          text: '上报漏点',\r\n        },\r\n      ],\r\n      accessToken: this.$storage.get('access_token'),\r\n      formToken: '',\r\n      header: {},\r\n      // 用于判断是否加载完上报漏点数据\r\n      reportDataIsLoaded: false,\r\n      // 存储漏点工单\r\n      problemDataList: [],\r\n      // 上报是否显示\r\n      reportShow: false,\r\n      active: 0,\r\n      ifEndTask: false,\r\n      // 结束原因\r\n      stopReason: '',\r\n      ifLeaveTask: false,\r\n    }\r\n  },\r\n  created() {\r\n    console.log('存储在本地的检漏任务', JSON.parse(localStorage.getItem('leakDetectionData')))\r\n\r\n    // 当前点击的任务，从本地中获取\r\n    this.taskDetail = JSON.parse(localStorage.getItem('leakDetectionData')).nowClickTask\r\n    // 是否是查看状态\r\n    this.isView = JSON.parse(localStorage.getItem('leakDetectionData')).isView\r\n    this.userInfo = this.$store.state.userInfo\r\n    console.log('this.userInfo', this.userInfo)\r\n    console.log('当前点击的任务', this.taskDetail)\r\n\r\n    console.log(\r\n      this.userInfo.userName,\r\n      this.taskDetail.inspector,\r\n      '------巡检人员与当前登陆账号------',\r\n      this.userInfo.userFullname,\r\n      this.taskDetail.inspectorFullName\r\n    )\r\n\r\n    // 当巡检人员与当前登陆账号一致时才能检漏\r\n    if (\r\n      this.userInfo.userName != this.taskDetail.inspector &&\r\n      this.userInfo.userFullname != this.taskDetail.inspectorFullName\r\n    ) {\r\n      console.log('人员不一致')\r\n      // 是否为巡检员登陆，true为巡检员登录\r\n      // this.isInspectorLoad = false\r\n    }\r\n    // inspector: \"chen_bolin\"\r\n    // inspectorFullName: \"陈博林\"\r\n\r\n    // userFullname: \"宋凯龙\"\r\n    // userName: \"song_kl\"\r\n  },\r\n  mounted() {\r\n    document.addEventListener('pause', this.pause, false)\r\n    document.addEventListener('resume', this.resume, false)\r\n    localStorage.setItem('startRecordLines', 'end')\r\n    // const id = JSON.parse(localStorage.getItem('leakDetectionData')).taskId\r\n    // console.log('----------------------', id)\r\n    // this.getTaskById(id)\r\n    // this.getTrackRecordsById(id)\r\n    // this.getAppInspData(id)\r\n    // !(function computedPosition() {\r\n    //   let gapTimer = 10\r\n    //   if (that.currentPosition) {\r\n    //     // 计算当前时间与当前插件返回的时间的间隔\r\n    //     let gap = (new Date().getTime() - new Date(that.currentPosition.locTime).getTime()) / 1000\r\n    //     // 如果间隔时间大于某一值，则说明在gapTimer时间内没有收到来自插件的新点位\r\n    //     if (gap > gapTimer) {\r\n    //       // 开启提示\r\n    //       // Notify.warning({ message: '当前GPS信号较弱,位置和轨迹更新可能缓慢', duration: 5000 })\r\n    //       let t = setTimeout(() => {\r\n    //         // 提示结束，并开始下次调用\r\n    //         computedPosition()\r\n    //       }, 15000)\r\n    //     } else {\r\n    //       // 开始下次调用\r\n    //       let t = setTimeout(() => {\r\n    //         computedPosition()\r\n    //       }, 10000)\r\n    //     }\r\n    //   } else {\r\n    //     // Notify.warning({ message: '当前GPS无信', duration: 5000 })\r\n    //     let t = setTimeout(() => {\r\n    //       computedPosition()\r\n    //     }, 10000)\r\n    //   }\r\n    // })()\r\n  },\r\n  methods: {\r\n    // 深拷贝\r\n    deepClone(data) {\r\n      return JSON.parse(JSON.stringify(data))\r\n    },\r\n    pause() {\r\n      console.log('进入后台')\r\n      if (this.ifRecording && this.isResume) {\r\n        this.isResume = false\r\n      }\r\n    },\r\n    resume() {\r\n      console.log('进入前台')\r\n      if (this.ifRecording) {\r\n        this.isResume = true\r\n        pauseStateTrackPoints.length > 0 &&\r\n          this.upLoadPauseStateTrackPoints(this.deepClone(pauseStateTrackPoints))\r\n        pauseStatePipeIdList.length > 0 &&\r\n          this.upLoadPauseStatePipeIdList(this.deepClone(pauseStatePipeIdList))\r\n      }\r\n    },\r\n    upLoadPauseStateTrackPoints(data) {\r\n      // app添加上传失败点的管网检漏轨迹\r\n      Api.inspectionTrack(data)\r\n        .then((res) => {\r\n          if (res && res.status) {\r\n            console.log('后台巡检轨迹补充点位上传成功')\r\n            pauseStateTrackPoints.splice(0, data.length) // 移除上传成功的点位。避免重复上传\r\n          } else {\r\n            console.log('后台巡检轨迹补充点位上传异常')\r\n            this.reportFailTrackPoints.push(...data)\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          setTimeout(() => {\r\n            this.upLoadPauseStateTrackPoints(data)\r\n          }, 5 * 1000)\r\n        })\r\n    },\r\n    upLoadPauseStatePipeIdList(data) {\r\n      let that = this\r\n      // app添加管网检漏记录\r\n      Api.recordInspLine(data)\r\n        .then(async (res) => {\r\n          if (res.status) {\r\n            console.log('后台巡检管线补充数据上传成功')\r\n            pauseStatePipeIdList.splice(0, data.length) // 移除上传成功的数据。避免重复上传\r\n            // 根据ID查询当前检漏任务\r\n            const res = await Api.getInspLeakTaskDetail({\r\n              id: JSON.parse(localStorage.getItem('leakDetectionData')).taskId,\r\n            })\r\n            console.log('根据ID查询当前检漏任务', res)\r\n            if (res.status) {\r\n              that.taskDetail = res.data\r\n            }\r\n          } else {\r\n            that.$refs.mymap.uploadFiledPipeIdList.push(...data)\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          setTimeout(() => {\r\n            this.upLoadPauseStatePipeIdList(data)\r\n          }, 5 * 1000)\r\n        })\r\n    },\r\n    // 剩余时间\r\n    getRestTime(time) {\r\n      return time ? new Date(time).getTime() - new Date().getTime() : 0\r\n    },\r\n    // 覆盖率计算\r\n    changeToRate(coverage) {\r\n      if (coverage != null && typeof (coverage * 1) == 'number') {\r\n        return coverage + '%'\r\n      } else {\r\n        return '0%'\r\n      }\r\n    },\r\n    // 地图初始化\r\n    async mapLoaded(mapInstance) {\r\n      mapObj.mapInstance = mapInstance\r\n      mapObj.map = mapInstance.map\r\n      // 添加起点终点图片\r\n      this.addMapImg()\r\n      await addIconToMap(mapObj.map, this.icons)\r\n      // 添加任务范围、管线图层source、layer\r\n      this.addSourceLayer()\r\n\r\n      //修改供水厂图标\r\n      mapObj.map.setLayoutProperty('map_waterwork', 'icon-image', '供水厂')\r\n      mapObj.map.setLayoutProperty('map_waterwork', 'icon-size', 0.6)\r\n      mapObj.map.setLayoutProperty('map_supply_pump', 'icon-image', '给水加压泵站')\r\n      mapObj.map.setLayoutProperty('map_supply_pump', 'icon-size', 0.6)\r\n      // 隐藏六水合一默认图层\r\n      mapObj.map.setLayoutProperty('rd_map_comb', 'visibility', 'none')\r\n      mapObj.map.setLayoutProperty('rd_map_manhole', 'visibility', 'none')\r\n      // 污水相关\r\n      mapObj.map.setLayoutProperty('rd_map_drainpipe_ws_big', 'visibility', 'none')\r\n      mapObj.map.setLayoutProperty('rd_map_drainpipe_ws_big_direction', 'visibility', 'none')\r\n      mapObj.map.setLayoutProperty('rd_map_drainpipe_ws_small', 'visibility', 'none')\r\n      mapObj.map.setLayoutProperty('rd_map_drainpipe_ws_small_direction', 'visibility', 'none')\r\n      // 雨水相关\r\n      mapObj.map.setLayoutProperty('rd_map_drainpipe_ys_big', 'visibility', 'none')\r\n      mapObj.map.setLayoutProperty('rd_map_drainpipe_ys_big_direction', 'visibility', 'none')\r\n      mapObj.map.setLayoutProperty('rd_map_drainpipe_ys_small', 'visibility', 'none')\r\n      mapObj.map.setLayoutProperty('rd_map_drainpipe_ys_small_direction', 'visibility', 'none')\r\n      // 显示供水管线图层\r\n      mapObj.map.setLayoutProperty('map_supply_pipe_distribute', 'visibility', 'visible')\r\n      mapObj.map.setLayoutProperty('map_supply_pipe_circulating', 'visibility', 'visible')\r\n      mapObj.map.setLayoutProperty('map_supply_pipe_delivery', 'visibility', 'visible')\r\n      // mapObj.map.setLayoutProperty( \"1111111111111111111111111\", \"visibility\", \"visible\" );\r\n      mapObj.map.setLayoutProperty('map_waterwork', 'visibility', 'visible')\r\n      mapObj.map.setLayoutProperty('map_supply_pump', 'visibility', 'visible')\r\n      // mapObj.map.setLayoutProperty( \"1111111111111111111111111\", \"visibility\", \"visible\" );\r\n      mapObj.map.setLayoutProperty('map_supply_valve', 'visibility', 'visible')\r\n      mapObj.map.setLayoutProperty('map_supply_firehydrant', 'visibility', 'visible')\r\n\r\n      // 添加任务范围、管线图层\r\n      await this.addTaskRangeAndLines()\r\n      // 问题上报接口\r\n      await this.getProblemDataList()\r\n      // this.getTaskById(id)\r\n\r\n      // 巡检人员source已添加\r\n\r\n      // 设置巡检员位置\r\n      // this.$refs.mymap.setInspUserPosition({\r\n      //   longitude: 115.92987078013635,\r\n      //   latitude: 39.062062836990066,\r\n      // })\r\n\r\n      // 巡检模拟，点击地图模拟走动\r\n      // mapObj.map.on('click', (e) => {\r\n      //   console.log('点击地图', e.lngLat)\r\n      //   this.currentPosition = {\r\n      //     longitude: e.lngLat.lng,\r\n      //     latitude: e.lngLat.lat,\r\n      //   }\r\n      //   // {\r\n      //   //   lng: 115.92101866271503,\r\n      //   //   lat: 39.06137929912413,\r\n      //   // })\r\n      // })\r\n      // this.currentPosition = {\r\n      //   longitude: '115.90457697779209',\r\n      //   latitude: '39.045671883888986',\r\n      // }\r\n      // 人员定位\r\n      if (typeof yuanchu != 'undefined') {\r\n        yuanchu.locationAMap.requestSingleLocation(\r\n          ['1'],\r\n          (res) => {\r\n            this.currentPosition = JSON.parse(JSON.stringify(res))\r\n            const param = {\r\n              ...this.currentPosition,\r\n            }\r\n            this.$refs.mymap.setInspUserPosition(param)\r\n          },\r\n          (err) => {\r\n            console.log('err', err)\r\n          }\r\n        )\r\n      }\r\n      console.log('this.currentPosition', this.currentPosition)\r\n    },\r\n    // 根据速度改变巡检管线颜色\r\n    async changeInspLineSourceBySpeed(position) {\r\n      const coord = [parseFloat(position.longitude), parseFloat(position.latitude)]\r\n      const point = turf.point(coord)\r\n      try {\r\n        const that = this\r\n        let timer = setInterval(function () {\r\n          if (mapObj.map.getSource('inspUser') && mapObj.map.isSourceLoaded('inspUser')) {\r\n            clearInterval(timer)\r\n            if (true) {\r\n              // 改变周围要素的状态\r\n              let buffered = turf.buffer(point, 0.015, { unit: 'kilometers' })\r\n              that.changeInspLineState(buffered)\r\n            }\r\n          }\r\n        }, 100)\r\n      } catch (e) {\r\n        console.log(e)\r\n      }\r\n    },\r\n    // 设置巡检管线为已巡检\r\n    changeInspLineState(geometry) {\r\n      let that = this\r\n      // 将地理坐标系转化为屏幕坐标系\r\n      function geoTransToPixel(geom) {\r\n        const polygonBox = turf.bbox(geom)\r\n        const southWest = [polygonBox[0], polygonBox[1]]\r\n        const northEast = [polygonBox[2], polygonBox[3]]\r\n        let southWestPointPixel = mapObj.map.project(southWest)\r\n        let northEastPointPixel = mapObj.map.project(northEast)\r\n        // 增大bbox的查询范围\r\n        southWestPointPixel = [southWestPointPixel.x - 50, southWestPointPixel.y + 50]\r\n        northEastPointPixel = [northEastPointPixel.x + 50, northEastPointPixel.y - 50]\r\n        return [southWestPointPixel, northEastPointPixel]\r\n      }\r\n      // 对每个划分出来的bbox进行处理\r\n      async function chunk(geom) {\r\n        // let wasLoaded = false;\r\n        // if (wasLoaded) return;\r\n        console.log('geoTransToPixel(geom)', geoTransToPixel(geom))\r\n        // 查询屏幕范围内中任务范围内的管线图层（红色或者绿色）\r\n        const boxFeatures = mapObj.map.queryRenderedFeatures(geoTransToPixel(geom), {\r\n          layers: ['detectionPipeLayer'],\r\n        })\r\n        console.log(boxFeatures, 'boxFeatures')\r\n\r\n        // 存储管线与真实的范围相交且没有被巡检过的管线\r\n        let tempPipeList = []\r\n        boxFeatures.forEach((feat) => {\r\n          try {\r\n            // const result = turf.intersect(feat.geometry, geometry);\r\n            // 如果两个几何图形的交点为空集，则返回(TRUE)。\r\n            const result = turf.booleanDisjoint(feat.geometry, geometry)\r\n            console.log(\r\n              '点与范围是否相交------------------------------------',\r\n              result,\r\n              feat.geometry,\r\n              geometry\r\n            )\r\n            // 如果查出的要素与真实的范围相交且没有被巡检过，则改变其状态，并记录其关键字\r\n            if (!result && !feat.state.isInsp) {\r\n              mapObj.map.setFeatureState(\r\n                {\r\n                  source: feat.source,\r\n                  id: feat.id,\r\n                },\r\n                { isInsp: true }\r\n              )\r\n\r\n              if (!tempPipeList.map((it) => it.pipeId).includes(feat.id)) {\r\n                let date = that.$dayjs().format('YYYY-MM-DD HH:mm:ss')\r\n                tempPipeList.push({\r\n                  portalId: that.taskDetail.portalId,\r\n                  inspDate: date, // 巡检日期\r\n                  pipeId: feat.id, // 管线id\r\n                  ext3: '供水',\r\n                  pipeLength: feat.properties['length'] || 0, // 管线长度\r\n                  taskId: JSON.parse(localStorage.getItem('leakDetectionData')).taskId, // 任务id\r\n                })\r\n              }\r\n            }\r\n          } catch (error) {\r\n            console.log(error)\r\n          }\r\n        })\r\n        if (that.isResume) {\r\n          tempPipeList.length > 0 &&\r\n            // app添加管网检漏记录\r\n            Api.recordInspLine(tempPipeList).then(async (res) => {\r\n              if (res.status) {\r\n                console.log('管线上传成功')\r\n                // 根据ID查询当前检漏任务\r\n                const res = await Api.getInspLeakTaskDetail({\r\n                  id: JSON.parse(localStorage.getItem('leakDetectionData')).taskId,\r\n                })\r\n                console.log('根据ID查询当前检漏任务', res)\r\n                if (res.status) {\r\n                  that.taskDetail = res.data\r\n                }\r\n                // bus.$emit('updateData')\r\n              } else {\r\n                console.log('上传失败的tempPipeList: ', tempPipeList)\r\n                // 上传失败的已巡检管线id\r\n                that.$refs.mymap.uploadFiledPipeIdList.push(...tempPipeList)\r\n              }\r\n            })\r\n        } else {\r\n          tempPipeList.length > 0 && pauseStatePipeIdList.push(...tempPipeList)\r\n        }\r\n      }\r\n      function cb(features) {\r\n        if (features.length > 0) {\r\n          setTimeout(() => {\r\n            chunk(features.shift())\r\n            cb(features)\r\n          }, 100)\r\n        }\r\n      }\r\n      cb([geometry])\r\n    },\r\n    // 添加任务范围、管线图层\r\n    async addTaskRangeAndLines() {\r\n      // 根据ID查询当前检漏任务\r\n      const resData1 = await Api.getInspLeakTaskDetail({ id: this.taskDetail.id })\r\n      // 当前点击的任务，从接口中获取\r\n      this.taskDetail = resData1?.data || {}\r\n      this.taskDetail.taskType = '人巡'\r\n      console.log('根据ID查询当前检漏任务', this.taskDetail)\r\n      // ---------------------------------------------------------------------------------------\r\n      // 添加范围图层并定位\r\n      this.setDetectionRangeData(JSON.parse(this.taskDetail.geom))\r\n\r\n      // 分页查询管网已检漏记录\r\n      const resData2 = await Api.getHasInspLeakPipe({\r\n        taskId: this.taskDetail.id,\r\n        page: 1,\r\n        size: 99999,\r\n      })\r\n      let hasInspPipe = []\r\n      if (resData2.status) {\r\n        hasInspPipe = resData2.data.records.map((item) => item.pipeId)\r\n        console.log('分页查询管网已检漏记录', resData2.data.records)\r\n      }\r\n\r\n      // 根据任务范围查询管线数据\r\n      let params = {\r\n        bizType: '供水',\r\n        devType: '管线',\r\n        geomStr: this.taskDetail.geom,\r\n        pageNum: 1,\r\n        pageSize: 99999,\r\n      }\r\n      await Api.getAllLeakLines(params).then((res) => {\r\n        console.log('巡检任务下所有巡检管线', res)\r\n        if (res.status && res.data.list.length > 0) {\r\n          // 巡检任务下所有巡检管线\r\n          this.allTaskLines = []\r\n          res.data.list.forEach((item) => {\r\n            if (hasInspPipe.includes(item.id)) {\r\n              // 巡检任务下所有巡检管线-已巡检\r\n              this.allTaskLines.push({\r\n                type: 'Feature',\r\n                id: item.id,\r\n                geometry: JSON.parse(item.geom),\r\n                properties: {\r\n                  isInsp: true,\r\n                  ...item,\r\n                },\r\n              })\r\n              mapObj.map.setFeatureState(\r\n                {\r\n                  source: 'detectionPipe',\r\n                  id: item.id,\r\n                },\r\n                {\r\n                  // 已巡检，绿色\r\n                  isInsp: true,\r\n                }\r\n              )\r\n            } else {\r\n              // 巡检任务下所有巡检管线-未巡检\r\n              this.allTaskLines.push({\r\n                type: 'Feature',\r\n                id: item.id,\r\n                geometry: JSON.parse(item.geom),\r\n                properties: {\r\n                  isInsp: false,\r\n                  ...item,\r\n                },\r\n              })\r\n              mapObj.map.setFeatureState(\r\n                {\r\n                  source: 'detectionPipe',\r\n                  id: item.id,\r\n                },\r\n                // 未巡检，红色\r\n                {\r\n                  isInsp: false,\r\n                }\r\n              )\r\n            }\r\n          })\r\n          // 添加范围内管线图层\r\n          mapObj.map.getSource('detectionPipe').setData({\r\n            type: 'FeatureCollection',\r\n            features: this.allTaskLines,\r\n          })\r\n        }\r\n      })\r\n    },\r\n    // 添加任务范围、管线图层source、layer\r\n    addSourceLayer() {\r\n      // 范围面及边框\r\n      mapObj.map.addSource('detectionRange', {\r\n        type: 'geojson',\r\n        data: {\r\n          type: 'FeatureCollection',\r\n          features: [],\r\n        },\r\n      })\r\n      mapObj.map.addLayer({\r\n        id: 'detectionRangeLayer_fill',\r\n        source: 'detectionRange',\r\n        type: 'fill',\r\n        paint: {\r\n          'fill-color': '#32C5FF',\r\n          'fill-opacity': 0.1,\r\n        },\r\n      })\r\n      mapObj.map.addLayer({\r\n        id: 'detectionRangeLayer_line',\r\n        source: 'detectionRange',\r\n        type: 'line',\r\n        paint: {\r\n          'line-color': '#32C5FF',\r\n          'line-width': 2,\r\n          'line-dasharray': [4, 4],\r\n        },\r\n      })\r\n\r\n      // 范围内管线\r\n      mapObj.map.addSource('detectionPipe', {\r\n        type: 'geojson',\r\n        data: {\r\n          type: 'FeatureCollection',\r\n          features: [],\r\n        },\r\n      })\r\n      mapObj.map.addLayer(\r\n        {\r\n          id: 'detectionPipeLayer',\r\n          source: 'detectionPipe',\r\n          type: 'line',\r\n          paint: {\r\n            'line-color': [\r\n              'case',\r\n              ['boolean', ['feature-state', 'isInsp'], false],\r\n              '#44BA5A',\r\n              '#FF0000',\r\n            ],\r\n            'line-width': 3,\r\n          },\r\n        },\r\n        'rd_map_outfall'\r\n      )\r\n    },\r\n    // 添加范围图层并定位\r\n    setDetectionRangeData(range) {\r\n      let bbox = turf.bbox({\r\n        type: 'FeatureCollection',\r\n        features: [turf.polygon(range.coordinates)],\r\n      })\r\n      if (mapObj.map && mapObj.map.getSource('detectionRange')) {\r\n        mapObj.map.getSource('detectionRange').setData(range)\r\n        mapObj.map.fitBounds(bbox, {\r\n          padding: { top: 10, bottom: 25, left: 15, right: 5 },\r\n        })\r\n      }\r\n    },\r\n    // 取消离开\r\n    cancelLeave() {\r\n      this.ifLeaveTask = false\r\n    },\r\n    // 确认离开\r\n    confirmLeave() {\r\n      this.ifLeaveTask = false\r\n      this.endRecord('leave')\r\n    },\r\n    // 返回任务页\r\n    goBackToTask() {\r\n      if (this.ifRecording) {\r\n        // 当前正在巡检中时，返回任务页时提示是否离开该任务\r\n        this.ifLeaveTask = true\r\n      } else {\r\n        this.$router.go(-1)\r\n      }\r\n    },\r\n    // 问题上报\r\n    async getProblemDataList() {\r\n      // 获取header，查询工单用\r\n      await axios({\r\n        url: process.env.VUE_APP_THIRD_REQUEST_URL + '/main/userCenterApi/sso/tokenByToken',\r\n        method: 'post',\r\n        params: {\r\n          token: this.accessToken,\r\n        },\r\n        headers: {\r\n          Authorization: 'Basic b3V0d29yazp3cGcyMDIw',\r\n        },\r\n      }).then((res) => {\r\n        if (res.status == 200) {\r\n          this.formToken = res.data.resultData.token\r\n          this.header = {\r\n            'Content-Type': 'application/json',\r\n            Authorization: 'Bearer ' + this.formToken,\r\n          }\r\n        }\r\n      })\r\n      // 存储漏点工单\r\n      this.problemDataList = []\r\n      let params = {\r\n        sysCode: 'outwork',\r\n        // formValue: \"{\\\"taskId\\\":\\\"1611029758697541634\\\"}\"1611029758697541634\r\n        // 只显示任务关联的上报漏点\r\n        extParam: {\r\n          taskId: this.taskDetail.id, // 任务id\r\n        },\r\n        page: {\r\n          current: 1,\r\n          size: 10000,\r\n        },\r\n        typeList: ['jlgd'],\r\n      }\r\n      await axios({\r\n        url:\r\n          process.env.VUE_APP_THIRD_REQUEST_URL +\r\n          '/main/outworkapi/ticketStatisticClient/getTicketList', // 所有的\r\n        method: 'post',\r\n        data: params,\r\n        headers: this.header,\r\n      }).then((res) => {\r\n        if (res.status == 200 && res.data != null) {\r\n          this.problemDataList = res.data?.resultData?.records || []\r\n          console.log('检漏工单records', this.problemDataList)\r\n          this.addYourLayer(this.problemDataList, '泄漏点')\r\n          // 用于判断是否加载完上报漏点数据\r\n          this.reportDataIsLoaded = true\r\n        }\r\n      })\r\n    },\r\n    // 在地图上添加泄漏点\r\n    addYourLayer(pointList, id) {\r\n      const sourceData = {\r\n        type: 'FeatureCollection',\r\n        features: pointList.map((i) => {\r\n          let ll = null\r\n          if (typeof i.formValue.ticketAddress == 'string') {\r\n            ll = JSON.parse(JSON.parse(i.formValue.ticketAddress).point)\r\n          } else {\r\n            ll = i.formValue.ticketAddress.point\r\n          }\r\n\r\n          return {\r\n            type: 'Feature',\r\n            geometry: {\r\n              type: 'Point',\r\n              coordinates: [ll.lng, ll.lat],\r\n            },\r\n            properties: i,\r\n          }\r\n        }),\r\n      }\r\n      if (mapObj.map.getSource(id)) {\r\n        mapObj.map.getSource(id).setData(sourceData)\r\n        return\r\n      }\r\n      mapObj.map.addLayer(\r\n        {\r\n          id: id,\r\n          type: 'symbol',\r\n          source: {\r\n            type: 'geojson',\r\n            data: sourceData,\r\n          },\r\n          layout: {\r\n            'icon-image': id,\r\n            'icon-size': 0.7,\r\n            // 图标强制全部显示\r\n            'icon-ignore-placement': true,\r\n            visibility: 'visible',\r\n          },\r\n          // minzoom: 13,\r\n        },\r\n        ''\r\n      )\r\n      // 鼠标点击\r\n      // mapObj.map.on('click', id, this.handleMouseClick)\r\n    },\r\n    // 上报泄漏点\r\n    reportClick() {\r\n      // 用于判断是否加载完上报漏点数据\r\n      if (this.reportDataIsLoaded) {\r\n        this.reportShow = true\r\n        // mapObj.map.setLayoutProperty('eventPointsLayer', 'visibility', 'visible')\r\n      } else {\r\n        Toast.loading({\r\n          message: '上报数据加载中。。。',\r\n          loadingType: 'spinner',\r\n          duration: 1500,\r\n        })\r\n        return\r\n      }\r\n    },\r\n    handleClose() {\r\n      // mapObj.map.setLayoutProperty('eventPointsLayer', 'visibility', 'none')\r\n    },\r\n    // 点击上报漏点加号\r\n    onSelect(val) {\r\n      if (this.isView) {\r\n        Toast({\r\n          message: '该巡检任务已结束',\r\n          duration: '1500',\r\n        })\r\n        return\r\n      }\r\n      this.ifTips = true\r\n      // 隐藏掉范围图层\r\n      mapObj.map.setLayoutProperty('detectionRangeLayer_fill', 'visibility', 'none')\r\n      mapObj.map.on('click', this.selectReportPoint)\r\n    },\r\n    // 上报漏点\r\n    async selectReportPoint(e) {\r\n      let features = mapObj.map.queryRenderedFeatures(e.point)\r\n      console.log('查询到的图层数据', features)\r\n      let propertiesArr = []\r\n      propertiesArr = features.filter((item) => {\r\n        // 筛选出供水的图层\r\n        return item.layer.id == 'map_supply_pipe_distribute'\r\n      })\r\n      // console.log('上报漏点点击地图', features, propertiesArr)\r\n\r\n      // 筛选出匹配的第一个管线元素\r\n      let oneProperties = null\r\n      let pop\r\n      let marker\r\n\r\n      const src = require(`@/assets/img/legend/事件上报.png`)\r\n      // 如果存在id为eventObj_one的元素，则删除此元素重新创建，保持全局只有一个此元素\r\n      let currentEle = document.getElementById('eventObj_one')\r\n      if (currentEle) {\r\n        currentEle.parentNode.removeChild(currentEle)\r\n      }\r\n      let ele = document.createElement('div')\r\n      ele.innerHTML = `\r\n            <img id=\"eventObj_one\" src=\"${src}\" width=\"40\" height=\"40\">\r\n          `\r\n      marker = mapObj.mapInstance.newMarker({\r\n        element: ele,\r\n      })\r\n      marker\r\n        .setLngLat(e.lngLat)\r\n        .setPopup(\r\n          mapObj.mapInstance\r\n            .newPopup({ offset: [0, -7], closeButton: false })\r\n            .setHTML(`<div id=\"deviceDetail\"></div>`)\r\n        )\r\n        .addTo(mapObj.map)\r\n\r\n      if (this.ifTips) {\r\n        this.ifTips = false\r\n      }\r\n\r\n      if (propertiesArr.length > 0) {\r\n        oneProperties = propertiesArr[0]\r\n        console.log('筛选出匹配的第一个管线元素', oneProperties, e.lngLat)\r\n\r\n        pop = new PopupItem({\r\n          propsData: {\r\n            deviceCode: oneProperties.properties.start_code,\r\n            fun: goToDetail,\r\n            isDevice: true,\r\n            // type: type,\r\n          },\r\n        })\r\n        this.$nextTick(() => {\r\n          pop.$mount('#deviceDetail')\r\n        })\r\n        marker.togglePopup()\r\n\r\n        let that_ = this\r\n        // 进入工单详情页\r\n        function goToDetail() {\r\n          that_.$router.push({\r\n            name: 'LeakDetectionForm',\r\n            query: {\r\n              taskId: that_.taskDetail.id, // 任务id\r\n              properties: oneProperties.properties,\r\n              lngLat: e.lngLat,\r\n              id: false,\r\n            },\r\n          })\r\n        }\r\n      } else {\r\n        pop = new PopupItem({\r\n          propsData: {\r\n            deviceCode: '',\r\n            fun: goToDetailLngLat,\r\n            isDevice: false,\r\n            lng: e.lngLat.lng,\r\n            lat: e.lngLat.lat,\r\n          },\r\n        })\r\n        this.$nextTick(() => {\r\n          pop.$mount('#deviceDetail')\r\n        })\r\n        marker.togglePopup()\r\n\r\n        let that_ = this\r\n        // 进入工单详情页\r\n        function goToDetailLngLat() {\r\n          that_.$router.push({\r\n            name: 'LeakDetectionForm',\r\n            query: {\r\n              taskId: that_.taskDetail.id, // 任务id\r\n              properties: {},\r\n              lngLat: e.lngLat,\r\n              id: false,\r\n            },\r\n          })\r\n        }\r\n      }\r\n    },\r\n    // 开始记录 上传起点成功后才进入巡检过程\r\n    startInspRecord() {\r\n      if (this.isView) {\r\n        Toast({\r\n          message: '该巡检任务已结束',\r\n          duration: 1500,\r\n        })\r\n        return\r\n      }\r\n      // 测试\r\n      // this.changeInspLineSourceBySpeed({\r\n      //   longitude: 115.9118701885,\r\n      //   latitude: 39.0556468180\r\n      // })\r\n      if (!this.currentPosition || !this.currentPosition.longitude) {\r\n        Toast.warning({\r\n          message: '当前GPS信号弱，请稍后尝试',\r\n          duration: 2000,\r\n        })\r\n        return\r\n      }\r\n      // 修改未巡检(0)任务状态至巡检中(1)\r\n      if (\r\n        JSON.parse(localStorage.getItem('leakDetectionData')).isNew &&\r\n        this.taskDetail.taskStatus == 0\r\n      ) {\r\n        this.startOrEndTaskRecord(1)\r\n      }\r\n      // 清除缓存的轨迹数据\r\n      this.clearBufferTrack()\r\n      let toast = Toast.loading({\r\n        message: '程序启动中',\r\n        loadingType: 'spinner',\r\n        duration: 0,\r\n        forbidClick: true,\r\n      })\r\n      // 绘制起始点\r\n      this.drawStartPoint()\r\n        .then((res) => {\r\n          if (res) {\r\n            toast.close()\r\n            Toast.info({\r\n              message: '开始记录',\r\n              duration: 1500,\r\n            })\r\n            // 轮询状态\r\n            this.pollingFlag = true\r\n            // 是否开始记录\r\n            this.ifRecording = true\r\n            // this.startLocation()\r\n            localStorage.setItem('startRecordLines', 'start')\r\n            // 开始轮询\r\n            this.polling()\r\n            // 记录开始巡检的时间，用于判断是否在开始巡检的10s内\r\n            this.startRecordTimer = new Date()\r\n          } else {\r\n            Toast.error({\r\n              message: '接口异常，无法开始任务',\r\n              duration: 2000,\r\n            })\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          console.log(err)\r\n          Toast.error({\r\n            message: '网络状态异常，正在重试',\r\n            duration: 2000,\r\n          })\r\n          setTimeout(() => {\r\n            this.drawStartPoint()\r\n          }, 5000)\r\n        })\r\n    },\r\n    // 结束记录\r\n    endRecord(type) {\r\n      let diff = Math.floor((new Date() - this.startRecordTimer) / 1000)\r\n      if (diff <= 10) {\r\n        Toast.info({\r\n          message: `结束太快了,请${10 - diff}秒后再试`,\r\n          duration: 1000,\r\n        })\r\n        return\r\n      }\r\n      this.endRecordConfirm(type)\r\n    },\r\n    // 结束记录确认\r\n    endRecordConfirm(type) {\r\n      this.drawEndPoint(type)\r\n    },\r\n    // 绘制终止点\r\n    async drawEndPoint(type) {\r\n      let that = this\r\n      if (that.currentPosition != null) {\r\n        let lastPoint = that.trackPointList[that.trackPointList.length - 1]\r\n        let currentPoint = [that.currentPosition.longitude, that.currentPosition.latitude]\r\n        let distance = Number(that.GetDistance(lastPoint, currentPoint)) * 1000\r\n        let toast = Toast.loading({\r\n          message: '程序关闭中',\r\n          loadingType: 'spinner',\r\n          duration: 0,\r\n          forbidClick: true,\r\n        })\r\n        // 记录终止点\r\n        that\r\n          .postTrackData_Point(\r\n            that.trackPointList[that.trackPointList.length - 1],\r\n            that.trackPointTimeList[that.trackPointTimeList.length - 1],\r\n            distance\r\n          )\r\n          .then((res) => {\r\n            if (res) {\r\n              toast.close()\r\n              Toast.info({\r\n                message: '暂停成功',\r\n                duration: 1000,\r\n              })\r\n              if (typeof yuanchu != 'undefined') {\r\n                yuanchu.locationAMap.stopRequestLocations()\r\n              }\r\n              that.trackPointList.push([\r\n                that.currentPosition.longitude,\r\n                that.currentPosition.latitude,\r\n              ])\r\n              that.trackPointTimeList.push(that.currentPosition.locTime)\r\n              let jsonPoint = {\r\n                type: 'Feature',\r\n                properties: {},\r\n                geometry: {\r\n                  type: 'Point',\r\n                  coordinates: [that.currentPosition.longitude, that.currentPosition.latitude],\r\n                },\r\n              }\r\n              let jsonPointFeatureCollection = {\r\n                type: 'FeatureCollection',\r\n                features: [jsonPoint],\r\n              }\r\n              if (mapObj.map.getSource('endPointSource_now')) {\r\n                mapObj.map.getSource('endPointSource_now').setData(jsonPointFeatureCollection)\r\n              } else {\r\n                mapObj.map.addSource('endPointSource_now', {\r\n                  type: 'geojson',\r\n                  data: jsonPointFeatureCollection,\r\n                })\r\n              }\r\n              if (mapObj.map.getLayer('endPointLayer_now')) {\r\n              } else {\r\n                mapObj.map.addLayer(\r\n                  {\r\n                    id: 'endPointLayer_now',\r\n                    type: 'circle',\r\n                    source: 'endPointSource_now',\r\n                    layout: {\r\n                      'circle-sort-key': 5,\r\n                      visibility: 'visible',\r\n                      // visibility: \"none\"\r\n                    },\r\n                    paint: {\r\n                      'circle-radius': 3,\r\n                      'circle-stroke-width': 5,\r\n                      'circle-stroke-color': '#addd52',\r\n                      'circle-color': 'white',\r\n                    },\r\n                  },\r\n                  'inspUserLayer'\r\n                )\r\n              }\r\n\r\n              // 补充trackline\r\n              let jsonLine = {\r\n                type: 'Feature',\r\n                properties: {},\r\n                geometry: {\r\n                  type: 'LineString',\r\n                  coordinates: that.trackPointList,\r\n                },\r\n              }\r\n              let jsonLineFeatureCollection = {\r\n                type: 'FeatureCollection',\r\n                features: [jsonLine],\r\n              }\r\n              if (mapObj.map.getSource('trackLineSource_now')) {\r\n                mapObj.map.getSource('trackLineSource_now').setData(jsonLineFeatureCollection)\r\n              } else {\r\n                mapObj.map.addSource('trackLineSource_now', {\r\n                  type: 'geojson',\r\n                  data: jsonLineFeatureCollection,\r\n                })\r\n              }\r\n              if (mapObj.map.getLayer('trackLineLayer_now')) {\r\n              } else {\r\n                mapObj.map.addLayer(\r\n                  {\r\n                    id: 'trackLineLayer_now',\r\n                    type: 'line',\r\n                    source: 'trackLineSource_now',\r\n                    layout: {\r\n                      'line-cap': 'round',\r\n                      'line-join': 'round',\r\n                      visibility: 'visible',\r\n                      // visibility: \"none\"\r\n                    },\r\n                    paint: {\r\n                      'line-color': '#addd52',\r\n                      'line-width': 5,\r\n                      'line-opacity': 0.8,\r\n                    },\r\n                  },\r\n                  'inspUserLayer'\r\n                )\r\n              }\r\n              // 添加终点图片\r\n              if (mapObj.map.getLayer('endPoint_label')) {\r\n              } else {\r\n                mapObj.map.addLayer({\r\n                  id: 'endPoint_label',\r\n                  type: 'symbol',\r\n                  source: 'endPointSource_now',\r\n                  layout: {\r\n                    'symbol-placement': 'point',\r\n                    'icon-image': 'end_point',\r\n                    'icon-size': 0.6,\r\n                    'icon-offset': [0, -35],\r\n                    'icon-allow-overlap': true,\r\n                    'symbol-sort-key': 2,\r\n                    visibility: 'visible',\r\n                    // visibility: \"none\"\r\n                  },\r\n                })\r\n              }\r\n              // 上传之前上传失败的点位\r\n              that.reportFailTrackPoints.length > 0 && that.postFailTrackData()\r\n              that.$refs.mymap.uploadFiledPipeIdList.length > 0 &&\r\n                // app添加管网检漏记录\r\n                Api.recordInspLine(that.$refs.mymap.uploadFiledPipeIdList).then((res) => {\r\n                  if (res.status) {\r\n                    console.log('管线补充上传成功')\r\n                    that.$refs.mymap.uploadFiledPipeIdList = []\r\n                  }\r\n                })\r\n              if (type == 'end') {\r\n                this.startOrEndTaskRecord(2) // 已巡检状态 '2'\r\n              } else {\r\n                this.pollingFlag = false\r\n                this.ifRecording = false\r\n                localStorage.setItem('startRecordLines', 'end')\r\n                if (type == 'pause') {\r\n                  Toast.success({\r\n                    message: '暂停成功',\r\n                    duration: 2000,\r\n                  })\r\n                  // 刷新任务\r\n                  this.refreshTask()\r\n                } else if (type == 'leave') {\r\n                  this.$router.go(-1)\r\n                }\r\n              }\r\n            } else {\r\n              Toast.error({\r\n                message: type == 'end' ? '结束失败' : '暂停失败',\r\n              })\r\n            }\r\n          })\r\n      } else {\r\n        let type = type\r\n        let timer = setTimeout(() => {\r\n          that.drawEndPoint(type)\r\n        }, 1000)\r\n      }\r\n    },\r\n    // 刷新任务\r\n    refreshTask() {\r\n      // let ids = []\r\n      // this.keyDetailList.forEach((item) => {\r\n      //   if (item.engInfoDTO) {\r\n      //     ids.push(item.engInfoDTO.engId)\r\n      //   }\r\n      // })\r\n      // mapObj.mapInstance && this.$refs.mymap.removeKeyPointMarker(ids)\r\n      const id = JSON.parse(localStorage.getItem('leakDetectionData')).taskId\r\n      // 添加任务范围、管线图层\r\n      this.addTaskRangeAndLines()\r\n      // await this.getAppInspData(id)\r\n    },\r\n    // ------------------------------------------------------------------------------------------------------------\r\n    // 状态（0未开始 1执行中 2已完成）\r\n    startOrEndTaskRecord(status) {\r\n      let data = {\r\n        planId: this.taskDetail.planId, // 计划id\r\n        taskName: this.taskDetail.taskName, // 任务名\r\n        taskStatus: status, // 状态（0未开始 1执行中 2已完成）\r\n        id: this.taskDetail.id, // 任务id\r\n        ext1: status == 2 ? this.stopReason : '', // 结束原因\r\n      }\r\n      if (status == 1) {\r\n        // 任务开始时间\r\n        data.taskStartTime = this.$dayjs().format('YYYY-MM-DD HH:mm:ss')\r\n      } else if (status == 2) {\r\n        // 任务结束时间\r\n        data.taskEndTime = this.$dayjs().format('YYYY-MM-DD HH:mm:ss')\r\n      }\r\n      let that = this\r\n      Api.changeTaskStatus(data).then((res) => {\r\n        if (res.status) {\r\n          if (status == 2) {\r\n            Toast.success({\r\n              message: '结束成功',\r\n              duration: 2000,\r\n              onClose: () => {\r\n                that.pollingFlag = false\r\n                that.ifRecording = false\r\n                // bus.$off('updateData')\r\n                localStorage.setItem('startRecordLines', 'end')\r\n                that.isView = true\r\n                that.$router.go(-1)\r\n              },\r\n            })\r\n          }\r\n        } else {\r\n          if (status == 2) {\r\n            Toast.error({\r\n              message: '结束失败, 正在重试',\r\n              duration: 1500,\r\n            })\r\n          }\r\n        }\r\n      })\r\n    },\r\n    async postFailTrackData() {\r\n      let that = this\r\n      // app添加上传失败点的管网检漏轨迹\r\n      await Api.inspectionTrack(that.reportFailTrackPoints)\r\n        .then((res) => {\r\n          if (res && res.status) {\r\n            console.log('轨迹存储成功')\r\n            that.reportFailTrackPoints = []\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          console.log('巡检轨迹存储失败：' + err)\r\n        })\r\n    },\r\n    // 清除缓存的轨迹数据\r\n    clearBufferTrack() {\r\n      let that = this\r\n      that.isResume = true\r\n      // 是否开始记录\r\n      that.ifRecording = false\r\n      // 当前巡检员所处位置\r\n      that.currentPosition = null\r\n      // 数组归零\r\n      // 轨迹点\r\n      that.trackPointList = []\r\n      // 轨迹时间\r\n      that.trackPointTimeList = []\r\n      // 超速线段\r\n      that.overSpeedTrackLineList = []\r\n      pauseStateTrackPoints = []\r\n      pauseStatePipeIdList = []\r\n      //数据源清空\r\n      if (mapObj.map.getSource('trackLineSource_now')) {\r\n        mapObj.map.getSource('trackLineSource_now').setData({\r\n          type: 'FeatureCollection',\r\n          features: [],\r\n        })\r\n      }\r\n      if (mapObj.map.getSource('trackLineSource_overSpeed')) {\r\n        mapObj.map.getSource('trackLineSource_overSpeed').setData({\r\n          type: 'FeatureCollection',\r\n          features: [],\r\n        })\r\n      }\r\n      if (mapObj.map.getSource('startPointSource_now')) {\r\n        mapObj.map.getSource('startPointSource_now').setData({\r\n          type: 'FeatureCollection',\r\n          features: [],\r\n        })\r\n      }\r\n\r\n      if (mapObj.map.getSource('endPointSource_now')) {\r\n        mapObj.map.getSource('endPointSource_now').setData({\r\n          type: 'FeatureCollection',\r\n          features: [],\r\n        })\r\n      }\r\n    },\r\n    // 添加起点终点图片\r\n    addMapImg() {\r\n      mapObj.map.loadImage(\r\n        require('@assets/img/inspection/white_arrow_right.png'),\r\n        function (error, image) {\r\n          if (error) throw error\r\n          if (!mapObj.map.hasImage('arrowIcon')) {\r\n            mapObj.map.addImage('arrowIcon', image, {})\r\n          }\r\n        }\r\n      )\r\n      mapObj.map.loadImage(\r\n        require('@assets/img/inspection/icon_starting_point.png'),\r\n        function (error, image) {\r\n          if (error) throw error\r\n          if (!mapObj.map.hasImage('start_point')) {\r\n            mapObj.map.addImage('start_point', image, {})\r\n          }\r\n        }\r\n      )\r\n      mapObj.map.loadImage(\r\n        require('@assets/img/inspection/icon_at_end.png'),\r\n        function (error, image) {\r\n          if (error) throw error\r\n          if (!mapObj.map.hasImage('end_point')) {\r\n            mapObj.map.addImage('end_point', image, {})\r\n          }\r\n        }\r\n      )\r\n    },\r\n    // 绘制起始点\r\n    drawStartPoint() {\r\n      let that = this\r\n      return new Promise(function (resolve, reject) {\r\n        if (typeof yuanchu != 'undefined') {\r\n          yuanchu.locationAMap.requestSingleLocation(\r\n            ['1'],\r\n            (res) => {\r\n              that.currentPosition = JSON.parse(JSON.stringify(res))\r\n              // res\r\n              // {\r\n              //   accuracy: '',//定位精度（Android返回）\r\n              //   address: '浙江省杭州市余杭区智溢路靠近中国(杭州)人工智能小镇',//（若请求回逆地理位置信息则返回）\r\n              //   latitude: '30.2706469726562517',//（必返回）\r\n              //   longitude: '119.9658680555555605',//（必返回）\r\n              //   locTime: '2022-03-09 09:45:19',//（必返回）\r\n              //   locType: '',//定位模式（Android返回）\r\n              // }\r\n              const param = {\r\n                ...that.currentPosition,\r\n              }\r\n              // 设置巡检人员位置并监听设备旋转事件，给人员图标旋转角度赋值\r\n              that.$refs.mymap.setInspUserPosition(param)\r\n              if (that.currentPosition != null) {\r\n                let recordData = []\r\n                recordData.push({\r\n                  taskId: that.taskDetail.id, // 任务id\r\n                  longitude: that.currentPosition.longitude,\r\n                  latitude: that.currentPosition.latitude,\r\n                  inspTime: that.currentPosition.locTime, // 具体巡检时间\r\n                  distance: 0, // 轨迹长度 第一个点距离为0\r\n                  inspDate: that.currentPosition.locTime, // 巡检日期\r\n                  inspector: that.userInfo.userFullName,\r\n                })\r\n                // app添加管网检漏轨迹\r\n                Api.inspectionTrack(recordData)\r\n                  .then((res) => {\r\n                    if (res && res.status) {\r\n                      // 使用上报点位作为起点\r\n                      console.log('起始点存储成功')\r\n                      that.trackPointList.push([\r\n                        that.currentPosition.longitude,\r\n                        that.currentPosition.latitude,\r\n                      ])\r\n                      that.trackPointTimeList.push(that.currentPosition.locTime)\r\n                      let jsonPoint = {\r\n                        type: 'Feature',\r\n                        properties: {},\r\n                        geometry: {\r\n                          type: 'Point',\r\n                          coordinates: [\r\n                            that.currentPosition.longitude,\r\n                            that.currentPosition.latitude,\r\n                          ],\r\n                        },\r\n                      }\r\n                      let jsonPointFeatureCollection = {\r\n                        type: 'FeatureCollection',\r\n                        features: [jsonPoint],\r\n                      }\r\n                      if (mapObj.map.getSource('startPointSource_now')) {\r\n                        mapObj.map\r\n                          .getSource('startPointSource_now')\r\n                          .setData(jsonPointFeatureCollection)\r\n                      } else {\r\n                        mapObj.map.addSource('startPointSource_now', {\r\n                          type: 'geojson',\r\n                          data: jsonPointFeatureCollection,\r\n                        })\r\n                      }\r\n                      if (mapObj.map.getLayer('startPointLayer_now')) {\r\n                      } else {\r\n                        mapObj.map.addLayer(\r\n                          {\r\n                            id: 'startPointLayer_now',\r\n                            type: 'circle',\r\n                            source: 'startPointSource_now',\r\n                            layout: {\r\n                              'circle-sort-key': 5,\r\n                              visibility: 'visible',\r\n                              // visibility: \"none\"\r\n                            },\r\n                            paint: {\r\n                              'circle-radius': 3,\r\n                              'circle-stroke-width': 5,\r\n                              'circle-stroke-color': '#2A83E6',\r\n                              'circle-color': 'white',\r\n                            },\r\n                          },\r\n                          'inspUserLayer'\r\n                        )\r\n                      }\r\n                      // 添加起点图片\r\n                      if (mapObj.map.getLayer('startPoint_label')) {\r\n                      } else {\r\n                        mapObj.map.addLayer({\r\n                          id: 'startPoint_label',\r\n                          type: 'symbol',\r\n                          source: 'startPointSource_now',\r\n                          layout: {\r\n                            'symbol-placement': 'point',\r\n                            'icon-image': 'start_point',\r\n                            'icon-size': 0.6,\r\n                            'icon-offset': [0, -35],\r\n                            'icon-allow-overlap': true,\r\n                            'symbol-sort-key': 2,\r\n                            visibility: 'visible',\r\n                            // visibility: \"none\"\r\n                          },\r\n                        })\r\n                      }\r\n                      resolve(true)\r\n                    } else {\r\n                      resolve(false)\r\n                    }\r\n                  })\r\n                  .catch((err) => {\r\n                    reject(err)\r\n                  })\r\n              }\r\n            },\r\n            (err) => {\r\n              console.log('err', err)\r\n            }\r\n          )\r\n        }\r\n      })\r\n    },\r\n    // 轮询 currentPosition，绘制轨迹线\r\n    polling() {\r\n      let that = this\r\n      // 轮询状态\r\n      if (that.pollingFlag) {\r\n        if (typeof yuanchu != 'undefined') {\r\n          yuanchu.locationAMap.requestLocations(\r\n            // 巡检定时间隔：单位秒 3~60 （必填参数）\r\n            ['3', '1', '20', '100', '0', true],\r\n            (res) => {\r\n              // res\r\n              // {\r\n              //   accuracy: '',//定位精度（Android返回）\r\n              //   address: '浙江省杭州市余杭区智溢路靠近中国(杭州)人工智能小镇',//（若请求回逆地理位置信息则返回）\r\n              //   latitude: '30.2706469726562517',//（必返回）\r\n              //   longitude: '119.9658680555555605',//（必返回）\r\n              //   locTime: '2022-03-09 09:45:19',//（必返回）\r\n              //   locType: '',//定位模式（Android返回）\r\n              // }\r\n              that.currentPosition = JSON.parse(JSON.stringify(res))\r\n              // setInterval(() => {\r\n              that.currentPosition = Object.assign(that.currentPosition, {\r\n                direction: 0,\r\n              })\r\n              // 过滤缓存定位数据\r\n              if (\r\n                that.currentPosition.locType != 'SAME_REQ' &&\r\n                that.currentPosition.locType != 'FIX_CACHE'\r\n              ) {\r\n                let lastPoint = that.trackPointList[that.trackPointList.length - 1]\r\n                let currentPoint = [that.currentPosition.longitude, that.currentPosition.latitude]\r\n                // 计算起点终点距离\r\n                let distance = Number(that.GetDistance(lastPoint, currentPoint)) * 1000\r\n\r\n                // 记录过程点\r\n                that\r\n                  .postTrackData_Point(\r\n                    // 最后一个点，最后一个点对应的时间，最后两点之间的距离\r\n                    that.trackPointList[that.trackPointList.length - 1],\r\n                    that.trackPointTimeList[that.trackPointTimeList.length - 1],\r\n                    distance\r\n                  )\r\n                  .then((res) => {\r\n                    if (res) {\r\n                      // 轨迹点数组存储当前定位点\r\n                      that.trackPointList.push([\r\n                        that.currentPosition.longitude,\r\n                        that.currentPosition.latitude,\r\n                      ])\r\n                      // 轨迹点对应时间数组存储当前定位点时间\r\n                      that.trackPointTimeList.push(that.currentPosition.locTime)\r\n\r\n                      // 巡检人员图标位置更新\r\n                      const coord = [\r\n                        parseFloat(that.currentPosition.longitude),\r\n                        parseFloat(that.currentPosition.latitude),\r\n                      ]\r\n                      const point = turf.point(coord)\r\n                      mapObj.mapInstance.setSourceData('inspUser', {\r\n                        type: 'FeatureCollection',\r\n                        features: [point],\r\n                      })\r\n\r\n                      // 轨迹点数组构造临时线图层\r\n                      let jsonLine = {\r\n                        type: 'Feature',\r\n                        properties: {},\r\n                        geometry: {\r\n                          type: 'LineString',\r\n                          coordinates: that.trackPointList,\r\n                        },\r\n                      }\r\n                      let jsonLineFeatureCollection = {\r\n                        type: 'FeatureCollection',\r\n                        features: [jsonLine],\r\n                      }\r\n                      if (mapObj.map.getSource('trackLineSource_now')) {\r\n                        mapObj.map\r\n                          .getSource('trackLineSource_now')\r\n                          .setData(jsonLineFeatureCollection)\r\n                      } else {\r\n                        mapObj.map.addSource('trackLineSource_now', {\r\n                          type: 'geojson',\r\n                          data: jsonLineFeatureCollection,\r\n                        })\r\n                      }\r\n                      if (mapObj.map.getLayer('trackLineLayer_now')) {\r\n                      } else {\r\n                        mapObj.map.addLayer(\r\n                          {\r\n                            id: 'trackLineLayer_now',\r\n                            type: 'line',\r\n                            source: 'trackLineSource_now',\r\n                            layout: {\r\n                              'line-cap': 'round',\r\n                              'line-join': 'round',\r\n                              'line-sort-key': 1,\r\n                              visibility: 'visible',\r\n                              // visibility: \"none\"\r\n                            },\r\n                            paint: {\r\n                              'line-color': '#addd52',\r\n                              'line-width': 5,\r\n                              'line-opacity': 0.8,\r\n                            },\r\n                          },\r\n                          'inspUserLayer'\r\n                        )\r\n                      }\r\n                      // 右箭头图标\r\n                      if (mapObj.map.getLayer('trackLineLayer_arrow')) {\r\n                      } else {\r\n                        mapObj.map.addLayer(\r\n                          {\r\n                            id: 'trackLineLayer_arrow',\r\n                            type: 'symbol',\r\n                            source: 'trackLineSource_now',\r\n                            layout: {\r\n                              'symbol-placement': 'line',\r\n                              'symbol-spacing': 20,\r\n                              'icon-image': 'arrowIcon',\r\n                              'icon-size': 0.5,\r\n                              'icon-allow-overlap': true,\r\n                              'symbol-sort-key': 3,\r\n                              visibility: 'visible',\r\n                            },\r\n                          },\r\n                          'inspUserLayer'\r\n                        )\r\n                      }\r\n                      // 改变管线颜色\r\n                      that.changeInspLineSourceBySpeed(that.currentPosition)\r\n                      const param = {\r\n                        ...that.currentPosition,\r\n                      }\r\n                      that.$refs.mymap.setInspUserPosition(param)\r\n                    }\r\n                  })\r\n              }\r\n              // }, 3000)\r\n            },\r\n            (err) => {\r\n              console.log('定位失败，错误原因', err)\r\n              // Toast.error({\r\n              //   message: 'err' + err,\r\n              //   duration: 2000,\r\n              // })\r\n            }\r\n          )\r\n        }\r\n        // this.uploadInspRoute()\r\n      }\r\n    },\r\n    GetDistance(coordArray1, coordArray2) {\r\n      let lng1 = coordArray1[0]\r\n      let lat1 = coordArray1[1]\r\n      let lng2 = coordArray2[0]\r\n      let lat2 = coordArray2[1]\r\n      let radLat1 = (lat1 * Math.PI) / 180.0\r\n      let radLat2 = (lat2 * Math.PI) / 180.0\r\n      let a = radLat1 - radLat2\r\n      let b = (lng1 * Math.PI) / 180.0 - (lng2 * Math.PI) / 180.0\r\n      let s =\r\n        2 *\r\n        Math.asin(\r\n          Math.sqrt(\r\n            Math.pow(Math.sin(a / 2), 2) +\r\n              Math.cos(radLat1) * Math.cos(radLat2) * Math.pow(Math.sin(b / 2), 2)\r\n          )\r\n        )\r\n      s = s * 6378.137 // EARTH_RADIUS;\r\n      s = Math.round(s * 10000) / 10000\r\n      return s\r\n    },\r\n    // 单点-后端记录轨迹数据\r\n    postTrackData_Point(pointData, timeData, distance) {\r\n      return new Promise(async (resolve, reject) => {\r\n        let that = this\r\n        for (let p = 0; p < pointData.length; p++) {\r\n          pointData[p] = Number(pointData[p])\r\n        }\r\n        let date_now = dayjs().format('YYYY-MM-DD HH:mm:ss')\r\n        let recordData = []\r\n        recordData.push({\r\n          taskId: that.taskDetail.id,\r\n          inspDate: timeData, // 巡检日期\r\n          inspTime: date_now, // 具体巡检时间\r\n          distance, // 轨迹长度\r\n          inspector: that.userInfo.userFullname, // 巡检员\r\n          longitude: pointData[0],\r\n          latitude: pointData[1],\r\n        })\r\n        if (that.isResume) {\r\n          // app添加管网检漏轨迹\r\n          await Api.inspectionTrack(recordData).then((res) => {\r\n            if (res && res.status) {\r\n              console.log('轨迹存储成功', recordData)\r\n              resolve(true)\r\n            } else {\r\n              // 上传失败的点位，暂时存在app端\r\n              that.reportFailTrackPoints.push(recordData)\r\n              console.log('that.reportFailTrackPoints: ', that.reportFailTrackPoints)\r\n              resolve(false)\r\n            }\r\n          })\r\n        } else {\r\n          pauseStateTrackPoints.push(...recordData)\r\n          resolve(true)\r\n        }\r\n      })\r\n    },\r\n    // 开始定位\r\n    startLocation() {\r\n      let that = this\r\n      yuanchu.locationAMap.requestSingleLocation(\r\n        ['1'],\r\n        (res) => {\r\n          that.currentPosition = JSON.parse(JSON.stringify(res))\r\n          const param = {\r\n            ...that.currentPosition,\r\n          }\r\n          that.$refs.mymap.setInspUserPosition(param)\r\n          if (\r\n            !that.currentPosition ||\r\n            !that.currentPosition.longitude ||\r\n            !that.currentPosition.latitude\r\n          ) {\r\n            Toast.error({\r\n              message: '获取位置失败!',\r\n              duration: 2000,\r\n            })\r\n            return\r\n          } else {\r\n            const coord = [\r\n              parseFloat(that.currentPosition.longitude),\r\n              parseFloat(that.currentPosition.latitude),\r\n            ]\r\n            that.flyToPoint(coord)\r\n          }\r\n        },\r\n        (err) => {\r\n          console.log('err', err)\r\n        }\r\n      )\r\n    },\r\n    // 巡检人员定位\r\n    flyToPoint(lnglat) {\r\n      mapObj.map.flyTo({ center: lnglat, zoom: 17.5 })\r\n    },\r\n    // 结束任务\r\n    async endTask() {\r\n      if (this.isView) {\r\n        Toast({\r\n          message: '该巡检任务已结束',\r\n          duration: 1500,\r\n        })\r\n        return\r\n      }\r\n      // bus.$off('updateData')\r\n      // 添加任务范围、管线图层\r\n      await this.addTaskRangeAndLines()\r\n      setTimeout(() => {\r\n        let hasInspKp = this.taskDetail?.completion.split('|')[0] || 0\r\n        let allInspKp = this.taskDetail?.completion.split('|')[1] || 0\r\n        if (allInspKp - hasInspKp == 0 && this.taskDetail.coverage.includes('100')) {\r\n          this.endRecordConfirm('end')\r\n        } else {\r\n          // 结束任务时判断是否已经完成巡检，如果没完成就提示是否退出\r\n          this.ifEndTask = true\r\n        }\r\n      }, 100)\r\n    },\r\n    // 继续任务\r\n    continueTask() {\r\n      this.stopReason = ''\r\n      this.ifEndTask = false\r\n    },\r\n    // 中止任务\r\n    stopTask() {\r\n      if (this.stopReason == '') {\r\n        Toast.warning({\r\n          message: '请输入终止原因',\r\n          duration: 1500,\r\n        })\r\n        return\r\n      }\r\n      this.ifEndTask = false\r\n      this.endRecordConfirm('end')\r\n    },\r\n    // 检漏工单进入详情页\r\n    toDetailPanel(cardDetail) {\r\n      this.$router.push({\r\n        name: 'LeakDetectionForm',\r\n        query: {\r\n          id: cardDetail.id,\r\n        },\r\n      })\r\n    },\r\n  },\r\n\r\n  beforeDestroy() {\r\n    Toast.clear()\r\n    this.pollingFlag = false\r\n    this.clearBufferTrack()\r\n    document.removeEventListener('pause', this.pause)\r\n    document.removeEventListener('resume', this.resume)\r\n    if (typeof yuanchu != 'undefined') {\r\n      yuanchu.locationAMap.stopRequestLocations()\r\n    }\r\n    localStorage.removeItem('startRecordLines')\r\n  },\r\n}\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n.MapPage {\r\n  background-color: #ffffff !important;\r\n  height: 100%;\r\n\r\n  // 顶部标题背景色\r\n  /deep/.fm-nav-bar__content {\r\n    background-color: #ffffff;\r\n  }\r\n\r\n  /deep/.fm-nav-bar__title {\r\n    color: #191919 !important;\r\n  }\r\n\r\n  /deep/ .fm-nav-bar .fm-icon {\r\n    color: #191919 !important;\r\n  }\r\n\r\n  .mapContainer {\r\n    height: calc(100%);\r\n    width: 100%;\r\n    // background-color: rgb(97, 40, 255);\r\n  }\r\n\r\n  .start-record {\r\n    position: absolute;\r\n    z-index: 3;\r\n    left: 50%;\r\n    bottom: 235px;\r\n    transform: translate(-50%, 0);\r\n\r\n    img {\r\n      width: 140px;\r\n      height: 140px;\r\n    }\r\n  }\r\n\r\n  .controlCard {\r\n    width: 100%;\r\n    height: 328px;\r\n    position: absolute;\r\n    bottom: 0;\r\n    background-image: url('~@/assets/img/inspection/controlBg.png');\r\n    background-repeat: no-repeat;\r\n    background-size: 100%;\r\n\r\n    .controlContent {\r\n      margin: 50px 30px 0;\r\n      display: flex;\r\n      flex-direction: column;\r\n\r\n      .infoContent {\r\n        display: flex;\r\n        flex-direction: column;\r\n        justify-content: space-around;\r\n        margin-bottom: 24px;\r\n\r\n        .endControl {\r\n          display: flex;\r\n          justify-content: space-between;\r\n          align-items: center;\r\n\r\n          .leftText {\r\n            width: 27%;\r\n            display: flex;\r\n            justify-content: space-around;\r\n            align-items: center;\r\n\r\n            img {\r\n              width: 32px;\r\n              height: 32px;\r\n              margin: auto;\r\n            }\r\n\r\n            /deep/.fm-count-down {\r\n              font-size: 24px;\r\n              color: #306cc8;\r\n            }\r\n          }\r\n\r\n          .rightButton {\r\n            display: flex;\r\n\r\n            .endBtn {\r\n              font-size: 24px;\r\n              width: 120px;\r\n              height: 60px;\r\n              background: #ffffff;\r\n              color: #306cc8;\r\n            }\r\n          }\r\n        }\r\n\r\n        .bottomSide {\r\n          width: 100%;\r\n          display: flex;\r\n          margin-top: 24px;\r\n          justify-content: space-between;\r\n\r\n          .block {\r\n            text-align: center;\r\n            width: 330px;\r\n            height: 160px;\r\n            display: flex;\r\n            flex-direction: column;\r\n            align-items: center;\r\n            background: rgba(27, 103, 216, 0.05);\r\n            border-radius: 16px;\r\n            // margin: 0 20px;\r\n\r\n            .rate {\r\n              width: 100%;\r\n              height: 50%;\r\n              display: flex;\r\n              align-items: center;\r\n              margin: auto;\r\n              font-size: 48px;\r\n              font-family: Helvetica-Bold, Helvetica;\r\n              font-weight: bold;\r\n              color: #306cc8;\r\n\r\n              .centerStyle {\r\n                margin: auto;\r\n                display: flex;\r\n                align-items: center;\r\n                font-size: 38px;\r\n                font-family: Helvetica-Bold, Helvetica;\r\n                font-weight: bold;\r\n              }\r\n            }\r\n\r\n            .nameStyle {\r\n              font-size: 14px;\r\n              font-family: PingFangSC-Regular, PingFang SC;\r\n              font-weight: 400;\r\n              color: #555555;\r\n              width: 100%;\r\n              height: 33%;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  .viewCard {\r\n    width: 100%;\r\n    height: 260px;\r\n    position: absolute;\r\n    bottom: 0;\r\n    background: #ffffff;\r\n    box-shadow: 0px 0px 18px 0px rgba(104, 115, 127, 0.18);\r\n\r\n    .controlContent {\r\n      margin: 32px 30px 0;\r\n      display: flex;\r\n      flex-direction: column;\r\n\r\n      .infoContent {\r\n        display: flex;\r\n        flex-direction: column;\r\n        justify-content: space-around;\r\n        margin-bottom: 24px;\r\n\r\n        .bottomSide {\r\n          width: 100%;\r\n          display: flex;\r\n          margin-top: 24px;\r\n          justify-content: space-around;\r\n\r\n          .block {\r\n            text-align: center;\r\n            width: 330px;\r\n            height: 160px;\r\n            display: flex;\r\n            flex-direction: column;\r\n            align-items: center;\r\n            background: rgba(27, 103, 216, 0.05);\r\n            border-radius: 16px;\r\n            // margin: 0 20px;\r\n\r\n            .rate {\r\n              width: 100%;\r\n              height: 50%;\r\n              display: flex;\r\n              align-items: center;\r\n              margin: auto;\r\n              font-size: 48px;\r\n              font-family: Helvetica-Bold, Helvetica;\r\n              font-weight: bold;\r\n              color: #306cc8;\r\n\r\n              .centerStyle {\r\n                margin: auto;\r\n                display: flex;\r\n                align-items: center;\r\n                font-size: 38px;\r\n                font-family: Helvetica-Bold, Helvetica;\r\n                font-weight: bold;\r\n              }\r\n            }\r\n\r\n            .nameStyle {\r\n              font-size: 14px;\r\n              font-family: PingFangSC-Regular, PingFang SC;\r\n              font-weight: 400;\r\n              color: #555555;\r\n              width: 100%;\r\n              height: 33%;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  .tool-box {\r\n    position: fixed;\r\n    width: 1.2rem;\r\n    height: auto;\r\n    right: 0.3rem;\r\n    bottom: 350px;\r\n\r\n    .refresh {\r\n      width: 1.2rem;\r\n      height: 1.2rem;\r\n      margin-bottom: 0.55rem;\r\n      background-color: #fff;\r\n      z-index: 3;\r\n      box-shadow: 0rem 0.22rem 0.61rem 0rem rgba(0, 0, 0, 0.2);\r\n      border-radius: 0.27rem;\r\n\r\n      &-image {\r\n        margin: 0.18rem;\r\n        width: 0.82rem;\r\n        height: 0.82rem;\r\n      }\r\n    }\r\n\r\n    .route {\r\n      width: 1.2rem;\r\n      height: 1.2rem;\r\n      margin-bottom: 0.55rem;\r\n      background-color: #fff;\r\n      z-index: 3;\r\n      box-shadow: 0rem 0.22rem 0.61rem 0rem rgba(0, 0, 0, 0.2);\r\n      border-radius: 0.27rem;\r\n\r\n      &-image {\r\n        margin: 0.18rem;\r\n        width: 0.82rem;\r\n        height: 0.82rem;\r\n      }\r\n    }\r\n\r\n    .location {\r\n      width: 1.2rem;\r\n      height: 1.2rem;\r\n      background-color: #fff;\r\n      z-index: 3;\r\n      box-shadow: 0rem 0.22rem 0.61rem 0rem rgba(0, 0, 0, 0.2);\r\n      border-radius: 60px;\r\n\r\n      &-image {\r\n        margin: 0.18rem;\r\n        width: 0.82rem;\r\n        height: 0.82rem;\r\n      }\r\n    }\r\n  }\r\n\r\n  .confirm-tip {\r\n    width: 80%;\r\n    height: 44%;\r\n    margin: auto;\r\n    background: #ffffff;\r\n    border-radius: 16px;\r\n    margin: 50% auto;\r\n\r\n    /deep/.content {\r\n      height: calc(100% - 164px);\r\n      padding: 32px;\r\n      display: flex;\r\n      flex-direction: column;\r\n\r\n      .icon {\r\n        width: 100%;\r\n        height: 100px;\r\n        display: flex;\r\n        margin: 24px 0 28px;\r\n      }\r\n\r\n      .info {\r\n        height: auto;\r\n        font-size: 28px;\r\n        font-family: PingFangSC-Regular, PingFang SC;\r\n        font-weight: 400;\r\n        color: #555555;\r\n        line-height: 40px;\r\n        text-align: center;\r\n      }\r\n    }\r\n\r\n    /deep/.confirm_btn {\r\n      width: 100%;\r\n      height: 100px;\r\n      display: flex;\r\n\r\n      .btn1 {\r\n        width: 50%;\r\n        height: 100%;\r\n        border-top: 1px solid #dcdee3;\r\n        font-size: 32px;\r\n        font-family: PingFangSC-Regular, PingFang SC;\r\n        font-weight: 400;\r\n        color: #333333;\r\n        line-height: 100px;\r\n        text-align: center;\r\n      }\r\n\r\n      .btn2 {\r\n        border-right: 1px solid #dcdee3;\r\n      }\r\n    }\r\n  }\r\n\r\n  .tip-tools {\r\n    position: fixed;\r\n    display: flex;\r\n    top: 15%;\r\n    left: 200px;\r\n    border-radius: 16px;\r\n    padding: 24px;\r\n    background: #ffffff;\r\n    box-shadow: 0px 10px 18px 0px rgba(0, 0, 0, 0.06);\r\n    border: 2px solid rgba(23, 144, 254, 0.6);\r\n\r\n    .tipImg {\r\n      width: 32px;\r\n      height: 32px;\r\n      margin-right: 16px;\r\n    }\r\n\r\n    .context {\r\n      font-size: 24px;\r\n      font-family: MicrosoftYaHei;\r\n      color: #1b67d8;\r\n      line-height: 31px;\r\n    }\r\n  }\r\n}\r\n</style>\r\n"]}]}