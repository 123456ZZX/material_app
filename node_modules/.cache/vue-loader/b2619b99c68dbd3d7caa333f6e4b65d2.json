{"remainingRequest":"D:\\Code\\Project\\WL\\xasw-mobile\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Code\\Project\\WL\\xasw-mobile\\src\\views\\inspectMap\\index.vue?vue&type=style&index=0&id=69a44145&lang=less&scoped=true","dependencies":[{"path":"D:\\Code\\Project\\WL\\xasw-mobile\\src\\views\\inspectMap\\index.vue","mtime":1708928163423},{"path":"D:\\Code\\Project\\WL\\xasw-mobile\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Code\\Project\\WL\\xasw-mobile\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"D:\\Code\\Project\\WL\\xasw-mobile\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"D:\\Code\\Project\\WL\\xasw-mobile\\node_modules\\less-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Code\\Project\\WL\\xasw-mobile\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Code\\Project\\WL\\xasw-mobile\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQpAaW1wb3J0IHVybCgnfkAvY29tcG9uZW50cy9tYXAvY3NzL21hcGJveC1nbC1lbmhhbmNlLmNzcycpOw0KI215bWFwIHsNCiAgd2lkdGg6IDEwMCU7DQogIG1pbi1oZWlnaHQ6IDEwMCU7DQp9DQo="},{"version":3,"sources":["index.vue"],"names":[],"mappings":";AA0jBA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/views/inspectMap","sourcesContent":["<template>\r\n  <div class=\"mymap\" id=\"mymap\" ref=\"mymap\"></div>\r\n</template>\r\n<script>\r\nimport mapInit from \"./index.js\";\r\nimport addImgToMap from \"./utils/setIcon.js\";\r\nimport mixins from \"./mixins/mixins\";\r\nimport layerControl from \"./utils/layerControl.js\";\r\nimport API from '@/common/config.js';\r\nimport * as turf from '@turf/turf';\r\nimport { legendListImport } from \"@/components/xa-map/legendList.js\";\r\nimport { Toast } from 'fawkes-mobile-lib'\r\nconst mapObj = {\r\n  map: null,\r\n  mapInstance: null\r\n}\r\nexport default {\r\n  name:\"myMap\",\r\n  mixins:[mixins],\r\n  props: {\r\n    ifInspection: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    ifDetail: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    inspBusinessType: {\r\n      type: String,\r\n      default: \"\"\r\n    },\r\n    currentPosition: {\r\n      type: Object,\r\n      default: () => {}\r\n    },\r\n    taskInspType: {\r\n      type: String,\r\n      default: \"\"\r\n    },\r\n    tripleVisible: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    toggleNavigator: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    lineNavigator: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    areaNavigator: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    legendConfig: {\r\n      type: Array,\r\n      default() {\r\n        return [];\r\n      },\r\n    },\r\n    legendList: {\r\n      type: Array,\r\n      default() {\r\n        return legendListImport\r\n      }\r\n    }\r\n  },\r\n  watch: {\r\n    legendConfig: {\r\n      handler(newVal) {\r\n        this.changeLegend()\r\n      },\r\n      deep: true\r\n    }\r\n  },  \r\n  data(){\r\n    return {\r\n    }\r\n  },\r\n  methods:{\r\n    initMap(){\r\n      let options = {\r\n        style: {\r\n          version: 8,\r\n          pitch: 0,\r\n          zoom: 13.570532360577655,\r\n          center: [115.92486101369428, 39.06075549589073],\r\n          glyphs:\r\n            API.VUE_APP_MAP_URL + \"/mapboxSource/fonts/{fontstack}/{range}.pbf\",\r\n          sprite: API.VUE_APP_MAP_URL + \"/mapboxSource/sprites/sprite\",\r\n          sources: layerControl.defaultSource,\r\n          layers: layerControl.defaultLayers,\r\n        }\r\n      };\r\n      new mapInit({\r\n        container: \"mymap\",\r\n        options: this.ifInspection ? options : {},\r\n        center: [115.92486101369428, 39.06075549589073],\r\n        bus: this\r\n      },\r\n      async (mapInstance) => {\r\n        mapObj.mapInstance = mapInstance;\r\n        mapObj.map = mapInstance.map;\r\n        window.map = mapInstance.map;\r\n        window.mapInstance = mapInstance\r\n        this.mapLoad(mapInstance)\r\n        addImgToMap(mapObj.map);\r\n        await this.addPipeLayer();\r\n        this.addBufferLayer();\r\n        this.addInspUserLayer();\r\n        this.addUser();\r\n        this.isOnLoad = true;\r\n        this.$emit('mapLoaded', mapInstance)\r\n        // if (!this.ifInspection) {\r\n        //   mapObj.map.on('click', (e)=> {\r\n        //     if(this.toggleNavigator){\r\n        //       this.addNavigatorPoint([e.lngLat.lng,e.lngLat.lat]);\r\n        //     } else if(this.lineNavigator){\r\n        //       this.addNavigatorPointsLine([e.lngLat.lng,e.lngLat.lat]);\r\n        //     }else if(this.areaNavigator){\r\n        //       this.addNavigatorPointsArea([e.lngLat.lng,e.lngLat.lat]);\r\n        //     }\r\n        //   })\r\n          // mapObj.map.on('dblclick', (e)=> {\r\n          //   console.log('e2 :>> ', e);\r\n          // })\r\n          //定位\r\n          // let position = await this.getUserPosition();\r\n          // this.setUserPosition(position || [119.9,30.3]);\r\n          // window.mapInit.flyTo(position || [119.9,30.3],16);\r\n        // }\r\n\r\n\r\n        // this.addDeviceLayersClickEvent();\r\n        // this.addOrganizerMarker({position:[120,30],distance:\"111\"});\r\n        \r\n        // 添加地图点击事件监听\r\n        \r\n          // // let that = this;\r\n          // mapInstance.map.on(\"click\", function(e) {\r\n          //   console.log(e)\r\n          //   const features = mapInstance.map.queryRenderedFeatures(e.point);\r\n          //   console.log(\"features==>\", features);\r\n            // // // 将初始图层的feature加入到当前管线图层中\r\n            // // if (features.length > 0 && features[0].source == \"initInspLineSource\") {\r\n            // //   // console.log(\"features[0]==>\", features[0]);\r\n            // //   that.setLineGeoSource([features[0]], \"curInspLineSource\");\r\n            // //   // 需要对其添加上报事件的功能\r\n            // // } else if (features.length > 1 && features[1].source == \"initInspLineSource\") {\r\n            // //   that.setLineGeoSource([features[1]], \"curInspLineSource\");\r\n            // // } else if (features.length > 0) {\r\n            // //   that.setLineGeoSource([], \"curInspLineSource\");\r\n            // // }\r\n            // // 对可选中图标的增加marker  || features[1].geometry.type === \"LineString\"\r\n            // if (features.length > 0 \r\n            //   && features[0].source !=\"eventPoints\" \r\n            //   && features[0].source != \"inspUser\" \r\n            //   && features[0].source != \"initInspLineSource\" \r\n            //   && features[0].source != \"keypoints\" \r\n            //   &&(features[0].geometry.type === \"Point\")\r\n            //   ) {\r\n            //   that.addEventObjMarker(features[0]);\r\n            // } else if (features.length > 1 \r\n            //   && features[1].source !=\"eventPoints\" \r\n            //   && features[1].source != \"inspUser\" \r\n            //   && features[1].source != \"keypoints\" \r\n            //   && (features[1].geometry.type === \"Point\")\r\n            //   ) {\r\n            //   that.addEventObjMarker(features[1]);\r\n            // } else {\r\n            //   // 移除全局事件点\r\n            //   that.removeEventObjMarker();\r\n            // }\r\n          // })\r\n      })\r\n    },\r\n    changeLegend() {\r\n      if(this.legendConfig && this.legendConfig.length > 0) {\r\n        this.legendConfig.forEach((item) => {\r\n          this.legendList.forEach((legend) => {\r\n            //控制一级图层\r\n            if (item.label == legend.label) {\r\n              legend.titleStatus = item.clickFlag;\r\n              // \r\n              legend.options.forEach((smallItem) => {\r\n                // 当该标题下图层内容为显示状态时才进入判断\r\n                if (\r\n                  legend.titleStatus === true &&\r\n                  typeof smallItem.id == \"number\"\r\n                ) {\r\n                  Toast.allowMultiple();\r\n                  setTimeout(() => {\r\n                    Toast({\r\n                      message: smallItem.label + \"图层暂无数据！\",\r\n                      position: 'top'\r\n                    });\r\n                  }, 0);\r\n                  return;\r\n                }\r\n                if (legend.titleStatus === true) {\r\n                  // 标题状态点亮时\r\n                  smallItem.clickFlag = false; // 图层均显示\r\n                } else {\r\n                  smallItem.clickFlag = true; // 图层均隐藏\r\n                }\r\n                this.legendControlLayer(smallItem);\r\n              });\r\n            }else {\r\n              legend.options.forEach(smallItem => {\r\n                if(item.label == smallItem.label) {\r\n                  this.$set(smallItem, 'clickFlag', item.clickFlag)\r\n                  this.legendControlLayer(smallItem)\r\n                }\r\n              })\r\n            }\r\n            \r\n          });\r\n        });\r\n      }\r\n    },\r\n    legendControlLayer(item) {\r\n      let timer = setInterval(() => {\r\n        if (this.isOnLoaded && window.map) {\r\n          clearInterval(timer)\r\n          let map = window.map\r\n          if (map.getLayer(item.id)) {\r\n            if (item.clickFlag) {\r\n              map.setLayoutProperty(item.id, \"visibility\", \"none\");\r\n              if (item.id == \"rd_map_drainpipe_ys_big\") {\r\n                let filter = map.getFilter(\"rd_map_manhole\")\r\n                if(filter.toString() == ['all'].toString() || filter.toString() == ['in', 'manhole_type', '雨水'].toString()){\r\n                  if(map.getLayoutProperty('rd_map_drainpipe_ws_big', 'visibility') == 'none'){\r\n                    filter = ['in', 'manhole_type', '']\r\n                  }else {\r\n                    filter = ['in', 'manhole_type', '污水']\r\n                  }\r\n                }\r\n                //雨水管线图层控制雨水井、雨水箭头、雨水较小层级图层显示\r\n                map.setLayoutProperty(\"rd_map_comb\", \"visibility\", \"none\");\r\n                \r\n                map.setFilter(\"rd_map_manhole\", filter);\r\n                map.setLayoutProperty(\r\n                  \"rd_map_drainpipe_ys_big_direction\",\r\n                  \"visibility\",\r\n                  \"none\"\r\n                );\r\n                map.setLayoutProperty(\r\n                  \"rd_map_drainpipe_ys_small\",\r\n                  \"visibility\",\r\n                  \"none\"\r\n                );\r\n                map.setLayoutProperty(\r\n                  \"rd_map_drainpipe_ys_small_direction\",\r\n                  \"visibility\",\r\n                  \"none\"\r\n                );\r\n              } else if (item.id == \"map_supply_pipe_circulating\") {\r\n                //循环水（回水）管线控制循环水（回水）节点显示\r\n                map.setLayoutProperty(\r\n                  \"map_supply_node_circulating\",\r\n                  \"visibility\",\r\n                  \"none\"\r\n                );\r\n              } else if (item.id == \"map_supply_pipe_distribute\") {\r\n                //配水管线控制配水节点显示\r\n                map.setLayoutProperty(\r\n                  \"map_supply_node_distribute\",\r\n                  \"visibility\",\r\n                  \"none\"\r\n                );\r\n              } else if (item.id == \"map_supply_pipe_delivery\") {\r\n                //输水管线控制输水节点显示\r\n                map.setLayoutProperty(\r\n                  \"map_supply_node_delivery\",\r\n                  \"visibility\",\r\n                  \"none\"\r\n                );\r\n              } else if (item.id == \"map_recycle_pipe\") {\r\n                //再生水管线控制再生水节点显示\r\n                map.setLayoutProperty(\r\n                  \"map_recycle_node\",\r\n                  \"visibility\",\r\n                  \"none\"\r\n                );\r\n              } else if (item.id == \"rd_map_drainpipe_ws_big\") {\r\n                //污水管线图层控制污水井、污水箭头、污水较小层级图层显示\r\n                let filter = map.getFilter(\"rd_map_manhole\")\r\n                if(filter.toString() == ['all'].toString() || filter.toString() == ['in', 'manhole_type', '污水'].toString()){\r\n                  if(map.getLayoutProperty('rd_map_drainpipe_ys_big', 'visibility') == 'none'){\r\n                    filter = ['in', 'manhole_type', '']\r\n                  }else {\r\n                    filter = ['in', 'manhole_type', '雨水']\r\n                  }\r\n                }            \r\n                map.setFilter(\"rd_map_manhole\", filter);\r\n                map.setLayoutProperty(\r\n                  \"rd_map_drainpipe_ws_big_direction\",\r\n                  \"visibility\",\r\n                  \"none\"\r\n                );\r\n                map.setLayoutProperty(\r\n                  \"rd_map_drainpipe_ws_small\",\r\n                  \"visibility\",\r\n                  \"none\"\r\n                );\r\n                map.setLayoutProperty(\r\n                  \"rd_map_drainpipe_ws_small_direction\",\r\n                  \"visibility\",\r\n                  \"none\"\r\n                );\r\n              }\r\n            } else {          \r\n              map.setLayoutProperty(item.id, \"visibility\", \"visible\");\r\n              if (item.id == \"rd_map_drainpipe_ys_big\") {\r\n                let filter = map.getFilter(\"rd_map_manhole\")\r\n                if(filter.toString() == ['in', 'manhole_type', ''].toString() || filter.toString() == ['in', 'manhole_type', '污水'].toString()){\r\n                  if(map.getLayoutProperty('rd_map_drainpipe_ws_big', 'visibility') != 'none'){\r\n                    filter = ['all']\r\n                  }else {\r\n                    filter = ['in', 'manhole_type', '雨水']\r\n                  }\r\n                }\r\n                map.setFilter(\"rd_map_manhole\", filter);\r\n                map.setLayoutProperty(\r\n                  \"rd_map_comb\",\r\n                  \"visibility\",\r\n                  \"visible\"\r\n                );\r\n                map.setLayoutProperty(\r\n                  \"rd_map_drainpipe_ys_big_direction\",\r\n                  \"visibility\",\r\n                  \"visible\"\r\n                );\r\n                map.setLayoutProperty(\r\n                  \"rd_map_drainpipe_ys_small\",\r\n                  \"visibility\",\r\n                  \"visible\"\r\n                );\r\n                map.setLayoutProperty(\r\n                  \"rd_map_drainpipe_ys_small_direction\",\r\n                  \"visibility\",\r\n                  \"visible\"\r\n                );\r\n              } else if (item.id == \"map_supply_pipe_circulating\") {\r\n                map.setLayoutProperty(\r\n                  \"map_supply_node_circulating\",\r\n                  \"visibility\",\r\n                  \"visible\"\r\n                );\r\n              } else if (item.id == \"map_supply_pipe_distribute\") {\r\n                map.setLayoutProperty(\r\n                  \"map_supply_node_distribute\",\r\n                  \"visibility\",\r\n                  \"visible\"\r\n                );\r\n              } else if (item.id == \"map_supply_pipe_delivery\") {\r\n                map.setLayoutProperty(\r\n                  \"map_supply_node_delivery\",\r\n                  \"visibility\",\r\n                  \"visible\"\r\n                );\r\n              } else if (item.id == \"map_recycle_pipe\") {\r\n                map.setLayoutProperty(\r\n                  \"map_recycle_node\",\r\n                  \"visibility\",\r\n                  \"visible\"\r\n                );\r\n              } else if (item.id == \"rd_map_drainpipe_ws_big\") {\r\n                let filter = map.getFilter(\"rd_map_manhole\")\r\n                if(filter.toString() == ['in', 'manhole_type', ''].toString() || filter.toString() == ['in', 'manhole_type', '雨水'].toString()){\r\n                  if(map.getLayoutProperty('rd_map_drainpipe_ys_big', 'visibility') != 'none'){\r\n                    filter = ['all']\r\n                  }else {\r\n                    filter = ['in', 'manhole_type', '污水']\r\n                  }\r\n                }            \r\n                map.setLayoutProperty(\r\n                  \"rd_map_drainpipe_ws_big_direction\",\r\n                  \"visibility\",\r\n                  \"visible\"\r\n                );\r\n                map.setFilter(\"rd_map_manhole\", filter);\r\n                map.setLayoutProperty(\r\n                  \"rd_map_manhole\",\r\n                  \"visibility\",\r\n                  \"visible\"\r\n                );\r\n                map.setLayoutProperty(\r\n                  \"rd_map_drainpipe_ws_small_direction\",\r\n                  \"visibility\",\r\n                  \"visible\"\r\n                );\r\n                map.setLayoutProperty(\r\n                  \"rd_map_drainpipe_ws_small\",\r\n                  \"visibility\",\r\n                  \"visible\"\r\n                );\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }, 500)\r\n    },\r\n      // 加载实时图层切片\r\n    loadMapLayer(type) {\r\n      console.log('type :>> ', type);\r\n        this.isOnLoad = true;\r\n        let inspType = '污水';\r\n      // let inspType = type === \"POLLUTED_WATER\" ? '污水' : type === \"RAI_WATER\" ? '雨水' : '供水';\r\n      mapObj.mapInstance.addTimerSource();\r\n      this.swLayer[inspType] = mapObj.mapInstance.addTimerLayer(inspType);\r\n        // this.swLayer['污水'] = mapObj.mapInstance.addTimerLayer(inspType);\r\n    },\r\n      // 加载实时图层切片\r\n    loadMapLayerInsp(type) {\r\n      let inspType = type === \"POLLUTED_WATER\" ? '污水' : type === \"RAI_WATER\" ? '雨水' : '供水';\r\n      mapObj.mapInstance.addTimerSource();\r\n      this.swLayer[inspType] = mapObj.mapInstance.addTimerLayer(inspType);\r\n    },\r\n    // 添加巡检范围\r\n    addRangeList(rangeList) {\r\n      // ranges为Polygon类型的范围，emeMarkers为应急任务的marker\r\n      let ranges = [];\r\n      rangeList.forEach((range, idx) => {\r\n        if (range.gridGeom) {\r\n          let geom = JSON.parse(range.gridGeom);\r\n          if (geom.type === \"Polygon\") {\r\n            ranges.push(geom);\r\n            // this.addRangeLayer(geom, idx)\r\n          }\r\n        }\r\n      });\r\n      try {\r\n        if (ranges.length > 0) {\r\n          let feature = ranges[0];\r\n          let polygon = turf.polygon(feature.coordinates)\r\n          let bbox = turf.bbox({\r\n            type:\"FeatureCollection\",\r\n            features: [polygon]\r\n          });\r\n          mapObj.map.fitBounds(bbox, {\r\n            padding: {top: 10, bottom:25, left: 15, right: 5}\r\n          });\r\n        }\r\n\r\n        // const that = this;\r\n        // var timer = setInterval(function() {\r\n        //   if (that.isOnLoaded() && that.map.getSource(\"rangeSource\")) {\r\n        //     clearInterval(timer);\r\n        //     that.setRangeLayer(ranges, ifEmergency);\r\n        //   }\r\n        // }, 500);\r\n      } catch (e) {\r\n        console.log(e);\r\n      }\r\n\r\n      // if (ifEmergency) {\r\n      //   emeMarkers.forEach(eme => {\r\n      //     this.addInspEmeMarker(eme, ifDetail);\r\n      //     // this.addInspEventMarker(eme);\r\n      //   })\r\n      // }\r\n    },\r\n    // 添加关键点marker\r\n    addKeyPoints(keyPointList) {\r\n      // 清空上次的数据\r\n      this.setKeyPointLayer([]);\r\n      const features = keyPointList.map(keyPoint => {\r\n        // if (keyPoint.deviceType != '管线') {\r\n          let point = JSON.parse(JSON.stringify(keyPoint));\r\n          point.geom = JSON.parse(point.geom);\r\n          /*\r\n            加载关键点的时候，如果已经上报关键点的巡检结果并签到，且正常，显示为绿色，异常显示为红色，未巡检显示为正常icon，已退回显示为橙色\r\n          */\r\n          let isGreen = false;\r\n          let isRed = false\r\n          let isBlue = false\r\n          let isOrange = false // 已退回\r\n          if (point.ext2 == \"3\") { // 巡检记录的ext2字段，默认为1（待复核），已通过为2，已退回为3\r\n            isOrange = true\r\n          } else if (point.deviceStatus == '0') { // 关键点巡检正常\r\n            isGreen = true;\r\n          } else if (point.deviceStatus == '1') {\r\n            isRed = true\r\n          } else {\r\n            isBlue = true\r\n          }\r\n          return {\r\n            type: 'Feature',\r\n            id: point.id,\r\n            geometry: point.geom,\r\n            properties: {\r\n              id: point.id,\r\n              feature: point,\r\n              isOrange: isOrange,// 已退回\r\n              isGreen: isGreen,\r\n              isRed: isRed,\r\n              isBlue: isBlue\r\n            }\r\n          }\r\n        // }\r\n      });\r\n      // 设置关键点数据\r\n      this.setKeyPointLayer(features);\r\n    },\r\n    // 多任务添加关键点marker\r\n    addKeyPointsInMulTask(keyPointList) {\r\n      // 对重复关键点进行过滤\r\n      let keyPointData = [];\r\n      for (let i = 0; i < keyPointList.length; i++) {\r\n        let element =JSON.parse(JSON.stringify(keyPointList[i]));\r\n        let filterData = keyPointList.filter(x => x.engInfoDTO.engId === element.engInfoDTO.engId);\r\n        keyPointList = keyPointList.filter(x => filterData.every( y=> x.engInfoDTO.engId !== y.engInfoDTO.engId));\r\n        // element.eventType = '';\r\n        // filterData.forEach(it => {\r\n        //   element.eventType += it.eventType + ' '\r\n        // })\r\n        keyPointData.push(element);\r\n      }\r\n      keyPointData.forEach(keyPoint => {\r\n        if (keyPoint.engInfoDTO && keyPoint.engInfoDTO.engGeom) {\r\n          let point = JSON.parse(JSON.stringify(keyPoint.engInfoDTO));\r\n          point.engGeom = JSON.parse(point.engGeom);\r\n          this.addKeyPointMarker(point, ifDetail);\r\n          let taskDetail = keyPoint.inspectionTaskDetailDTO.inspectionTaskDetail;\r\n          /*\r\n            加载关键点的时候，如果已经上报关键点的巡检结果并签到，且未被退回（待复核），显示为绿色\r\n          */\r\n          if (taskDetail.inspItemResult && taskDetail.isComplete == 1 && taskDetail.inspItemReview != 3) {\r\n            this.changeKeyPointMarker(point.engId, true);\r\n          }\r\n        }\r\n      })\r\n    },\r\n    // 移除应急巡检marker\r\n    removeInspEmeMarkers(rangeList) {\r\n      let emeMarkers = [];\r\n      rangeList.forEach(range => {\r\n        if (range.taskRangerGeom) {\r\n          let geom = JSON.parse(range.taskRangerGeom);\r\n          // 如果是应急任务，则需要添加marker\r\n          emeMarkers.push(geom.id);\r\n        }\r\n      });\r\n      if (emeMarkers.length > 0) {\r\n        this.removeInspEmeMarker(emeMarkers)\r\n      }\r\n    }\r\n  },\r\n  mounted() {\r\n    this.initMap();\r\n  },\r\n  // activated() {\r\n  //     this.initMap();\r\n  // },\r\n  // deactivated() {\r\n  //     mapObj.mapInstance.destoryMap();\r\n  //     mapObj.mapInstance = null;\r\n  // },\r\n  beforeDestroy() {\r\n    mapObj.mapInstance && mapObj.mapInstance.destoryMap();\r\n    mapObj.mapInstance = null;\r\n    this.hasListen = false\r\n    window.removeEventListener('deviceorientationabsolute', this.setRotate)\r\n  },\r\n};\r\n</script>\r\n<style lang=\"less\" scoped>\r\n@import url('~@/components/map/css/mapbox-gl-enhance.css');\r\n#mymap {\r\n  width: 100%;\r\n  min-height: 100%;\r\n}\r\n</style>"]}]}