{"remainingRequest":"D:\\Code\\Project\\WL\\xasw-mobile\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Code\\Project\\WL\\xasw-mobile\\src\\views\\DispatchCenter\\components\\SchedulingEvents\\index.vue?vue&type=script&lang=js","dependencies":[{"path":"D:\\Code\\Project\\WL\\xasw-mobile\\src\\views\\DispatchCenter\\components\\SchedulingEvents\\index.vue","mtime":1708928163368},{"path":"D:\\Code\\Project\\WL\\xasw-mobile\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Code\\Project\\WL\\xasw-mobile\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"D:\\Code\\Project\\WL\\xasw-mobile\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Code\\Project\\WL\\xasw-mobile\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["index.vue"],"names":[],"mappings":";AAmfile":"index.vue","sourceRoot":"src/views/DispatchCenter/components/SchedulingEvents","sourcesContent":["<template>\r\n    <div>\r\n        <fm-nav-bar title=\"事件中心\" left-arrow @click-left=\"$router.go(-1)\" />\r\n        <div class=\"mapContainer\">\r\n            <xa-map :create=\"initScene\"></xa-map>\r\n            <div class=\"selectStyle\">\r\n                <Select :selectData=\"dateTypeList\" :selValue=\"dateType\" color=\"white\" @getValue=\"getValue\"></Select>\r\n                <Select :selectData=\"ObjTypeList\" :selValue=\"ObjType\" color=\"white\" @getValue=\"getValue\"></Select>\r\n                <!-- <div style=\"z-index: 999999;margin-top: -20px\">\r\n                    <img style=\"width:80px;height:80px;\" src=\"@assets/img/dispatchCenter/schedulingEvents/筛选.png\"\r\n                        alt=\"\">\r\n                </div> -->\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"statisPart\">\r\n            <fm-tabs v-model=\"activeName\">\r\n                <fm-tab :label=\"'全部 ' + numTotal\" name=\"numTotal\">\r\n                    <listEvents :tableList=\"tableList\" @toTarget=\"toTarget\"></listEvents>\r\n                </fm-tab>\r\n                <fm-tab :label=\"'办理中 ' + numIng\" name=\"numIng\">\r\n                    <listEvents :tableList=\"tableList\" @toTarget=\"toTarget\"></listEvents>\r\n                </fm-tab>\r\n                <fm-tab :label=\"'挂起 ' + numHover\" name=\"numHover\">\r\n                    <listEvents :tableList=\"tableList\" @toTarget=\"toTarget\"></listEvents>\r\n                </fm-tab>\r\n                <fm-tab :label=\"'已完成 ' + numEd\" name=\"numEd\">\r\n                    <listEvents :tableList=\"tableList\" @toTarget=\"toTarget\"></listEvents>\r\n                </fm-tab>\r\n            </fm-tabs>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { Toast } from 'fawkes-mobile-lib'\r\n// 下拉选择框\r\nimport Select from './Select.vue'\r\nimport listEvents from './listEvents.vue'\r\nimport { addIconToMap } from '@/utils/mapUtils'\r\n// import infoPopup from '@/views/DispatchCenter/components/popup.vue' // 事件弹窗\r\nimport axios from 'axios'\r\nimport { ENUM } from '@/store/State/stateTypes'\r\nimport mapboxgl from 'mapbox-gl'\r\nconst MapObj = {\r\n    map: null,\r\n    //   viewer: null,\r\n    //   popupItem: '', // mapbox气泡框\r\n    //   marker: '',\r\n    //   monitorPopups: [],\r\n    //   monitorPopupContent: [],\r\n    //   eventPopupArray: [],// 事件点popup集合\r\n}\r\nexport default {\r\n    name: \"SchedulingEvents\",\r\n    components: { Toast, listEvents, Select },\r\n    data() {\r\n        return {\r\n            icons: [\r\n                {\r\n                    name: '事件点',\r\n                    url: require('@/assets/img/map/dw.png'),\r\n                },\r\n            ],\r\n            // 事件\r\n            accessToken: this.$storage.get('access_token'),\r\n            formToken: '',\r\n            header: {},\r\n            tableData: [],//拿到全部数据，切换全部/待处理/已完成时不变，筛选时间和对象时才变\r\n            tableList: [],//用于列表渲染\r\n            tableGeo: [],//用于地图聚类展示\r\n            //事件统计与列表\r\n            activeName: \"numTotal\",\r\n            numTotal: 0,\r\n            numIng: 0,\r\n            numHover: 0,\r\n            numEd: 0,\r\n            // 筛选\r\n            dateTypeList: [\r\n                { type: 1, name: '全部时间', value: '全部时间' },\r\n                { type: 1, name: '今日', value: '今日' },\r\n                { type: 1, name: '近一周', value: '近一周' },\r\n                { type: 1, name: '近一月', value: '近一月' },\r\n                { type: 1, name: '近三月', value: '近三月' },\r\n            ],\r\n            ObjTypeList: [\r\n                { type: 2, name: '全部类型', value: '全部类型' },\r\n                { type: 2, name: '污水', value: '污水' },\r\n                { type: 2, name: '雨水', value: '雨水' },\r\n                { type: 2, name: '供水', value: '供水' },\r\n                { type: 2, name: '再生水', value: '再生水' }\r\n            ],\r\n            dateType: '全部时间',\r\n            startDate: \"\",\r\n            endDate: \"\",\r\n            ObjType: '全部类型',\r\n        }\r\n    },\r\n    watch: {\r\n        activeName: {\r\n            handler(val) {\r\n                this.getListByStatus(val)\r\n            },\r\n            immediate: true\r\n        },\r\n        dateType: {\r\n            handler(val) {\r\n                this.changeDateObj(val)\r\n                this.addEventsLayer()\r\n            },\r\n        },\r\n        ObjType: {\r\n            handler(val) {\r\n                this.changeDateObj(val)\r\n                this.addEventsLayer()\r\n            },\r\n        },\r\n    },\r\n    created() {\r\n        // 初始化下拉框\r\n        this.dateType = this.dateTypeList[0].value\r\n        this.ObjType = this.ObjTypeList[0].value\r\n    },\r\n    mounted() {\r\n        Toast.loading({\r\n            message: '加载中...',\r\n            forbidClick: true,\r\n            duration: 0\r\n        })\r\n        console.log(\"timemmmmmmmmmm:\", this.$dayjs());\r\n        console.log(\"今日:\", this.$dayjs().subtract(0, 'day').format('YYYY-MM-DD'));\r\n        console.log(\"今日:\", this.$dayjs().format('YYYY-MM-DD'));\r\n        console.log(\"timemmmmmmmmmm:\", this.$dayjs().subtract(7, 'day'));\r\n        console.log(\"timemmmmmmmmmm:\", this.$dayjs().subtract(1, 'month'));\r\n        console.log(\"timemmmmmmmmmm:\", this.$dayjs().subtract(1, 'month').format('YYYY-MM-DD'));\r\n    },\r\n    methods: {\r\n        // 获取列表数据\r\n        changeDateObj() {\r\n            let startTime = ''\r\n            switch (this.dateType) {\r\n                case '今日':\r\n                    startTime = this.$dayjs().subtract(0, 'day').format('YYYY-MM-DD')\r\n                    break;\r\n                case '近一周':\r\n                    startTime = this.$dayjs().subtract(7, 'day').format('YYYY-MM-DD')\r\n                    break;\r\n                case '近一月':\r\n                    startTime = this.$dayjs().subtract(1, 'month').format('YYYY-MM-DD')\r\n                    break;\r\n                case '近三月':\r\n                    startTime = this.$dayjs().subtract(3, 'month').format('YYYY-MM-DD')\r\n                    break\r\n                default:\r\n                    startTime = ''\r\n                    break\r\n            }\r\n            this.startDate = startTime\r\n            this.endDate = this.$dayjs().format('YYYY-MM-DD')\r\n            console.log('dateType: ', this.dateType);\r\n            console.log('startTime: ', startTime);\r\n            console.log('ObjType: ', this.ObjType);\r\n        },\r\n        // select框选择回调\r\n        getValue(type, name, value) {\r\n            if (type === 1) {\r\n                this.dateType = value\r\n            } else if (type === 2) {\r\n                this.ObjType = value\r\n            }\r\n        },\r\n        toTarget(lnglat) {\r\n            if (lnglat.length == 2) {\r\n                window.xaMap.flyTo({\r\n                    center: lnglat,\r\n                    zoom: 19,\r\n                })\r\n            } else {\r\n                console.log(\"无位置信息\")\r\n            }\r\n        },\r\n        // /*初始化地图事件*/\r\n        async initScene() {\r\n            MapObj.map = window.xaMap\r\n            await addIconToMap(MapObj.map, this.icons)\r\n            // MapObj.map.resize()\r\n            // 添加事件图层 => getTableData() + this.getGeoJson() => renderCluster() 渲染图层和弹窗\r\n            this.addEventsLayer()\r\n        },\r\n        // 事件地图部分----------------------------------------\r\n        // 添加事件图层，先获取header，再通过header获取事件，再将事件列表添加至地图\r\n        async addEventsLayer() {\r\n            Toast.loading({\r\n                message: '加载中...',\r\n                forbidClick: true,\r\n                duration: 0\r\n            })\r\n            // 获取header，查询工单用\r\n            axios({\r\n                url: process.env.VUE_APP_THIRD_REQUEST_URL + '/main/userCenterApi/sso/tokenByToken',\r\n                method: 'post',\r\n                params: { token: this.accessToken, },\r\n                headers: { Authorization: 'Basic b3V0d29yazp3cGcyMDIw', },\r\n            }).then(async (res) => {\r\n                if (res.status == 200) {\r\n                    this.formToken = res.data.resultData.token\r\n                    this.header = {\r\n                        // 'Content-Type': 'application/json', // 若有 则文件上传 出错\r\n                        Authorization: 'Bearer ' + this.formToken,\r\n                    }\r\n                    // let extParam = JSON.stringify(\r\n                    //     {\r\n                    //         createType: 'PC',\r\n                    //     }\r\n                    // )\r\n                    let extListParam = []\r\n                    if (this.ObjType == '全部类型') {\r\n                        extListParam = [\r\n                            { keyList: ['deviceType'], valueList: ['recycle', 'supply', '供水', '再生水', '污水', '雨水', 'sewage', 'rain'] },\r\n                        ]\r\n                    } else {\r\n                        extListParam = [\r\n                            { keyList: ['deviceType'], valueList: [this.ObjType] },\r\n                        ]\r\n                    }\r\n                    let params = {\r\n                        sysCode: 'outwork',\r\n                        // smallType: 'abnormal_inform',\r\n                        smallType: 'dispatch_problem',\r\n                        startDate: this.startDate,\r\n                        endDate: this.endDate,\r\n                        // extParam: extParam,\r\n                        extListParam: extListParam, // 同时查再生水和供水\r\n                        page: {\r\n                            current: 1,\r\n                            size: -1,\r\n                        },\r\n                    }\r\n                    await this.getTableData(params) // 获取事件列表\r\n                    this.getGeoJson()//将获取到的事件列表构造成GeoJson\r\n                    Toast.clear()\r\n                }\r\n            })\r\n        },\r\n        // 获取事件列表\r\n        async getTableData(params) {\r\n            this.tableData = []\r\n            await axios({\r\n                url: process.env.VUE_APP_THIRD_REQUEST_URL + '/main/outworkapi/ticketStatisticClient/getTicketList',\r\n                method: 'post',\r\n                data: params,\r\n                headers: this.header,\r\n            }).then((res) => {\r\n                console.log('获取事件列表结果', res)\r\n                if (res.status == 200 && res.data != null) {\r\n                    this.tableData = res.data?.resultData?.records || []\r\n                    this.tableGeo = this.tableData\r\n                    this.numTotal = res.data?.resultData?.records?.length || 0\r\n                    console.log('事件列表tableData', this.tableData)\r\n                    this.getListByStatus(\"numIng\")\r\n                    this.getListByStatus(\"numHover\")\r\n                    this.getListByStatus(\"numEd\")\r\n                    this.getListByStatus(\"numTotal\")\r\n                }\r\n            })\r\n        },\r\n        //按全部、处理中、已完结划分tableData\r\n        getListByStatus(val) {\r\n            console.log('getListByStatus-val: ', val);\r\n            this.tableGeo = []\r\n            this.tableList = []\r\n            switch (val) {\r\n                case 'numTotal':\r\n                    this.tableData.forEach((td) => {\r\n                        let item = {\r\n                            id: td.id,\r\n                            deviceName: td.formValue.deviceType,\r\n                            ticketNo: td.ticketNo,\r\n                            flawsName: td.formValue.faultTypes,\r\n                            status: td.ticketStatus,\r\n                            state: td.ticketStatusName,\r\n                            content: td.formValue.questionDescribe,\r\n                            people: td.createByName,\r\n                            time: td.createTime.slice(0, 10),\r\n                            flawsFrom: td.formValue.defectFrom,\r\n                            lnglat: [td.appealLng, td.appealLat],\r\n                        }\r\n                        this.tableList.push(item)\r\n                        this.tableGeo.push(td)\r\n                    })\r\n                    this.numTotal = this.tableList.length\r\n                    break\r\n                case 'numIng':\r\n                    this.tableData.forEach((td) => {\r\n                        if (td.ticketStatus == 1) {\r\n                            let item = {\r\n                                id: td.id,\r\n                                deviceName: td.formValue.deviceType,\r\n                                ticketNo: td.ticketNo,\r\n                                flawsName: td.formValue.faultTypes,\r\n                                status: td.ticketStatus,\r\n                                state: td.ticketStatusName,\r\n                                content: td.formValue.questionDescribe,\r\n                                people: td.createByName,\r\n                                time: td.createTime.slice(0, 10),\r\n                                flawsFrom: td.formValue.defectFrom,\r\n                                lnglat: [td.appealLng, td.appealLat],\r\n                            }\r\n                            this.tableList.push(item)\r\n                            this.tableGeo.push(td)\r\n                        }\r\n                    })\r\n                    this.numIng = this.tableList.length\r\n                    break\r\n                case 'numHover':\r\n                    this.tableData.forEach((td) => {\r\n                        if (td.ticketStatus == 3) {\r\n                            let item = {\r\n                                id: td.id,\r\n                                deviceName: td.formValue.deviceType,\r\n                                ticketNo: td.ticketNo,\r\n                                flawsName: td.formValue.faultTypes,\r\n                                status: td.ticketStatus,\r\n                                state: td.ticketStatusName,\r\n                                content: td.formValue.questionDescribe,\r\n                                people: td.createByName,\r\n                                time: td.createTime.slice(0, 10),\r\n                                flawsFrom: td.formValue.defectFrom,\r\n                                lnglat: [td.appealLng, td.appealLat],\r\n                            }\r\n                            this.tableList.push(item)\r\n                            this.tableGeo.push(td)\r\n                        }\r\n                    })\r\n                    this.numHover = this.tableList.length\r\n                    break\r\n                case 'numEd':\r\n                    this.tableData.forEach((td) => {\r\n                        if (td.ticketStatus == 2 || td.ticketStatus == 99) {\r\n                            let item = {\r\n                                id: td.id,\r\n                                deviceName: td.formValue.deviceType,\r\n                                ticketNo: td.ticketNo,\r\n                                flawsName: td.formValue.faultTypes,\r\n                                status: td.ticketStatus,\r\n                                state: td.ticketStatusName,\r\n                                content: td.formValue.questionDescribe,\r\n                                people: td.createByName,\r\n                                time: td.createTime.slice(0, 10),\r\n                                flawsFrom: td.formValue.defectFrom,\r\n                                lnglat: [td.appealLng, td.appealLat],\r\n                            }\r\n                            this.tableList.push(item)\r\n                            this.tableGeo.push(td)\r\n                        }\r\n                    })\r\n                    this.numEd = this.tableList.length\r\n                    break\r\n            }\r\n            this.getGeoJson()//将获取到的事件列表构造成GeoJson\r\n        },\r\n        // 将事件列表添加至地图\r\n        getGeoJson() {\r\n            let features = []\r\n            let withoutPositionCount = 0\r\n            console.log('要聚合展示的tableGeo', this.tableGeo)\r\n            if (this.tableGeo.length == 0) {\r\n                this.removeSomeLayer()\r\n                return\r\n            }\r\n            this.tableGeo.forEach((item) => {\r\n                let feature = {}\r\n                let properties = {}\r\n                let geometry = {}\r\n\r\n                properties = item\r\n                properties.defectFrom = item.formValue.defectFrom\r\n                feature.properties = properties\r\n                feature.type = 'Feature'\r\n                geometry.type = 'Point'\r\n                if (item.appealLat && item.appealLng) {\r\n                    // geometry.coordinates = [item.appealLat, item.appealLon]\r\n                    geometry.coordinates = [item.appealLng, item.appealLat] // wgs84\r\n                    feature.geometry = geometry\r\n                    features.push(feature)\r\n                } else if (\r\n                    item.formValue.deviceDetail?.latitude &&\r\n                    item.formValue.deviceDetail?.longitude\r\n                ) {\r\n                    geometry.coordinates = [\r\n                        item.formValue.deviceDetail.longitude,\r\n                        item.formValue.deviceDetail.latitude,\r\n                    ]\r\n                    feature.geometry = geometry\r\n                    features.push(feature)\r\n                } else if (\r\n                    item.formValue.ticketAddress?.longitude &&\r\n                    item.formValue.ticketAddress?.latitude\r\n                ) {\r\n                    geometry.coordinates = [\r\n                        item.formValue.ticketAddress.longitude,\r\n                        item.formValue.ticketAddress.latitude,\r\n                    ]\r\n                    feature.geometry = geometry\r\n                    features.push(feature)\r\n                } else {\r\n                    // geometry.coordinates = [39.06683064435245, 115.9453947097063]\r\n                    withoutPositionCount += 1\r\n                }\r\n            })\r\n            console.log('无坐标个数', withoutPositionCount)\r\n            // 聚合数据 构造头部\r\n            let geoJson = {\r\n                type: 'FeatureCollection',\r\n                crs: { type: 'name', properties: { name: 'urn:ogc:def:crs:OGC:1.3:CRS84' } },\r\n                features: [],\r\n            }\r\n            geoJson.features = features\r\n            console.log('聚合的geoJson', geoJson)\r\n            this.renderCluster(geoJson)\r\n        },\r\n        removeSomeLayer() {\r\n            ['clusters', 'cluster-count', 'unclustered-point'].forEach((item) => {\r\n                if (MapObj.map?.getLayer(item)) {\r\n                    MapObj.map.removeLayer(item)\r\n                }\r\n            })\r\n            if (MapObj.map?.getSource('earthquakes')) {\r\n                MapObj.map.removeSource('earthquakes')\r\n            }\r\n        },\r\n        // 渲染\r\n        renderCluster(geoJsonSource) {\r\n            this.removeSomeLayer()\r\n            MapObj.map.addSource('earthquakes', {\r\n                type: 'geojson',\r\n                data: geoJsonSource,\r\n                cluster: true,\r\n                clusterMaxZoom: 14, // Max zoom to cluster points on\r\n                clusterRadius: 50, // Radius of each cluster when clustering points (defaults to 50)\r\n            })\r\n\r\n            MapObj.map.addLayer({\r\n                id: 'clusters',\r\n                type: 'circle',\r\n                source: 'earthquakes',\r\n                filter: ['has', 'point_count'],\r\n                paint: {\r\n                    'circle-color': ['step', ['get', 'point_count'], \"rgba(0, 209, 134, 0.8)\", 5, \"rgba(255, 148, 41, 0.8)\", 15, \"rgba(255, 74, 65, 0.8)\"],\r\n                    'circle-radius': ['step', ['get', 'point_count'], 20, 5, 25, 15, 30],\r\n                    // 这个是外边框的颜色 circle-stroke-color这个对应了上面circle-color\r\n                    \"circle-stroke-color\": [\r\n                        \"step\",\r\n                        [\"get\", \"point_count\"],\r\n                        \"rgba(0, 209, 134, 0.3)\",\r\n                        5,\r\n                        \"rgba(255, 148, 41, 0.3)\",\r\n                        15,\r\n                        \"rgba(255, 74, 65, 0.3)\"\r\n                    ],\r\n                    // 这个是外边框晕染的范围\r\n                    \"circle-stroke-width\": [\r\n                        \"step\",\r\n                        [\"get\", \"point_count\"],\r\n                        8, //蓝色晕染长度，当点数小于100时为5px晕染\r\n                        5, //对应上面circle-color 数字，意思为100以内\r\n                        12, //点计数在100到750之间时为黄色，6px晕染\r\n                        15, //对应上面circle-color 数字，意思为750以内\r\n                        15 //点计数大于或等于750时为7px像素的粉红色晕染\r\n                    ]\r\n                },\r\n            })\r\n\r\n            MapObj.map.addLayer({\r\n                id: 'cluster-count',\r\n                type: 'symbol',\r\n                source: 'earthquakes',\r\n                filter: ['has', 'point_count'],\r\n                layout: {\r\n                    'text-field': '{point_count_abbreviated}',\r\n                    // 'text-font': ['DIN Offc Pro Medium', 'Arial Unicode MS Bold'],\r\n                    'text-size': 12,\r\n                },\r\n            })\r\n\r\n            MapObj.map.addLayer({\r\n                id: 'unclustered-point',\r\n                source: 'earthquakes',\r\n                filter: ['!', ['has', 'point_count']],\r\n                type: 'symbol',\r\n                layout: {\r\n                    'icon-image': '事件点', // 点的图标\r\n                    visibility: 'visible',\r\n                    'icon-size': 0.7,\r\n                },\r\n            })\r\n\r\n            let defectFromDic = this.$store.state[ENUM].defectFrom\r\n            let that = this\r\n            MapObj.map.on('click', 'unclustered-point', (e) => {\r\n                // 如果当前事件点所有popup为打开状态，即事件点popup数组长度不为0，退出该次点击事件\r\n                // if (MapObj.eventPopupArray.length > 0) return\r\n                // 每次点击新的事件点就清除预案数据\r\n                // this.fileList = []\r\n                console.log('e.features: ', e.features)\r\n                // console.log('formValue: ', JSON.parse(e.features[0].properties.formValue))\r\n                MapObj.map.getCanvas().style.cursor = 'pointer'\r\n\r\n                let formValue = JSON.parse(e.features[0].properties.formValue)\r\n                console.log('formValue: ', formValue)\r\n\r\n                var coordinates = e.features[0].geometry.coordinates.slice()\r\n                while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {\r\n                    coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360\r\n                }\r\n                // Create a popup, but don't add it to the map yet.\r\n                this.popup1 = new mapboxgl.Popup({\r\n                    closeOnClick: true,\r\n                    closeButton: false,\r\n                    anchor: 'bottom',\r\n                    offset: { bottom: [0, -15] },\r\n                })\r\n\r\n                this.popup1\r\n                    .setLngLat(coordinates)\r\n                    .setHTML('<div id=\"vue-popup-custom\" class=\"vue-popup-custom\"><h3>' + formValue.faultTypes + '</h3></div>')//formValue.deviceType[1] + ' ' +\r\n                    .addTo(MapObj.map)\r\n            })\r\n\r\n            // inspect a cluster on click\r\n            MapObj.map.on('click', 'clusters', function (e) {\r\n                var features = MapObj.map.queryRenderedFeatures(e.point, { layers: ['clusters'] })\r\n                var clusterId = features[0].properties.cluster_id\r\n                MapObj.map\r\n                    .getSource('earthquakes')\r\n                    .getClusterExpansionZoom(clusterId, function (err, zoom) {\r\n                        if (err) return\r\n                        MapObj.map.easeTo({\r\n                            center: features[0].geometry.coordinates,\r\n                            zoom: zoom,\r\n                        })\r\n                    })\r\n            })\r\n            MapObj.map.setMinZoom(0)\r\n            MapObj.map.setMaxZoom(30)\r\n        },\r\n    },\r\n}\r\n</script>\r\n\r\n<style scoped lang=\"less\">\r\n.mapContainer {\r\n    height: 550px;\r\n    width: 100%;\r\n\r\n}\r\n\r\n/deep/.vue-popup-custom {\r\n    font-size: 20px;\r\n    font-family: PingFangSC-Regular, PingFang SC;\r\n    font-weight: 400;\r\n    color: #555555;\r\n    line-height: 20px;\r\n}\r\n\r\n.selectStyle {\r\n    display: flex;\r\n    justify-content: space-around;\r\n    margin-top: -85px;\r\n}\r\n\r\n\r\n.statisPart {\r\n    width: 750px;\r\n    height: 100px;\r\n    background: #FFFFFF;\r\n    border-radius: 30px 30px 0px 0px;\r\n}\r\n</style>"]}]}