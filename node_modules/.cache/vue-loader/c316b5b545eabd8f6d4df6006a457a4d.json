{"remainingRequest":"D:\\Code\\Project\\WL\\xasw-mobile\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Code\\Project\\WL\\xasw-mobile\\src\\views\\OneMap\\index.vue?vue&type=style&index=0&id=7403415a&scoped=true&lang=less","dependencies":[{"path":"D:\\Code\\Project\\WL\\xasw-mobile\\src\\views\\OneMap\\index.vue","mtime":1708928163402},{"path":"D:\\Code\\Project\\WL\\xasw-mobile\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Code\\Project\\WL\\xasw-mobile\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"D:\\Code\\Project\\WL\\xasw-mobile\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"D:\\Code\\Project\\WL\\xasw-mobile\\node_modules\\less-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Code\\Project\\WL\\xasw-mobile\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Code\\Project\\WL\\xasw-mobile\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQovZGVlcC8gLm1hcGJveGdsLXBvcHVwIHsNCn0NCi9kZWVwLyAubWFwYm94Z2wtcG9wdXAtY29udGVudCB7DQp9DQoubWFpbiB7DQogIHdpZHRoOiAxMDAlOw0KICBoZWlnaHQ6IGNhbGMoMTAwJSAtIDk4cHggLSBlbnYoc2FmZS1hcmVhLWluc2V0LWJvdHRvbSkpOw0KICBoZWlnaHQ6IGNhbGMoMTAwJSAtIDk4cHggLSBjb25zdGFudChzYWZlLWFyZWEtaW5zZXQtYm90dG9tKSk7DQogIHBvc2l0aW9uOiByZWxhdGl2ZTsNCiAgL2RlZXAvIC5mbS1oYWlybGluZS0tYm90dG9tOjphZnRlcnsNCiAgICBkaXNwbGF5OiBub25lOw0KICB9DQogIC54YS1tYXAtb25lLW1hcCB7DQogICAgaGVpZ2h0OiBjYWxjKDEwMCUgLSA5OHB4IC0gZW52KHNhZmUtYXJlYS1pbnNldC1ib3R0b20pKTsNCiAgICBoZWlnaHQ6IGNhbGMoMTAwJSAtIDk4cHggLSBjb25zdGFudChzYWZlLWFyZWEtaW5zZXQtYm90dG9tKSk7DQogIH0NCiAgLnRvcCB7DQogICAgd2lkdGg6IDEwMCU7DQogICAgaGVpZ2h0OiA3MHB4Ow0KICAgIHBhZGRpbmc6IDEycHggMDsNCiAgICBwb3NpdGlvbjogcmVsYXRpdmU7DQogICAgZGlzcGxheTogZmxleDsNCiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsNCiAgICBhbGlnbi1pdGVtczogY2VudGVyOw0KICAgIC50b3AtdGl0bGUgew0KICAgICAgd2lkdGg6IDQwMHB4Ow0KICAgICAgaGVpZ2h0OiA2NHB4Ow0KICAgICAgYmFja2dyb3VuZDogI2Y1ZjVmNTsNCiAgICAgIGJvcmRlci1yYWRpdXM6IDM2cHg7DQogICAgICBkaXNwbGF5OiBmbGV4Ow0KICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjsNCiAgICAgIHBhZGRpbmc6IDRweDsNCiAgICAgIHNwYW4gew0KICAgICAgICB3aWR0aDogNTAlOw0KICAgICAgICBoZWlnaHQ6IDEwMCU7DQogICAgICAgIGZvbnQtc2l6ZTogMjhweDsNCiAgICAgICAgZm9udC1mYW1pbHk6IFBpbmdGYW5nU0MtUmVndWxhciwgUGluZ0ZhbmcgU0M7DQogICAgICAgIGZvbnQtd2VpZ2h0OiA0MDA7DQogICAgICAgIGNvbG9yOiAjNTU1NTU1Ow0KICAgICAgICBsaW5lLWhlaWdodDogNDBweDsNCiAgICAgICAgYm9yZGVyLXJhZGl1czogMzZweDsNCiAgICAgICAgZGlzcGxheTogZmxleDsNCiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjsNCiAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7DQogICAgICB9DQogICAgICAuYWN0aXZlIHsNCiAgICAgICAgYmFja2dyb3VuZDogIzFiNjdkODsNCiAgICAgICAgYm94LXNoYWRvdzogMHB4IDhweCAxNnB4IDBweCByZ2JhKDEwNCwgMTE1LCAxMjcsIDAuMDYpOw0KICAgICAgICBmb250LXdlaWdodDogNTAwOw0KICAgICAgICBjb2xvcjogI0ZGRkZGRjsgICAgICAgIA0KICAgICAgfQ0KICAgIH0NCiAgfQ0KfQ0KLy8gL2RlZXAvLmZtLXNlYXJjaCB7DQogIC8vIHBvc2l0aW9uOiBhYnNvbHV0ZTsNCiAgLy8gd2lkdGg6IDEwMCU7DQogIC8vIC8vIHRvcDogMS42MHJlbTsNCiAgLy8gcGFkZGluZzogMCAzNnB4Ow0KICAvLyBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDsNCi8vIH0NCi9kZWVwLy5mbS1zZWFyY2hfX2NvbnRlbnQgew0KICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmZmZmOw0KICBib3gtc2hhZG93OiAwcHggOHB4IDIwcHggMHB4IHJnYmEoMTA0LCAxMTUsIDEyNywgMC4yKTsNCiAgYm9yZGVyLXJhZGl1czogMTZweDsNCiAgaGVpZ2h0OiA4MHB4Ow0KfQ0KL2RlZXAvLmZtLXNlYXJjaC1jbGFzcyB7DQogIC8vIGJhY2tncm91bmQtY29sb3I6ICNmZmZmZmY7DQogIC8vIGJveC1zaGFkb3c6IDBweCA4cHggMjBweCAwcHggcmdiYSgxMDQsIDExNSwgMTI3LCAwLjIpOw0KICAvLyBib3JkZXItcmFkaXVzOiAxNnB4Ow0KICAvLyBoZWlnaHQ6IDgwcHg7DQogIHBvc2l0aW9uOiBhYnNvbHV0ZTsNCiAgd2lkdGg6IDEwMCU7DQogIC8vIHRvcDogMS42MHJlbTsNCiAgcGFkZGluZzogMCAzNnB4Ow0KICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDsNCn0NCg=="},{"version":3,"sources":["index.vue"],"names":[],"mappings":";AA+jCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/views/OneMap","sourcesContent":["<template>\r\n  <div class=\"main\">\r\n    <fm-nav-bar class=\"fm-nav-bar-class\">\r\n      <template #title>\r\n        <title-tabs ref=\"titleTabsRef\" leftTitleName=\"地图\" rightTitleName=\"监测列表\" @changeSelectTab=\"changeSelectTab\"></title-tabs>\r\n      </template>\r\n      <template #right>\r\n        <img\r\n          v-if=\"selectedTab == '地图'\"\r\n          style=\"height: 24px; position: absolute; right: 20px\"\r\n          :src=\"require('@/assets/img/map/right.png')\"\r\n          @click=\"showMapLegend\"\r\n        />\r\n        <fm-popover\r\n          v-else\r\n          :visible.sync=\"showMonitorType\"\r\n          trigger=\"click\"\r\n          :actions=\"monitorTypes\"\r\n          @select=\"onSelect\"\r\n          placement=\"bottom-end\"\r\n        >\r\n          <template #reference>\r\n            <img\r\n              style=\"height: 24px\"\r\n              :src=\"require('@/assets/img/map/right.png')\"\r\n            />\r\n          </template>\r\n        </fm-popover>\r\n      </template>\r\n    </fm-nav-bar>\r\n    <xa-map\r\n      class=\"xa-map-one-map\"\r\n      v-if=\"selectedTab == '地图'\"\r\n      :create=\"initScene\"\r\n      :legendConfig=\"legendConfig\"\r\n      @getDefaultBaseLayers=\"getDefaultBaseLayers\"\r\n      @getBaseLayerObject=\"getBaseLayerObject\"\r\n      @handleLayerClick=\"handleLayerClick\"\r\n    ></xa-map>\r\n    <fm-search\r\n      v-if=\"selectedTab == '地图'\"\r\n      class = \"fm-search-class\"\r\n      v-model=\"searchValue\"\r\n      placeholder=\"搜索\"\r\n      @clear=\"onClear\"\r\n      @search=\"onSearch\"\r\n    />\r\n    <mapTools\r\n     ref=\"mapTools\" \r\n     @flagBtnClick=\"flagBtnClick\"\r\n     v-if=\"selectedTab == '地图'\r\n    \">\r\n    </mapTools>\r\n    <monitorList\r\n      ref=\"monitorList\"\r\n      v-if=\"selectedTab == '监测列表'\"\r\n    ></monitorList>\r\n    <PressureMonitorDetail\r\n      v-if=\"pressureMonitorShow && selectedTab == '地图'\"\r\n      :pressureDataDetail=\"pressureDataDetail\"\r\n      @closePopup_pressure=\"closePopup_pressure\"\r\n    >\r\n    </PressureMonitorDetail>\r\n    <LineDetail\r\n      v-if=\"pipelineShow && selectedTab == '地图'\"\r\n      :pipelineBaseInfo=\"pipelineBaseInfo\"\r\n      @closePopup_line=\"closePopup_line\"\r\n    >\r\n    </LineDetail>\r\n    <EquipmentDetail\r\n      v-if=\"equipmentShow && selectedTab == '地图'\"\r\n      :equipmentType=\"equipmentType\"\r\n      :equipmentBaseInfo=\"equipmentBaseInfo\"\r\n      @closePopup_line=\"closePopup_line\"\r\n    />\r\n    <map-legend\r\n      :popupShow=\"popupShow\"\r\n      shape=\"rectangle\"\r\n      :data-source=\"legendList\"\r\n      :click-func=\"legendClick\"\r\n      @closePop=\"closePop\"\r\n      @legendTitleNameClick=\"legendTitleNameClick\"\r\n    ></map-legend>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport mapboxgl from 'mapbox-gl'\r\nimport mapTools from './mapTools'\r\nimport monitorList from './monitorList'\r\nimport { addIconToMap } from '@/utils/mapUtils'\r\nimport { getAllEquipmentInformation } from './api'\r\nimport { bbox, center as getCenter } from '@turf/turf'\r\nimport _cloneDeep from 'lodash/cloneDeep'\r\n// 图例\r\nimport { defaltLegendList } from './defaltLegendList.js'\r\n// 压力监测点击弹窗\r\nimport PressureMonitorDetail from './components/PressureMonitorDetail.vue'\r\nimport LineDetail from './components/LineDetail.vue'\r\nimport EquipmentDetail from './components/equipmentDetail.vue'\r\nimport MapLegend from './components/mapLegend.vue'\r\nimport { legendListImport } from './legendList'\r\nimport TitleTabs from '@/components/TitleTabs'\r\nconst MapObj = {\r\n  map: null,\r\n  viewer: null,\r\n  popupItem: '', //mapbox气泡框\r\n  marker: '',\r\n  monitorPopups: [],\r\n  monitorPopupContent: [],\r\n  popupArray: [], //气泡框数组\r\n}\r\nexport default {\r\n  name: 'OneMap',\r\n  components: {\r\n    mapTools,\r\n    monitorList,\r\n    PressureMonitorDetail,\r\n    LineDetail,\r\n    MapLegend,\r\n    TitleTabs,\r\n    EquipmentDetail\r\n  },\r\n  data() {\r\n    return {\r\n      searchValue: '',\r\n      selectedTab: '地图',\r\n      equipmentType: 'map_supply_pipe',\r\n      popupShow: false,\r\n      legendList: legendListImport,\r\n      pressureMonitorShow: false, // 压力监测详情面板显隐\r\n      pipelineShow: false, // 管线详情面板显隐\r\n      equipmentShow: false, // 设备详情面板显隐\r\n      equipmentBaseInfo: {},\r\n      pressureDataDetail: {}, // 压力监测详情面板基础信息\r\n      pipelineBaseInfo: {}, // 管线详情面板基础信息\r\n      layerID: '',\r\n      legendConfig: [],\r\n      icons: [\r\n        {\r\n          name: '泵站',\r\n          url: require('@/assets/img/map/pump.png'),\r\n        },\r\n        {\r\n          name: '再生水厂',\r\n          url: require('@/assets/img/map/再生水厂地图.png'),\r\n        },\r\n        {\r\n          name: '供水厂',\r\n          url: require('@/assets/img/map/供水厂地图.png'),\r\n        },\r\n        {\r\n          name: '给水加压泵站',\r\n          url: require('@/assets/img/map/给水加压泵站地图.png'),\r\n        },\r\n        // 监测设备开始-------------------------------------------------------------------------------\r\n        {\r\n          name: '流量计(供)*',\r\n          url: require('@/assets/img/map/流量计地图.png'),\r\n        },\r\n        {\r\n          name: '流量离线供',\r\n          url: require('@/assets/img/map/流量离线供地图.png'),\r\n        },\r\n        {\r\n          name: '流量报警供',\r\n          url: require('@/assets/img/map/流量报警供地图.png'),\r\n        },\r\n        {\r\n          name: '流量计(再生)*',\r\n          url: require('@/assets/img/map/流量计再生地图.png'),\r\n        },\r\n        {\r\n          name: '流量离线再生',\r\n          url: require('@/assets/img/map/流量离线再生地图.png'),\r\n        },\r\n        {\r\n          name: '流量报警再生',\r\n          url: require('@/assets/img/map/流量报警再生地图.png'),\r\n        },\r\n        {\r\n          name: '压力监测(供)*',\r\n          url: require('@/assets/img/map/压力监测.png'),\r\n        },\r\n        {\r\n          name: '压力监测离线供',\r\n          url: require('@/assets/img/map/压力离线供地图.png'),\r\n        },\r\n        {\r\n          name: '压力监测报警供',\r\n          url: require('@/assets/img/map/压力报警供地图.png'),\r\n        },\r\n        {\r\n          name: '压力监测(再生)*',\r\n          url: require('@/assets/img/map/再生水压力监测.png'),\r\n        },\r\n        {\r\n          name: '压力监测离线再生',\r\n          url: require('@/assets/img/map/压力离线再生地图.png'),\r\n        },\r\n        {\r\n          name: '压力监测报警再生',\r\n          url: require('@/assets/img/map/压力报警再生地图.png'),\r\n        },\r\n        {\r\n          name: '液位计(雨)*',\r\n          url: require('@/assets/img/map/液位计(雨)地图.png'),\r\n        },\r\n        {\r\n          name: '液位计离线雨',\r\n          url: require('@/assets/img/map/液位计(雨)离线地图.png'),\r\n        },\r\n        {\r\n          name: '液位计报警雨',\r\n          url: require('@/assets/img/map/液位计(雨)报警地图.png'),\r\n        },\r\n        {\r\n          name: '液位计(污)*',\r\n          url: require('@/assets/img/map/液位计(污)地图.png'),\r\n        },\r\n        {\r\n          name: '液位计离线污',\r\n          url: require('@/assets/img/map/液位计(污)离线地图.png'),\r\n        },\r\n        {\r\n          name: '液位计报警污',\r\n          url: require('@/assets/img/map/液位计(污)报警地图.png'),\r\n        },\r\n        {\r\n          name: '水位计*',\r\n          url: require('@/assets/img/map/水位计地图.png'),\r\n        },\r\n        {\r\n          name: '水位计离线',\r\n          url: require('@/assets/img/map/水位计地图离线.png'),\r\n        },\r\n        {\r\n          name: '水位计报警',\r\n          url: require('@/assets/img/map/水位计地图报警.png'),\r\n        },\r\n        // 监测设备结束-------------------------------------------------------------------------------\r\n        // {\r\n        //   name: \"提标改造给水厂\",\r\n        //   url: require(\"@/assets/img/map/提标改造给水厂.png\"),\r\n        // },\r\n        // {\r\n        //   name: \"规划新建给水厂\",\r\n        //   url: require(\"@/assets/img/map/规划新建给水厂.png\"),\r\n        // },\r\n      ],\r\n      showMonitorType: false,\r\n      monitorTypes: [\r\n        {\r\n          text: '压力',\r\n          name: 'IVTM',\r\n        },\r\n        {\r\n          text: '流量',\r\n          name: 'Flowmeter',\r\n        },\r\n        {\r\n          text: '水质',\r\n        },\r\n      ],\r\n      monitorPopupVisible: false, // 气泡框显隐\r\n    }\r\n  },\r\n  created() {\r\n    // 基本信息赋值\r\n    if (this.$route.query.data == '监测列表') {\r\n      this.$nextTick(() => {\r\n        this.selectedTab = '监测列表'\r\n        this.$refs.titleTabsRef.selectedTab = '监测列表'\r\n      })\r\n    }\r\n  },\r\n  watch: {\r\n    selectedTab(newValue, oldValue) {\r\n      if(this.selectedTab == '地图') {\r\n        this.$nextTick(()=> {\r\n          this.showSearchBar()\r\n        })\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    onSearch() {},\r\n    onClear() {},\r\n    changeSelectTab(name) {\r\n      this.selectedTab = name\r\n    },\r\n    showSearchBar() {\r\n\r\n      let tempLength = 0\r\n      if (typeof yuanchu != 'undefined') {\r\n          yuanchu?.statusBar?.getStatusBarHeight((res) => {\r\n          console.log(11111111111, res);\r\n          tempLength = res\r\n        })\r\n      }\r\n\r\n        let fmNavBar = document.querySelector(\".fm-nav-bar-class\");\r\n        let fmNavBarHeight = fmNavBar.clientHeight\r\n        let paddingTop = parseInt(getComputedStyle(fmNavBar).paddingTop);\r\n        fmNavBarHeight -= paddingTop\r\n        fmNavBarHeight += tempLength\r\n        console.log(fmNavBar.clientHeight, 'fmNavBarHeight');\r\n        this.$nextTick(()=> {\r\n          console.log(fmNavBarHeight, 'fmNavBarHeight');\r\n          if(document.querySelector(\".fm-search-class\")) {\r\n            document.querySelector(\".fm-search-class\").style.top = fmNavBarHeight + 48 + 'px'\r\n            console.log(document.querySelector(\".fm-search-class\").style.top, 'document.querySelector(\".fm-search-class\").style.top');\r\n          }\r\n        })\r\n    },\r\n    onSelect(action) {\r\n      if (action.text == '水质') {\r\n        return\r\n      }\r\n      this.$refs.monitorList.typeClick(action.name)\r\n    },\r\n    // 图例点击事件\r\n    legendClick(e, item, id) {\r\n      if (typeof item.id == 'number') {\r\n        this.$notify({\r\n          type: 'warning',\r\n          message: '当前图层暂无数据！',\r\n        })\r\n        return\r\n      }\r\n      item.clickFlag = !item.clickFlag\r\n      this.legendControlLayer(item)\r\n      this.flagBtnClick(this.monitorPopupVisible) // 刷新气泡框\r\n    },\r\n    legendControlLayer(item) {\r\n      let map = window.xaMap\r\n      if (map.getLayer(item.id)) {\r\n        if (item.clickFlag) {\r\n          map.setLayoutProperty(item.id, 'visibility', 'none')\r\n          if (item.id == 'rd_map_drainpipe_ys_big') {\r\n            let filter = map.getFilter('rd_map_manhole')\r\n            if (\r\n              filter.toString() == ['all'].toString() ||\r\n              filter.toString() == ['in', 'manhole_type', '雨水'].toString()\r\n            ) {\r\n              if (\r\n                map.getLayoutProperty(\r\n                  'rd_map_drainpipe_ws_big',\r\n                  'visibility'\r\n                ) == 'none'\r\n              ) {\r\n                filter = ['in', 'manhole_type', '']\r\n              } else {\r\n                filter = ['in', 'manhole_type', '污水']\r\n              }\r\n            }\r\n            //雨水管线图层控制雨水井、雨水箭头、雨水较小层级图层显示\r\n            map.setLayoutProperty('rd_map_comb', 'visibility', 'none')\r\n\r\n            map.setFilter('rd_map_manhole', filter)\r\n            map.setLayoutProperty(\r\n              'rd_map_drainpipe_ys_big_direction',\r\n              'visibility',\r\n              'none'\r\n            )\r\n            map.setLayoutProperty(\r\n              'rd_map_drainpipe_ys_small',\r\n              'visibility',\r\n              'none'\r\n            )\r\n            map.setLayoutProperty(\r\n              'rd_map_drainpipe_ys_small_direction',\r\n              'visibility',\r\n              'none'\r\n            )\r\n          } else if (item.id == 'map_supply_pipe_circulating') {\r\n            //循环水（回水）管线控制循环水（回水）节点显示\r\n            map.setLayoutProperty(\r\n              'map_supply_node_circulating',\r\n              'visibility',\r\n              'none'\r\n            )\r\n          } else if (item.id == 'map_supply_pipe_distribute') {\r\n            //配水管线控制配水节点显示\r\n            map.setLayoutProperty(\r\n              'map_supply_node_distribute',\r\n              'visibility',\r\n              'none'\r\n            )\r\n          } else if (item.id == 'map_supply_pipe_delivery') {\r\n            //输水管线控制输水节点显示\r\n            map.setLayoutProperty(\r\n              'map_supply_node_delivery',\r\n              'visibility',\r\n              'none'\r\n            )\r\n          } else if (item.id == 'map_recycle_pipe') {\r\n            //再生水管线控制再生水节点显示\r\n            map.setLayoutProperty('map_recycle_node', 'visibility', 'none')\r\n          } else if (item.id == 'rd_map_drainpipe_ws_big') {\r\n            //污水管线图层控制污水井、污水箭头、污水较小层级图层显示\r\n            let filter = map.getFilter('rd_map_manhole')\r\n            if (\r\n              filter.toString() == ['all'].toString() ||\r\n              filter.toString() == ['in', 'manhole_type', '污水'].toString()\r\n            ) {\r\n              if (\r\n                map.getLayoutProperty(\r\n                  'rd_map_drainpipe_ys_big',\r\n                  'visibility'\r\n                ) == 'none'\r\n              ) {\r\n                filter = ['in', 'manhole_type', '']\r\n              } else {\r\n                filter = ['in', 'manhole_type', '雨水']\r\n              }\r\n            }\r\n            map.setFilter('rd_map_manhole', filter)\r\n            map.setLayoutProperty(\r\n              'rd_map_drainpipe_ws_big_direction',\r\n              'visibility',\r\n              'none'\r\n            )\r\n            map.setLayoutProperty(\r\n              'rd_map_drainpipe_ws_small',\r\n              'visibility',\r\n              'none'\r\n            )\r\n            map.setLayoutProperty(\r\n              'rd_map_drainpipe_ws_small_direction',\r\n              'visibility',\r\n              'none'\r\n            )\r\n          } else if (item.id == '压力监测') {\r\n            // map.setLayoutProperty(\r\n            //   \"压力监测-报警\",\r\n            //   \"visibility\",\r\n            //   \"none\"\r\n            // );\r\n          }\r\n        } else {\r\n          map.setLayoutProperty(item.id, 'visibility', 'visible')\r\n          if (item.id == 'rd_map_drainpipe_ys_big') {\r\n            let filter = map.getFilter('rd_map_manhole')\r\n            if (\r\n              filter.toString() == ['in', 'manhole_type', ''].toString() ||\r\n              filter.toString() == ['in', 'manhole_type', '污水'].toString()\r\n            ) {\r\n              if (\r\n                map.getLayoutProperty(\r\n                  'rd_map_drainpipe_ws_big',\r\n                  'visibility'\r\n                ) != 'none'\r\n              ) {\r\n                filter = ['all']\r\n              } else {\r\n                filter = ['in', 'manhole_type', '雨水']\r\n              }\r\n            }\r\n            map.setFilter('rd_map_manhole', filter)\r\n            map.setLayoutProperty('rd_map_comb', 'visibility', 'visible')\r\n            map.setLayoutProperty(\r\n              'rd_map_drainpipe_ys_big_direction',\r\n              'visibility',\r\n              'visible'\r\n            )\r\n            map.setLayoutProperty(\r\n              'rd_map_drainpipe_ys_small',\r\n              'visibility',\r\n              'visible'\r\n            )\r\n            map.setLayoutProperty(\r\n              'rd_map_drainpipe_ys_small_direction',\r\n              'visibility',\r\n              'visible'\r\n            )\r\n          } else if (item.id == 'map_supply_pipe_circulating') {\r\n            map.setLayoutProperty(\r\n              'map_supply_node_circulating',\r\n              'visibility',\r\n              'visible'\r\n            )\r\n          } else if (item.id == 'map_supply_pipe_distribute') {\r\n            map.setLayoutProperty(\r\n              'map_supply_node_distribute',\r\n              'visibility',\r\n              'visible'\r\n            )\r\n          } else if (item.id == 'map_supply_pipe_delivery') {\r\n            map.setLayoutProperty(\r\n              'map_supply_node_delivery',\r\n              'visibility',\r\n              'visible'\r\n            )\r\n          } else if (item.id == 'map_recycle_pipe') {\r\n            map.setLayoutProperty('map_recycle_node', 'visibility', 'visible')\r\n          } else if (item.id == 'rd_map_drainpipe_ws_big') {\r\n            let filter = map.getFilter('rd_map_manhole')\r\n            if (\r\n              filter.toString() == ['in', 'manhole_type', ''].toString() ||\r\n              filter.toString() == ['in', 'manhole_type', '雨水'].toString()\r\n            ) {\r\n              if (\r\n                map.getLayoutProperty(\r\n                  'rd_map_drainpipe_ys_big',\r\n                  'visibility'\r\n                ) != 'none'\r\n              ) {\r\n                filter = ['all']\r\n              } else {\r\n                filter = ['in', 'manhole_type', '污水']\r\n              }\r\n            }\r\n            map.setLayoutProperty(\r\n              'rd_map_drainpipe_ws_big_direction',\r\n              'visibility',\r\n              'visible'\r\n            )\r\n            map.setFilter('rd_map_manhole', filter)\r\n            map.setLayoutProperty('rd_map_manhole', 'visibility', 'visible')\r\n            map.setLayoutProperty(\r\n              'rd_map_drainpipe_ws_small_direction',\r\n              'visibility',\r\n              'visible'\r\n            )\r\n            map.setLayoutProperty(\r\n              'rd_map_drainpipe_ws_small',\r\n              'visibility',\r\n              'visible'\r\n            )\r\n          } else if (item.id == '压力监测') {\r\n            // map.setLayoutProperty(\r\n            //   \"压力监测-报警\",\r\n            //   \"visibility\",\r\n            //   \"visible\"\r\n            // );\r\n          }\r\n        }\r\n      }\r\n    },\r\n    // 图例标题点击事件\r\n    legendTitleNameClick(legendTitleName) {\r\n      this.legendList.forEach((item) => {\r\n        if (item.label === legendTitleName) {\r\n          item.titleStatus = !item.titleStatus\r\n          //\r\n          item.options.forEach((smallItem) => {\r\n            // 当该标题下图层内容为显示状态时才进入判断\r\n            if (item.titleStatus === true && typeof smallItem.id == 'number') {\r\n              setTimeout(() => {\r\n                this.$notify({\r\n                  type: 'warning',\r\n                  message: smallItem.label + '图层暂无数据！',\r\n                })\r\n              }, 0)\r\n              return\r\n            }\r\n            if (item.titleStatus === true) {\r\n              // 标题状态点亮时\r\n              smallItem.clickFlag = false // 图层均显示\r\n            } else {\r\n              smallItem.clickFlag = true // 图层均隐藏\r\n            }\r\n            this.legendControlLayer(smallItem)\r\n          })\r\n        }\r\n      })\r\n      this.flagBtnClick(this.monitorPopupVisible) // 刷新气泡框\r\n    },\r\n    closePop(val) {\r\n      this.popupShow = val\r\n    },\r\n    showMapLegend() {\r\n      this.popupShow = true\r\n    },\r\n    getDefaultBaseLayers(layers) {\r\n      this.$refs.mapTools.getDefaultBaseLayers(layers)\r\n    },\r\n    getBaseLayerObject(layers) {\r\n      this.$refs.mapTools.getBaseLayerObject(layers)\r\n    },\r\n    /**初始化地图事件 */\r\n    async initScene() {\r\n      window.xaMap.resize()\r\n      this.legendConfig = defaltLegendList\r\n      // this.rebuildLegendList = legendList\r\n      MapObj.map = window.xaMap\r\n      await addIconToMap(MapObj.map, this.icons)\r\n      // 添加压力监测设备点\r\n      this.getPressurePoint()\r\n    },\r\n    // 压力监测设备添加图标\r\n    async getPressurePoint() {\r\n      let params = {\r\n        deviceType: '',\r\n      }\r\n      let arr = []\r\n\r\n      let flowArr = [] //流量计\r\n      let supplyFlowArr = [] //供水流量计\r\n      let recycleFlowArr = [] //再生水流量计\r\n\r\n      let pressureArr = [] //压力计\r\n      let supplyPressureArr = [] //供水压力计\r\n      let recyclePressureArr = [] //再生水压力\r\n\r\n      let liquidometArr = []; //液位计\r\n      let rainLiquidometArr = []; //雨水液位计\r\n      let sewageLiquidometArr = []; //污水液位计\r\n\r\n      let fluviographArr = []; //电子水尺（水位计）\r\n\r\n      // 获取所有监测设备基础信息\r\n      await getAllEquipmentInformation(params).then((res) => {\r\n        if (res.data && res.data.length > 0) {\r\n          arr = res.data\r\n          // 流量计\r\n          flowArr = arr.filter((item) => {\r\n            return item.deviceType == 'Flowmeter'\r\n          })\r\n          supplyFlowArr = flowArr.filter((item) => {\r\n            return item.belongSystem == '供水'\r\n          })\r\n          recycleFlowArr = flowArr.filter((item) => {\r\n            return item.belongSystem == '再生水'\r\n          })\r\n          console.log(\"供水流量计\", supplyFlowArr, \"再生水流量计\", recycleFlowArr);\r\n          // 压力计\r\n          pressureArr = arr.filter((item) => {\r\n            return item.deviceType == 'IVTM'\r\n          })\r\n          supplyPressureArr = pressureArr.filter((item) => {\r\n            return item.belongSystem == '供水'\r\n          })\r\n          recyclePressureArr = pressureArr.filter((item) => {\r\n            return item.belongSystem == '再生水'\r\n          })\r\n          console.log(\"供水压力计\", supplyPressureArr, \"再生水压力计\", recyclePressureArr);\r\n          // 液位计\r\n          liquidometArr = arr.filter((item) => {\r\n            return item.deviceType == \"Liquidomet\"\r\n          })\r\n          rainLiquidometArr = liquidometArr.filter((item) => {\r\n            return item.belongSystem == \"雨水\";\r\n          });\r\n          sewageLiquidometArr = liquidometArr.filter((item) => {\r\n            return item.belongSystem == \"污水\";\r\n          });\r\n          console.log(\"雨水液位计\", rainLiquidometArr, \"污水液位计\", sewageLiquidometArr);\r\n          // 电子水尺（水位计）\r\n          fluviographArr = arr.filter((item) => {\r\n            return item.deviceType == \"Fluviograph\"\r\n          })\r\n          console.log(\"电子水尺（水位计）\", fluviographArr);\r\n          MapObj.popupArray = [] // 清空弹窗数组\r\n          this.addYourLayer(\r\n            supplyFlowArr,\r\n            '流量计(供)*',\r\n            '流量离线供',\r\n            '流量报警供'\r\n          )\r\n          this.addYourLayer(\r\n            recycleFlowArr,\r\n            '流量计(再生)*',\r\n            '流量离线再生',\r\n            '流量报警再生'\r\n          )\r\n          this.addYourLayer(\r\n            supplyPressureArr,\r\n            '压力监测(供)*',\r\n            '压力监测离线供',\r\n            '压力监测报警供'\r\n          )\r\n          this.addYourLayer(\r\n            recyclePressureArr,\r\n            '压力监测(再生)*',\r\n            '压力监测离线再生',\r\n            '压力监测报警再生'\r\n          )\r\n          this.addYourLayer(\r\n            rainLiquidometArr,\r\n            \"液位计(雨)*\",\r\n            \"液位计离线雨\",\r\n            \"液位计报警雨\"\r\n          )\r\n          this.addYourLayer(\r\n            sewageLiquidometArr,\r\n            \"液位计(污)*\",\r\n            \"液位计离线污\",\r\n            \"液位计报警污\"\r\n          )\r\n          this.addYourLayer(\r\n            fluviographArr,\r\n            \"水位计*\",\r\n            \"水位计离线\",\r\n            \"水位计报警\"\r\n          )\r\n        }\r\n      })\r\n    },\r\n    // 在地图上添加图标图层\r\n    addYourLayer(pointList, id, offlineImageId, warnImageId) {\r\n      let visibility = 'visible'\r\n      if (id == '压力监测(供)*') {\r\n        visibility = 'visible'\r\n      } else {\r\n        visibility = 'none'\r\n      }\r\n      const sourceData = {\r\n        type: 'FeatureCollection',\r\n        features: pointList.map((i) => {\r\n          return {\r\n            type: 'Feature',\r\n            geometry: {\r\n              type: 'Point',\r\n              coordinates: [i.lon, i.lat],\r\n            },\r\n            properties: i,\r\n          }\r\n        }),\r\n      }\r\n      if (window.xaMap.getSource(id)) {\r\n        window.xaMap.getSource(id).setData(sourceData)\r\n        return\r\n      }\r\n      window.xaMap.addLayer(\r\n        {\r\n          id: id,\r\n          type: 'symbol',\r\n          source: {\r\n            type: 'geojson',\r\n            data: sourceData,\r\n          },\r\n          layout: {\r\n            'icon-image': [\r\n              'case',\r\n              [\r\n                'all',\r\n                ['==', ['get', 'iotOnline'], '0'],\r\n                ['!=', ['get', 'isWarn'], '1'],\r\n              ],\r\n              id,\r\n              ['==', ['get', 'iotOnline'], '1'],\r\n              offlineImageId,\r\n              [\r\n                'all',\r\n                ['==', ['get', 'iotOnline'], '0'],\r\n                ['==', ['get', 'isWarn'], '1'],\r\n              ],\r\n              warnImageId,\r\n              id,\r\n            ],\r\n            'icon-size': 0.8,\r\n            // 图标强制全部显示\r\n            'icon-ignore-placement': true,\r\n            visibility: visibility,\r\n          },\r\n          // 这段代码是关于地图标记图层的样式设置，通常在地图应用程序中使用。它控制了标记图标的显示方式，包括图标的图像、大小和可见性等方面。\r\n          // 代码的主要部分是一个`layout`对象，其中包含了一系列属性设置，我会逐一解释：\r\n          // 1. `icon-image`: 这是一个用于设置图标图像的属性。它使用了一种条件语句结构，根据不同的条件选择不同的图标图像。具体来说，它根据以下条件来选择图标图像：\r\n          // - 如果`iotOnline`属性的值等于`0`，并且`isWarn`属性的值不等于`1`，则使用`id`作为图标图像。\r\n          // - 如果`iotOnline`属性的值等于`1`，则使用`offlineImageId`作为图标图像。\r\n          // - 如果`iotOnline`属性的值等于`0`，并且`isWarn`属性的值等于`1`，则使用`warnImageId`作为图标图像。\r\n          // - 如果以上条件都不满足，则使用`id`作为图标图像。\r\n          // 2. `icon-size`: 这是一个用于设置图标大小的属性，值为`0.7`，表示图标大小为原始大小的 70%。\r\n          // 3. `icon-ignore-placement`: 这是一个布尔值属性，设置为`true`。它控制是否忽略图标的放置规则，即不受图标之间的相互遮挡影响，强制全部显示图标。\r\n          // 4. `visibility`: 这是一个用于设置图层可见性的属性，其中`visibility`的值由外部变量确定。这可能是控制图标图层在地图上是否可见的开关。\r\n          minzoom: 13,\r\n        },\r\n        ''\r\n      )\r\n\r\n      pointList.forEach((item) => {\r\n        let showText = ''\r\n        let showFunctionPointArr = item.realtimeData.filter((i) => {\r\n          return i.isShow == 0\r\n        })\r\n        if (showFunctionPointArr.length > 0) showText = showFunctionPointArr[0].val + ' ' + showFunctionPointArr[0].desc\r\n        let popup = new mapboxgl.Popup({\r\n          closeButton: false, // 是否显示关闭按钮\r\n          closeOnClick: false, // 是否支持点击关闭按钮\r\n          offset: [0, -10], // 偏移量\r\n        })\r\n          .setLngLat([item.lon, item.lat])\r\n          .setHTML(`<div class=\"popup-content-monitor ${item.belongSystem}\">` + showText + '</div>')\r\n        // .addTo(window.xaMap);\r\n        popup.belongSystem = item.belongSystem\r\n        popup.layerIdName = id\r\n        MapObj.popupArray.push(popup)\r\n      })\r\n\r\n      let obj = {}\r\n      obj[id] = pointList\r\n      MapObj.monitorPopupContent.push(obj)\r\n      // window.xaMap.on(\"mouseenter\", id, this.handleMouseEnter);\r\n      // window.xaMap.on(\"mouseout\", id, this.handleMouseOut);\r\n      window.xaMap.on('click', id, this.handleMouseClick)\r\n      // window.xaMap.on(\"load\", () => {\r\n      //   window.xaMap.moveLayer(\"压力监测\", \"\");\r\n      // });\r\n    },\r\n    flagBtnClick(flag) {\r\n      this.monitorPopupVisible = flag // 控制弹窗显示隐藏\r\n      let monitorLayerIdList = [\"流量计(供)*\", \"流量计(再生)*\", \"压力监测(供)*\", \"压力监测(再生)*\", \"液位计(雨)*\", \"液位计(污)*\", \"水位计*\"]\r\n      // 找出地图上所有监测设备图层visibility为visible的图层\r\n      let visibleLayerList = monitorLayerIdList.filter((item) => {\r\n        return window.xaMap.getLayoutProperty(item, \"visibility\") == \"visible\"\r\n      })\r\n      console.log(\"visibleLayerList\", visibleLayerList);\r\n      MapObj.popupArray.forEach((item) => {\r\n        item.remove()\r\n      })\r\n      if (flag) {\r\n        MapObj.popupArray.forEach((item) => {\r\n          // console.log(\"mapbox Popup\", item);\r\n          if (item.belongSystem == '再生水') {\r\n            document.querySelectorAll('.' + item.belongSystem).forEach((i) => {\r\n              i.parentElement.style.borderTop = '2px solid #00D186'\r\n            })\r\n          } else if (item.belongSystem == '污水') {\r\n            document.querySelectorAll('.' + item.belongSystem).forEach((i) => {\r\n              i.parentElement.style.borderTop = '2px solid #91510A'\r\n            })\r\n          } else {\r\n            document.querySelectorAll('.' + item.belongSystem).forEach((i) => {\r\n              i.parentElement.style.borderTop = '2px solid #1B67D8'\r\n            })\r\n          }\r\n          visibleLayerList.forEach((i) => {\r\n            if (item.layerIdName == i) {\r\n              item.addTo(window.xaMap)\r\n            }\r\n          })\r\n        })\r\n      }\r\n    },\r\n    // 鼠标点击\r\n    handleMouseClick(e) {\r\n      const feature = e.features[0]\r\n      window.xaMap.getCanvas().style.cursor = 'pointer'\r\n      // 管线详情面板关闭\r\n      this.pipelineShow = false\r\n      // 赋值传递给详情面板PressureMonitor.vue\r\n      this.pressureDataDetail = _cloneDeep(feature.properties)\r\n      this.pressureDataDetail.realtimeData = JSON.parse(\r\n        feature.properties.realtimeData\r\n      )\r\n      // 压力监测详情面板\r\n      this.pressureMonitorShow = true\r\n    },\r\n    // 管线...点击\r\n    handleLayerClick(e) {\r\n      window.xaMap.getCanvas().style.cursor = 'pointer'\r\n      const feature = window.xaMap.queryRenderedFeatures(e.point)[0]\r\n      console.log('-----feature-----', JSON.parse(JSON.stringify(feature)));\r\n      this.layerID = feature.layer.id\r\n      // this.rebuildDetailInfo(feature);\r\n\r\n      const type = feature.geometry.type\r\n      const sourceData = {\r\n        type: 'FeatureCollection',\r\n        features: [feature],\r\n      }\r\n      let center = getCenter(sourceData).geometry.coordinates\r\n      this.highlightOnMap(type, [feature], this.layerID, center)\r\n      if (\r\n        this.layerID === \"rd_map_drainpipe_ys_big\" ||\r\n        this.layerID == \"rd_map_drainpipe_ys_small\" ||\r\n        this.layerID === \"rd_map_drainpipe_ws_big\" ||\r\n        this.layerID == \"rd_map_drainpipe_ws_small\"\r\n      ) {\r\n        // 压力监测详情面板关闭\r\n        this.pressureMonitorShow = false\r\n        this.equipmentShow = false\r\n        // 管线弹窗打开\r\n        this.pipelineShow = true\r\n        this.pipelineBaseInfo = feature.properties\r\n        this.equipmentType = \"map_drainpipe\";\r\n      } else if(\r\n        this.layerID == \"map_supply_pipe_distribute\" ||\r\n        this.layerID == \"map_supply_pipe_circulating\" ||\r\n        this.layerID == \"map_supply_pipe_delivery\" || \r\n        this.layerID == \"map_supply_pipe_origin\" ||\r\n        this.layerID == \"map_supply_pipe_drink\"\r\n      ) {\r\n        this.pressureMonitorShow = false\r\n        this.equipmentShow = false\r\n        this.pipelineShow = true\r\n        this.pipelineBaseInfo = feature.properties\r\n        this.equipmentType = \"map_supply_pipe\";\r\n      } else if(this.layerID == \"map_recycle_pipe\") {\r\n        this.pressureMonitorShow = false\r\n        this.equipmentShow = false\r\n        this.pipelineShow = true\r\n        this.pipelineBaseInfo = feature.properties\r\n        this.equipmentType = \"map_recycle_pipe\";\r\n      } else if (this.layerID == \"map_supply_firehydrant\") {\r\n        this.equipmentType = \"map_supply_firehydrant\";\r\n        this.pressureMonitorShow = false\r\n        this.pipelineShow = false\r\n        this.equipmentShow = true\r\n        this.equipmentBaseInfo = feature.properties\r\n      } else if (this.layerID == \"map_supply_valve\") {\r\n        this.equipmentType = \"map_supply_valve\";\r\n        this.pressureMonitorShow = false\r\n        this.pipelineShow = false\r\n        this.equipmentShow = true\r\n        this.equipmentBaseInfo = feature.properties\r\n      } else if (this.layerID == \"rd_map_manhole\") {\r\n        this.equipmentType = \"map_manhole\";\r\n        this.pressureMonitorShow = false\r\n        this.pipelineShow = false\r\n        this.equipmentShow = true\r\n        this.equipmentBaseInfo = feature.properties\r\n      } else if (this.layerID == \"rd_map_outfall\") {\r\n        this.equipmentType = \"map_outfall\";\r\n        this.pressureMonitorShow = false\r\n        this.pipelineShow = false\r\n        this.equipmentShow = true\r\n        this.equipmentBaseInfo = feature.properties\r\n      } else if (this.layerID == \"rd_map_comb\") {\r\n        // this.equipmentType = \"rd_map_comb\";\r\n        this.equipmentType = \"map_comb\";\r\n        this.pressureMonitorShow = false\r\n        this.pipelineShow = false\r\n        this.equipmentShow = true\r\n        this.equipmentBaseInfo = feature.properties\r\n      } else if (this.layerID == \"rd_map_gate\") {\r\n        // this.equipmentType = \"rd_map_gate\";\r\n        this.equipmentType = \"map_gate\";\r\n        this.pressureMonitorShow = false\r\n        this.pipelineShow = false\r\n        this.equipmentShow = true\r\n        this.equipmentBaseInfo = feature.properties\r\n      } else {\r\n        // 管线弹窗关闭\r\n        this.pipelineShow = false\r\n        this.equipmentShow = false\r\n      }\r\n    },\r\n    /**\r\n     * 高亮选中的元素\r\n     */\r\n    highlightOnMap(type, features, layerID, lngLat) {\r\n      if (layerID) this.layerID = layerID\r\n      this.removeAllHighlightLayer()\r\n      const sourceData = {\r\n        type: 'FeatureCollection',\r\n        features: features,\r\n      }\r\n      const bound = bbox(sourceData)\r\n      const center = lngLat\r\n        ? lngLat\r\n        : getCenter(sourceData).geometry.coordinates\r\n      // window.xaMap.fitBounds(bound, { maxZoom: 12, padding: { right: 400 } });\r\n      // this.showPopup(center, features);\r\n      this.$nextTick(() => {\r\n        if (['Point', 'MultiPoint'].includes(type)) {\r\n          // 点\r\n          if (features[0].layer && features[0].layer.layout['icon-image']) {\r\n            const iconName =\r\n              features[0].layer.layout['icon-image']?.name ||\r\n              features[0].layer.layout['icon-image']\r\n            const iconsize = features[0].layer.layout['icon-size'] || 1\r\n            this.removeLayerSource('hightlightPoint')\r\n            // if(this.mouseEnterCallback) this.mouseEnterCallback(e.lngLat, [feature]);\r\n            window.xaMap.addLayer({\r\n              id: 'hightlightPoint',\r\n              type: 'symbol',\r\n              source: {\r\n                type: 'geojson',\r\n                data: features[0],\r\n              },\r\n              layout: {\r\n                'icon-size': iconsize * 1.4,\r\n                'icon-image': iconName,\r\n              },\r\n            })\r\n          } else {\r\n            window.xaMap.addLayer({\r\n              id: `hightlightPoint`,\r\n              type: 'circle',\r\n              source: {\r\n                type: 'geojson',\r\n                data: sourceData,\r\n              },\r\n              paint: {\r\n                'circle-color': 'red',\r\n                'circle-opacity': 0,\r\n                'circle-radius': 6,\r\n                'circle-stroke-color': '#1D75FF',\r\n                'circle-stroke-opacity': 1,\r\n                'circle-stroke-width': 3,\r\n              },\r\n              // layout: {\r\n              //   'icon-image': 'uncured-pulsing-dot',\r\n              //   'icon-ignore-placement': true,\r\n              //   'icon-allow-overlap': true\r\n              // },\r\n            })\r\n          }\r\n          this.$store.commit('SHOW_MAPRESERVOIR', false)\r\n        } else if (['LineString', 'MultiLineString'].includes(type)) {\r\n          let color = '#91510A'\r\n          if (layerID == 'rd_map_drainpipe_ys_small') {\r\n            color = '#399AEA'\r\n          } else if (layerID == 'rd_map_drainpipe_ws_small') {\r\n            color = '#91510A'\r\n          } else {\r\n            defaltLegendList.forEach((legend) => {\r\n              if (legend.id == layerID) {\r\n                color = legend.clickColor\r\n              }\r\n            })\r\n          }\r\n          // 线\r\n          window.xaMap.addLayer({\r\n            id: `hightlightLine`,\r\n            type: 'line',\r\n            source: {\r\n              type: 'geojson',\r\n              data: sourceData,\r\n            },\r\n            paint: {\r\n              'line-color': color,\r\n              'line-width': 8,\r\n            },\r\n            // layout: {\r\n            //   'icon-image': 'uncured-pulsing-dot',\r\n            //   'icon-ignore-placement': true,\r\n            //   'icon-allow-overlap': true\r\n            // },\r\n          })\r\n          // window.xaMap.fitBounds(bound, {maxZoom: 15, padding: {right: 400}});\r\n        } else if (['Polygon', 'MultiPolygon'].includes(type)) {\r\n          // 面\r\n          window.xaMap.addLayer({\r\n            id: `hightlightPolygon`,\r\n            type: 'fill',\r\n            source: {\r\n              type: 'geojson',\r\n              data: sourceData,\r\n            },\r\n            paint: {\r\n              'fill-color': 'rgba(255, 0, 0, 0.6)',\r\n            },\r\n            // layout: {\r\n            //   'icon-image': 'uncured-pulsing-dot',\r\n            //   'icon-ignore-placement': true,\r\n            //   'icon-allow-overlap': true\r\n            // },\r\n          })\r\n          // window.xaMap.fitBounds(bound, {maxZoom: 15, padding: {right: 400}});\r\n        }\r\n      })\r\n    },\r\n    removeAllHighlightLayer(e) {\r\n      this.removeLayerSource('hightlightPoint')\r\n      this.removeLayerSource('hightlightLine')\r\n      this.removeLayerSource('hightlightPolygon')\r\n    },\r\n    /**\r\n     * 清空临时的图层和源\r\n     */\r\n    removeLayerSource(name) {\r\n      if (window.xaMap.getLayer(`${name}`)) window.xaMap.removeLayer(`${name}`)\r\n      if (window.xaMap.getSource(`${name}`))\r\n        window.xaMap.removeSource(`${name}`)\r\n    },\r\n    // 压力监测详情面板PressureMonitor.vue关闭按钮回调\r\n    closePopup_pressure() {\r\n      // 压力监测详情面板\r\n      this.pressureMonitorShow = false\r\n    },\r\n    //关闭管线弹窗\r\n    closePopup_line() {\r\n      this.pipelineShow = false\r\n      this.equipmentShow = false\r\n    },\r\n  },\r\n  mounted () {\r\n    this.showSearchBar()\r\n  },\r\n}\r\n</script>\r\n\r\n<style scoped lang=\"less\">\r\n/deep/ .mapboxgl-popup {\r\n}\r\n/deep/ .mapboxgl-popup-content {\r\n}\r\n.main {\r\n  width: 100%;\r\n  height: calc(100% - 98px - env(safe-area-inset-bottom));\r\n  height: calc(100% - 98px - constant(safe-area-inset-bottom));\r\n  position: relative;\r\n  /deep/ .fm-hairline--bottom::after{\r\n    display: none;\r\n  }\r\n  .xa-map-one-map {\r\n    height: calc(100% - 98px - env(safe-area-inset-bottom));\r\n    height: calc(100% - 98px - constant(safe-area-inset-bottom));\r\n  }\r\n  .top {\r\n    width: 100%;\r\n    height: 70px;\r\n    padding: 12px 0;\r\n    position: relative;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    .top-title {\r\n      width: 400px;\r\n      height: 64px;\r\n      background: #f5f5f5;\r\n      border-radius: 36px;\r\n      display: flex;\r\n      align-items: center;\r\n      padding: 4px;\r\n      span {\r\n        width: 50%;\r\n        height: 100%;\r\n        font-size: 28px;\r\n        font-family: PingFangSC-Regular, PingFang SC;\r\n        font-weight: 400;\r\n        color: #555555;\r\n        line-height: 40px;\r\n        border-radius: 36px;\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n      }\r\n      .active {\r\n        background: #1b67d8;\r\n        box-shadow: 0px 8px 16px 0px rgba(104, 115, 127, 0.06);\r\n        font-weight: 500;\r\n        color: #FFFFFF;        \r\n      }\r\n    }\r\n  }\r\n}\r\n// /deep/.fm-search {\r\n  // position: absolute;\r\n  // width: 100%;\r\n  // // top: 1.60rem;\r\n  // padding: 0 36px;\r\n  // background-color: transparent;\r\n// }\r\n/deep/.fm-search__content {\r\n  background-color: #ffffff;\r\n  box-shadow: 0px 8px 20px 0px rgba(104, 115, 127, 0.2);\r\n  border-radius: 16px;\r\n  height: 80px;\r\n}\r\n/deep/.fm-search-class {\r\n  // background-color: #ffffff;\r\n  // box-shadow: 0px 8px 20px 0px rgba(104, 115, 127, 0.2);\r\n  // border-radius: 16px;\r\n  // height: 80px;\r\n  position: absolute;\r\n  width: 100%;\r\n  // top: 1.60rem;\r\n  padding: 0 36px;\r\n  background-color: transparent;\r\n}\r\n</style>"]}]}