"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _deptTreeRoot = _interopRequireDefault(require("./deptTreeRoot"));
var _tag = _interopRequireDefault(require("./tag/tag"));
require("./deptTree-sfc.css");
var __vue_render__ = function __vue_render__() {
  var _vm = this;
  var _h = _vm.$createElement;
  var _c = _vm._self._c || _h;
  return _c('div', [_c('div', {
    staticClass: "my-cell",
    on: {
      "click": _vm.showTree
    }
  }, [_c('div', {
    staticClass: "my-cell-title"
  }, [_c('span', {
    staticClass: "weui-label",
    staticStyle: {
      "width": "100px"
    }
  }, [_vm._v(_vm._s(_vm.title))])]), _vm._v(" "), _c('div', {
    staticClass: "my-cell-content"
  }, [_vm._l(_vm.depts, function (item, index) {
    return !_vm.readonly && (_vm.overallFlag1 == false || _vm.constructionFlag1 == false) ? _c('tag', {
      key: index,
      attrs: {
        "value": item
      },
      on: {
        "click": function click($event) {
          return _vm.deleteCheck(item);
        }
      }
    }) : _vm._e();
  }), _vm._v(" "), _vm.readonly && (_vm.overallFlag1 == false || _vm.constructionFlag1 == false) ? _c('span', [_vm._v(_vm._s(_vm.name))]) : _vm._e(), _vm._v(" "), _vm.overallFlag1 == true ? _c('span', {
    staticClass: "over_depname"
  }, [_vm._v(_vm._s(_vm.overallPrjDepName1))]) : _vm._e(), _vm._v(" "), _vm.overallFlag1 == true ? _c('span', {
    staticClass: "over_depname"
  }, [_vm._v(_vm._s(_vm.checkDepName1))]) : _vm._e(), _vm._v(" "), _vm.constructionFlag1 == true ? _c('span', {
    staticClass: "over_depname"
  }, [_vm._v(_vm._s(_vm.TaskCheckDepName))]) : _vm._e()], 2), _vm._v(" "), !_vm.readonly ? _c('div', {
    staticClass: "my-cell-icon"
  }) : _vm._e()]), _vm._v(" "), _c('div', {
    directives: [{
      name: "transfer-dom",
      rawName: "v-transfer-dom"
    }]
  }, [_c('fm-popup', {
    style: {
      height: '100%'
    },
    attrs: {
      "visible": _vm.show,
      "position": "bottom"
    },
    on: {
      "update:visible": function updateVisible($event) {
        _vm.show = $event;
      }
    }
  }, [_c('fm-nav-bar', {
    attrs: {
      "title": "选择部门",
      "left-text": "取消",
      "right-text": "确定",
      "left-arrow": ""
    },
    on: {
      "click-left": _vm.cancel,
      "click-right": _vm.check
    }
  }), _vm._v(" "), _c('div', {
    staticStyle: {
      "position": "relative",
      "top": "55px"
    }
  }, [_c('easy-search', {
    attrs: {
      "placeholder": "请输入部门"
    },
    on: {
      "onClear": _vm.onClear,
      "onSearch": _vm.onSearch
    }
  }), _vm._v(" "), _c('div', {
    staticClass: "after-search"
  }, [_c('div', {
    staticStyle: {
      "height": "auto"
    }
  }, [!_vm.isSearch ? _c('dept-tree-root', {
    attrs: {
      "list": _vm.tree,
      "value": _vm.checked,
      "depts": _vm.depts,
      "checkbox": true,
      "name": "name",
      "children": "children",
      "loadData": true,
      "multiple": _vm.multiple,
      "deptCode": _vm.deptCode
    }
  }) : _vm._e(), _vm._v(" "), _vm.isSearch ? _c('dept-tree-root', {
    attrs: {
      "searchlist": _vm.result,
      "value": _vm.checked,
      "depts": _vm.depts,
      "checkbox": true,
      "type": "search",
      "loadData": true,
      "multiple": _vm.multiple,
      "deptCode": _vm.deptCode
    },
    on: {
      "update:searchlist": function updateSearchlist($event) {
        _vm.result = $event;
      }
    }
  }) : _vm._e()], 1)])], 1)], 1)], 1)]);
};
var __vue_staticRenderFns__ = [];
var _default2 = {
  _scopeId: 'data-v-d18ed516',
  render: __vue_render__,
  staticRenderFns: __vue_staticRenderFns__,
  name: "deptTree",
  components: {
    deptTreeRoot: _deptTreeRoot.default,
    Tag: _tag.default
  },
  props: {
    value: {
      type: String,
      default: function _default() {
        return "";
      }
    },
    // person 人员/dept  部门
    type: {
      type: String,
      default: function _default() {
        return "normal";
      }
    },
    title: {
      type: String,
      default: ""
    },
    multiple: {
      type: Boolean,
      default: function _default() {
        return false;
      }
    },
    readonly: {
      type: Boolean,
      default: function _default() {
        return false;
      }
    },
    overallFlag: {
      type: Boolean,
      default: function _default() {
        return false;
      }
    },
    overallPrjDepName: {
      type: String,
      default: ""
    },
    checkDepName: {
      type: String,
      default: ""
    },
    // 施工反馈审核部门
    constructionFlag: {
      type: Boolean,
      default: function _default() {
        return false;
      }
    },
    TaskCheckDepName: {
      type: String,
      default: ""
    }
  },
  mounted: function mounted() {
    var _this = this;
    this.$store.dispatch("getDept", {
      id: 0,
      wait: false
    });
    this.$ajax({
      method: 'get',
      url: 'sys-user/orgs/tree',
      params: {
        // isAll: false,
        // portalId: '1302785644422082562'
      }
    }).then(function (res) {
      _this.tree = res.data.data;
    });
  },
  data: function data() {
    return {
      show: false,
      isSearch: false,
      list: [],
      checked: [],
      depts: [],
      deptCode: [],
      depCode: "",
      tree: [],
      result: [],
      id: "",
      deptname: {},
      checkValue: this.value,
      overallFlag1: this.overallFlag,
      overallPrjDepName1: this.overallPrjDepName,
      checkDepName1: this.checkDepName,
      constructionFlag1: this.constructionFlag
    };
  },
  methods: {
    showTree: function showTree() {
      if (this.readonly) {
        return false;
      }
      this.show = true;
      this.overallFlag1 = false;
      this.constructionFlag1 = false;
      if (this.depts) {
        this.checkValue = this.checked;
      } else {
        return this.checkValue != this.checked;
      }
    },
    // 选择按钮
    check: function check() {
      this.$emit("input", this.depts.join(","));
      this.show = false;
      this.depCode = this.deptCode[0];
      console.log(this.depCode);
      this.$emit("depCode", this.depCode);
    },
    cancel: function cancel() {
      this.show = false;
    },
    // 删除回填的部门
    deleteCheck: function deleteCheck(val) {
      var _this2 = this;
      this.checked = [];
      this.depts.splice(this.depts.findIndex(function (item) {
        return item === val;
      }), 1);
      this.$nextTick(function () {
        _this2.$emit("input", _this2.depts.join(","));
      });
      console.log(this.checked);
    },
    onClear: function onClear() {
      this.isSearch = false;
    },
    onSearch: function onSearch(val) {
      if (!val) {
        this.isSearch = false;
        return false;
      }
      if (val) {
        this.result = this.tree.filter(function (tree) {
          return Object.keys(tree).some(function (key) {
            return String(tree[key]).indexOf(val) > -1;
          });
        });
        // for (var i = 0; i < this.tree.length; i++) {
        //   if (this.tree[i].indexOf(val) >= 0) {
        //     this.result.push(this.tree[i])
        //   }
        // }
        // return this.result
      }

      this.isSearch = true;
      // 获取当前部门的relationId
      // for (let i = 0; i < this.tree.length; i++) {
      //   for (let j = 0; j < this.tree[i].children.length; j++) {
      //     this.id = this.tree[i].children[j].content.relationId
      //   }
      // }
      // 部门搜索接口
      // this.$ajax({
      //   method: "get",
      //   // url: "sys-user/org/tree",
      //   url: 'sys-user/orgs/tree',
      //   params: {
      //     searchValue: val,
      //     relationId: this.id
      //   }
      // }).then(res => {
      //   this.result = res.data.data
      //   this.isSearch = true
      // })
    },
    onShow: function onShow() {
      this.checked = this.value ? this.value.split(",") : [];
      this.depts = this.depts ? this.value.split(",") : [];
      // this.deptCode = this.deptCode ? this.value.split(",") : []
    }
  },

  computed: {
    // tree () {
    //   return this.$store.state.deptTree
    // }
  },
  watch: {
    "$store.state.defaultPop": function $storeStateDefaultPop() {
      if (!this.$store.state.defaultPop) {
        this.show = false;
      }
    }
  }
};
exports.default = _default2;