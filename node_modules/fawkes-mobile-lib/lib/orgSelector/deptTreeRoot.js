"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
require("./deptTreeRoot-sfc.css");
var __vue_render__ = function __vue_render__() {
  var _vm = this;
  var _h = _vm.$createElement;
  var _c = _vm._self._c || _h;
  return _c('div', {
    staticStyle: {
      "height": "calc(100% - 44px)"
    }
  }, [_c('ul', {
    staticClass: "accordion"
  }, _vm._l(_vm.tree, function (item, index) {
    return _c('li', {
      key: index
    }, [_c('div', {
      staticClass: "link",
      on: {
        "click": function click($event) {
          return _vm.openAccordion(item);
        }
      }
    }, [_c('i', {
      staticStyle: {
        "color": "#347DF6"
      },
      attrs: {
        "name": "organize"
      }
    }), _vm._v(" "), item.parentId == '0' ? _c('div', [_c('i', {
      class: ['fm-icon fm-icon-arrow', {
        'openImg': item.open
      }],
      attrs: {
        "name": "arrow-down"
      }
    })]) : _c('div', [_vm.checkbox ? _c('check-icon', {
      staticClass: "choose1",
      attrs: {
        "value": _vm.checked.includes(item.content.id)
      },
      nativeOn: {
        "click": function click($event) {
          return _vm.check(item);
        }
      }
    }) : _vm._e()], 1), _vm._v("\n          " + _vm._s(item.content.name) + "\n        ")]), _vm._v(" "), _c('div', {
      class: 'submenu ' + (item.open ? 'openChild' : '')
    }, [item[_vm.children] ? _c('dept-tree-root', {
      attrs: {
        "list": item[_vm.children],
        "value": _vm.checked,
        "checkbox": _vm.checkbox,
        "name": _vm.name,
        "children": _vm.children,
        "loadData": _vm.loadData,
        "depts": _vm.depts,
        "deptCode": _vm.deptCode,
        "multiple": _vm.multiple
      }
    }) : _vm._e()], 1)]);
  }), 0), _vm._v(" "), _c('ul', {
    staticClass: "accordion"
  }, _vm._l(_vm.searchtree, function (item, index) {
    return _c('li', {
      key: index
    }, [_c('div', {
      staticClass: "link"
    }, [_vm.checkbox ? _c('check-icon', {
      staticClass: "choose1",
      attrs: {
        "value": _vm.checked.includes(item.content.id)
      },
      nativeOn: {
        "click": function click($event) {
          return _vm.check(item);
        }
      }
    }) : item.state ? _c('tag', {
      staticClass: "state-icon",
      attrs: {
        "color": _vm.setState(item.state),
        "closable": false,
        "value": item.state
      }
    }) : _vm._e(), _vm._v(" "), _c('span', {
      staticStyle: {
        "position": "relative",
        "right": "30px"
      }
    }, [_vm._v(_vm._s(item.content.name))])], 1)]);
  }), 0)]);
};
var __vue_staticRenderFns__ = [];
var _default2 = {
  _scopeId: 'data-v-63384680',
  render: __vue_render__,
  staticRenderFns: __vue_staticRenderFns__,
  name: "deptTreeRoot",
  props: {
    // 部门-人员数据
    list: {
      type: Array,
      default: function _default() {
        return [];
      }
    },
    // 搜索的接口数据
    searchlist: {
      type: Array,
      default: function _default() {
        return [];
      }
    },
    // 已选列表
    value: {
      type: Array,
      default: function _default() {
        return [];
      }
    },
    // 保存选择的对象
    depts: {
      type: Array,
      default: function _default() {
        return [];
      }
    },
    deptCode: {
      type: Array,
      default: function _default() {
        return [];
      }
    },
    checkbox: {
      type: Boolean,
      default: function _default() {
        return false;
      }
    },
    children: {
      type: String,
      default: 'children'
    },
    name: {
      type: String,
      default: 'name'
    },
    loadData: {
      type: Boolean,
      default: function _default() {
        return false;
      }
    },
    multiple: {
      type: Boolean,
      default: function _default() {
        return false;
      }
    }
  },
  data: function data() {
    return {
      checked: this.value,
      tree: JSON.parse(JSON.stringify(this.list)),
      searchtree: JSON.parse(JSON.stringify(this.searchlist))
    };
  },
  methods: {
    openAccordion: function openAccordion(item) {
      var _this = this;
      console.log(this.searchlist);
      if (this.loadData && !item.open) {
        if (item.soncount > 0 && !item[this.children]) {
          this.$store.dispatch('getDept', {
            id: item.id,
            callback: function callback(data) {
              _this.$set(item, 'children', data);
            }
          });
        }
      }
      this.$nextTick(function () {
        _this.$set(item, 'open', !item.open);
      });
    },
    // 勾选
    check: function check(val) {
      if (this.multiple) {
        if (!this.checked.includes(val.content.id)) {
          this.depts.push(val.content.name);
          this.checked.push(val.content.id);
          this.deptCode.push(val.content.orgNo);
        } else {
          this.store.splice(this.depts.findIndex(function (item) {
            return item === val.content.name;
          }), 1);
          this.checked.splice(this.checked.findIndex(function (item) {
            return item === val.content.id;
          }), 1);
          this.store.splice(this.deptCode.findIndex(function (item) {
            return item === val.content.orgNo;
          }), 1);
        }
      } else {
        if (!this.checked.includes(val.content.id)) {
          this.depts.splice(0, 1, val.content.name);
          this.checked.splice(0, 1, val.content.id);
          this.deptCode.splice(0, 1, val.content.orgNo);
        } else {
          this.depts.splice(this.depts.findIndex(function (item) {
            return item === val.content.name;
          }), 1);
          this.checked.splice(this.checked.findIndex(function (item) {
            return item === val.content.id;
          }), 1);
          this.deptCode.splice(this.deptCode.findIndex(function (item) {
            return item === val.content.orgNo;
          }), 1);
        }
      }
      console.log(this.deptCode);
      this.$emit('input', this.checked);
    },
    getValues: function getValues(val) {
      return this.depts.map(function (item) {
        return item[val];
      }).join(',');
      return this.deptCode.map(function (item) {
        return item[val];
      }).join(',');
    },
    showarrow: function showarrow(item) {
      if (item.children) {
        if (item.children.length) {
          return true;
        }
      }
      if (item.soncount) {
        return true;
      }
      return false;
    }
  },
  computed: {
    field: function field() {
      return this.checkbox ? 'name' : 'name';
    }
  },
  watch: {
    value: function value() {
      this.checked = this.value;
    },
    list: function list() {
      this.tree = JSON.parse(JSON.stringify(this.list));
    },
    searchlist: function searchlist() {
      this.searchtree = JSON.parse(JSON.stringify(this.searchlist));
    }
  }
};
exports.default = _default2;