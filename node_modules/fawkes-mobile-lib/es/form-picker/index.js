"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _babelHelperVueJsxMergeProps = _interopRequireDefault(require("@vue/babel-helper-vue-jsx-merge-props"));
var _utils = require("../utils");
var _field = _interopRequireDefault(require("../field"));
var _popup = _interopRequireDefault(require("../popup"));
var _picker = _interopRequireDefault(require("../picker"));
/*
 * @Description: 表单选择器
 * @Author: ye_xf
 * @Date: 2022-06-14 08:54:32
 * @LastEditTime: 2022-06-14 16:09:47
 * @LastEditors: ye_xf
 * @Reference:
 */

var _createNamespace = (0, _utils.createNamespace)('form-picker'),
  createComponent = _createNamespace[0];
var _default2 = createComponent({
  props: {
    // Field props
    value: {
      type: String,
      default: ''
    },
    label: {
      type: String,
      default: ''
    },
    name: {
      type: String,
      default: ''
    },
    placeholder: {
      type: String,
      default: '请选择'
    },
    required: {
      type: Boolean,
      default: false
    },
    // Picker props
    columns: {
      type: Array,
      default: function _default() {
        return [];
      }
    },
    confirmButtonText: {
      type: String,
      default: ''
    },
    cancelButtonText: {
      type: String,
      default: ''
    },
    valueKey: {
      type: String,
      default: 'text'
    },
    showToolbar: {
      type: Boolean,
      default: true
    },
    defaultIndex: {
      type: Number | String,
      default: 0
    }
  },
  data: function data() {
    return {
      popupVisible: false
    };
  },
  methods: {
    initPicker: function initPicker() {
      if (!this.value) {
        var indexs = this.$refs.picker.getIndexes().map(function () {
          return 0;
        });
        this.$refs.picker.setIndexes(indexs); // 初始化选项
      }
    },
    onFieldClick: function onFieldClick() {
      this.popupVisible = true;
      this.$emit('click');
    },
    onPopupOpen: function onPopupOpen() {
      this.$emit('open');
    },
    onPopupOpened: function onPopupOpened() {
      this.$emit('opened');
    },
    onPopupClose: function onPopupClose() {
      this.$emit('close');
    },
    onPopupClosed: function onPopupClosed() {
      this.$emit('closed');
    },
    onPopupModalClick: function onPopupModalClick() {
      this.$emit('click-modal');
      this.$emit('clickModal');
      this.initPicker();
    },
    onPickerConfirm: function onPickerConfirm(value, index) {
      this.popupVisible = false;
      this.$emit('confirm', value, index);
    },
    onPickerCancel: function onPickerCancel(value, index) {
      this.popupVisible = false;
      this.initPicker();
      this.$emit('cancel', value, index);
    },
    onPickerChange: function onPickerChange(picker, value, index) {
      this.$emit('change', picker, value, index);
    }
  },
  render: function render() {
    var _attrs,
      _this = this;
    var h = arguments[0];
    return h("div", [h(_field.default, {
      "attrs": (_attrs = {
        "value": this.value,
        "label": this.label,
        "name": this.name,
        "placeholder": this.placeholder,
        "required": this.required,
        "readonly": this.readonly
      }, _attrs["readonly"] = true, _attrs["is-link"] = true, _attrs),
      "on": {
        "click": this.onFieldClick
      }
    }), h(_popup.default, (0, _babelHelperVueJsxMergeProps.default)([{
      "attrs": {
        "visible": this.popupVisible,
        "position": "bottom",
        "round": true
      },
      "on": {
        "open": this.onPopupOpen,
        "opened": this.onPopupOpened,
        "close": this.onPopupClose,
        "closed": this.onPopupClosed,
        "click-modal": this.onPopupModalClick
      }
    }, {
      "on": {
        'update:visible': function updateVisible(val) {
          _this.popupVisible = val;
        }
      }
    }]), [h(_picker.default, {
      "ref": "picker",
      "attrs": {
        "title": this.placeholder,
        "columns": this.columns,
        "confirm-button-text": this.confirmButtonText,
        "cancel-button-text": this.cancelButtonText,
        "value-key": this.valueKey,
        "show-toolbar": this.showToolbar,
        "default-index": this.defaultIndex
      },
      "on": {
        "confirm": this.onPickerConfirm,
        "cancel": this.onPickerCancel,
        "change": this.onPickerChange
      }
    })])]);
  }
});
exports.default = _default2;