"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _utils = require("../utils");
var _popup = require("../mixins/popup");
var _createNamespace = (0, _utils.createNamespace)('popup'),
  createComponent = _createNamespace[0],
  bem = _createNamespace[1];
var POSITIONS = {
  rtl: 'right',
  ltr: 'left',
  ttb: 'top',
  btt: 'bottom'
};
var _default = createComponent({
  mixins: [(0, _popup.PopupMixin)()],
  props: {
    round: Boolean,
    duration: [Number, String],
    showClose: Boolean,
    transition: String,
    safeAreaInsetBottom: Boolean,
    closeIcon: {
      type: String,
      default: 'cross'
    },
    closeIconPosition: {
      type: String,
      default: 'top-right'
    },
    position: {
      type: String,
      default: 'center'
    },
    direction: {
      type: String,
      default: ''
    },
    modal: {
      type: Boolean,
      default: true
    },
    closeOnClickModal: {
      type: Boolean,
      default: true
    },
    customClass: String
  },
  computed: {
    finalPosition: function finalPosition() {
      return this.direction ? POSITIONS[this.direction] : this.position;
    }
  },
  watch: {
    visible: function visible(val) {
      // 物理返回键监听
      if (val) {
        document.removeEventListener('backbutton', this.$back, false);
        document.addEventListener('backbutton', this.close, false);
      } else {
        document.removeEventListener('backbutton', this.close, false);
        document.addEventListener('backbutton', this.$back, false);
      }
    }
  },
  beforeCreate: function beforeCreate() {
    var _this = this;
    var createEmitter = function createEmitter(eventName) {
      return function (event) {
        return _this.$emit(eventName, event);
      };
    };
    this.onClick = createEmitter('click');
    this.onOpened = createEmitter('opened');
    this.onClosed = createEmitter('closed');
  },
  mounted: function mounted() {},
  activated: function activated() {},
  methods: {
    onClickCloseIcon: function onClickCloseIcon(event) {
      this.$emit('click-close-icon', event);
      this.close();
    },
    handleClose: function handleClose() {
      this.close();
    }
  },
  render: function render() {
    var _bem;
    var h = arguments[0];
    if (!this.shouldRender) {
      return;
    }
    var round = this.round,
      finalPosition = this.finalPosition,
      duration = this.duration,
      customClass = this.customClass;
    var isCenter = finalPosition === 'center';
    var transitionName = this.transition || (isCenter ? 'fm-fade' : "fm-popup-slide-" + finalPosition);
    var style = {};
    if ((0, _utils.isDef)(duration)) {
      var key = isCenter ? 'animationDuration' : 'transitionDuration';
      style[key] = duration + "s";
    }
    return h("transition", {
      "attrs": {
        "appear": this.transitionAppear,
        "name": transitionName
      },
      "on": {
        "afterEnter": this.onOpened,
        "afterLeave": this.onClosed
      }
    }, [h("div", {
      "directives": [{
        name: "show",
        value: this.visible
      }],
      "style": style,
      "class": [bem((_bem = {
        round: round
      }, _bem[finalPosition] = finalPosition, _bem['safe-area-inset-bottom'] = this.safeAreaInsetBottom, _bem)), customClass],
      "on": {
        "click": this.onClick
      }
    }, [this.slots(), this.showClose && h("i", {
      "attrs": {
        "role": "button",
        "tabindex": "0"
      },
      "class": ["fm-icon fm-icon-" + this.closeIcon, bem('close-icon', this.closeIconPosition)],
      "on": {
        "click": this.onClickCloseIcon
      }
    })])]);
  }
});
exports.default = _default;