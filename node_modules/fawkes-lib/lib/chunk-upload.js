module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/dist/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 104);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return normalizeComponent; });
/* globals __VUE_SSR_CONTEXT__ */

// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).
// This module is a runtime utility for cleaner component module output and will
// be included in the final webpack user bundle.

function normalizeComponent(
  scriptExports,
  render,
  staticRenderFns,
  functionalTemplate,
  injectStyles,
  scopeId,
  moduleIdentifier /* server only */,
  shadowMode /* vue-cli only */
) {
  // Vue.extend constructor export interop
  var options =
    typeof scriptExports === 'function' ? scriptExports.options : scriptExports

  // render functions
  if (render) {
    options.render = render
    options.staticRenderFns = staticRenderFns
    options._compiled = true
  }

  // functional template
  if (functionalTemplate) {
    options.functional = true
  }

  // scopedId
  if (scopeId) {
    options._scopeId = 'data-v-' + scopeId
  }

  var hook
  if (moduleIdentifier) {
    // server build
    hook = function (context) {
      // 2.3 injection
      context =
        context || // cached call
        (this.$vnode && this.$vnode.ssrContext) || // stateful
        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional
      // 2.2 with runInNewContext: true
      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
        context = __VUE_SSR_CONTEXT__
      }
      // inject component styles
      if (injectStyles) {
        injectStyles.call(this, context)
      }
      // register component module identifier for async chunk inferrence
      if (context && context._registeredComponents) {
        context._registeredComponents.add(moduleIdentifier)
      }
    }
    // used by ssr in case component is cached and beforeCreate
    // never gets called
    options._ssrRegister = hook
  } else if (injectStyles) {
    hook = shadowMode
      ? function () {
          injectStyles.call(
            this,
            (options.functional ? this.parent : this).$root.$options.shadowRoot
          )
        }
      : injectStyles
  }

  if (hook) {
    if (options.functional) {
      // for template-only hot-reload because in that case the render fn doesn't
      // go through the normalizer
      options._injectStyles = hook
      // register for functional component in vue file
      var originalRender = options.render
      options.render = function renderWithStyleInjection(h, context) {
        hook.call(context)
        return originalRender(h, context)
      }
    } else {
      // inject component registration as beforeCreate hook
      var existing = options.beforeCreate
      options.beforeCreate = existing ? [].concat(existing, hook) : [hook]
    }
  }

  return {
    exports: scriptExports,
    options: options
  }
}


/***/ }),

/***/ 104:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/chunk-upload/src/index.vue?vue&type=template&id=38217788&
var render = function () {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "div",
    { staticClass: "fks-chunk-upload" },
    [
      _c(
        "div",
        { attrs: { id: "picker" } },
        [_vm._t("default", null, { disabled: _vm.uploadDisabled })],
        2
      ),
      this.fileArr.length || this.echoFileArr.length
        ? _c("upload-list", {
            attrs: {
              fileArr: _vm.fileArr,
              echoFileArr: _vm.echoFileArr,
              percentage: _vm.percentage,
              proColor: _vm.proColor,
              disabled: _vm.uploadDisabled,
              showDownload: _vm.showDownload,
              handleDownload: _vm.onDownload,
            },
            on: {
              "update:fileArr": function ($event) {
                _vm.fileArr = $event
              },
              "update:file-arr": function ($event) {
                _vm.fileArr = $event
              },
              "update:echoFileArr": function ($event) {
                _vm.echoFileArr = $event
              },
              "update:echo-file-arr": function ($event) {
                _vm.echoFileArr = $event
              },
              "update:percentage": function ($event) {
                _vm.percentage = $event
              },
              cancelFile: _vm.cancelFile,
            },
          })
        : _vm._e(),
    ],
    1
  )
}
var staticRenderFns = []
render._withStripped = true


// CONCATENATED MODULE: ./packages/chunk-upload/src/index.vue?vue&type=template&id=38217788&

// EXTERNAL MODULE: external "webuploader"
var external_webuploader_ = __webpack_require__(42);
var external_webuploader_default = /*#__PURE__*/__webpack_require__.n(external_webuploader_);

// EXTERNAL MODULE: external "js-md5"
var external_js_md5_ = __webpack_require__(64);
var external_js_md5_default = /*#__PURE__*/__webpack_require__.n(external_js_md5_);

// EXTERNAL MODULE: external "fawkes-lib/lib/utils/util"
var util_ = __webpack_require__(3);

// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/chunk-upload/src/UploadList/index.vue?vue&type=template&id=2bb6bd40&
var UploadListvue_type_template_id_2bb6bd40_render = function () {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c("div", [
    _vm.fileArr.length || _vm.echoFileArr.length
      ? _c(
          "ul",
          { staticClass: "upload-list" },
          [
            _vm._l(_vm.echoFileArr, function (fileObj, index) {
              return _c(
                "li",
                { key: fileObj.id, staticClass: "list-fileObj" },
                [
                  _c(
                    "a",
                    { staticClass: "fileObj-a" },
                    [
                      _c("fks-icon", {
                        staticStyle: {
                          "font-size": "25px",
                          "margin-right": "7px",
                        },
                        attrs: { "icon-class": _vm.fileType(fileObj.fileName) },
                      }),
                      _c("div", { staticClass: "info-box" }, [
                        _c("div", { staticClass: "file-name" }, [
                          _vm._v(
                            "\n            " +
                              _vm._s(fileObj.fileName) +
                              "\n          "
                          ),
                        ]),
                        _c("div", { staticClass: "file-size" }, [
                          _vm._v(
                            _vm._s(_vm._f("formatFileSize")(fileObj.size))
                          ),
                        ]),
                      ]),
                    ],
                    1
                  ),
                  !_vm.disabled
                    ? _c("i", {
                        staticClass: "fks-icon-close isActive",
                        on: {
                          click: function ($event) {
                            return _vm.deleteEchoFile(fileObj, index)
                          },
                        },
                      })
                    : _vm._e(),
                  _vm.showDownload
                    ? _c("i", {
                        staticClass: "fks-icon-download",
                        on: {
                          click: function ($event) {
                            return _vm.handleDownload(fileObj)
                          },
                        },
                      })
                    : _vm._e(),
                ]
              )
            }),
            _vm._l(_vm.fileArr, function (fileObj, index) {
              return _c("li", { key: index, staticClass: "list-fileObj" }, [
                _c(
                  "a",
                  { staticClass: "fileObj-a" },
                  [
                    _c("fks-icon", {
                      staticStyle: {
                        "font-size": "25px",
                        "margin-right": "7px",
                      },
                      attrs: { "icon-class": _vm.fileType(fileObj.name) },
                    }),
                    _c("div", { staticClass: "info-box" }, [
                      _c("div", { staticClass: "file-name" }, [
                        _vm._v(
                          "\n            " +
                            _vm._s(fileObj.name) +
                            "\n          "
                        ),
                      ]),
                      _c("div", { staticClass: "file-size" }, [
                        _vm._v(_vm._s(_vm._f("formatFileSize")(fileObj.size))),
                      ]),
                    ]),
                  ],
                  1
                ),
                _vm.percentage[_vm.getKey(fileObj)] < 100
                  ? _c(
                      "div",
                      { staticClass: "fileObj-per" },
                      [
                        _c("fks-progress", {
                          attrs: {
                            percentage: _vm.percentage[_vm.getKey(fileObj)],
                            "show-text": false,
                            "stroke-width": 4,
                            color: _vm.proColor,
                          },
                        }),
                      ],
                      1
                    )
                  : _vm._e(),
                !_vm.disabled
                  ? _c("i", {
                      staticClass: "fks-icon-close isActive",
                      on: {
                        click: function ($event) {
                          return _vm.close(fileObj, index)
                        },
                      },
                    })
                  : _vm._e(),
                _vm.showDownload && _vm.percentage[_vm.getKey(fileObj)] === 100
                  ? _c("i", {
                      staticClass: "fks-icon-download",
                      on: {
                        click: function ($event) {
                          return _vm.handleDownload(fileObj)
                        },
                      },
                    })
                  : _vm._e(),
              ])
            }),
          ],
          2
        )
      : _vm._e(),
  ])
}
var UploadListvue_type_template_id_2bb6bd40_staticRenderFns = []
UploadListvue_type_template_id_2bb6bd40_render._withStripped = true


// CONCATENATED MODULE: ./packages/chunk-upload/src/UploadList/index.vue?vue&type=template&id=2bb6bd40&

// EXTERNAL MODULE: ./src/utils/request.js + 2 modules
var request = __webpack_require__(13);

// EXTERNAL MODULE: external "vue"
var external_vue_ = __webpack_require__(5);
var external_vue_default = /*#__PURE__*/__webpack_require__.n(external_vue_);

// CONCATENATED MODULE: ./packages/chunk-upload/src/UploadList/api.js
/*
 * @Description: 
 * @Author: ye_xf
 * @Date: 2020-09-28 18:10:08
 * @LastEditTime: 2021-09-03 10:44:03
 * @LastEditors: Please set LastEditors
 * @Reference: 
 */



//根据文件token和文件组grouptoken删除文件，token删除单文件，grouptoken删除文件组
function deleteFile(data) {
    return (external_vue_default.a.prototype.$axios || request["a" /* default */])({
        url: "/sys-storage/file",
        method: "delete",
        data: data,
        transformRequest: [function (data) {
            return JSON.stringify(data);
        }],
        headers: {
            'Content-Type': 'application/json;charset=UTF-8'
        }
    });
}
// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/chunk-upload/src/UploadList/index.vue?vue&type=script&lang=js&
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//



//文件类型对应图标对象
var fileTypeIcon = {
  jpg: 'doc_img',
  jpeg: 'doc_img',
  png: 'doc_img',
  gif: 'doc_img',
  bmp: 'doc_img',
  txt: 'doc_txt',
  css: 'doc_code',
  html: 'doc_html',
  xlsx: 'doc_excel',
  exe: 'doc_exe',
  iso: 'doc_iso',
  ppt: 'doc_ppt',
  pptx: 'doc_ppt',
  zip: 'doc_zip',
  rar: 'doc_zip',
  pdf: 'doc_pdf',
  doc: 'doc_word',
  docx: 'doc_word',
  dir: 'doc_folder'
};

/* harmony default export */ var UploadListvue_type_script_lang_js_ = ({
  name: 'UploadList',
  components: {},
  props: {
    //已选文件数组
    fileArr: {
      type: Array,
      default: function _default() {
        return [];
      }
    },
    //回显文件数组
    echoFileArr: {
      type: Array,
      default: function _default() {
        return [];
      }
    },
    //文件的实时上传进度
    percentage: {
      type: Object,
      default: function _default() {
        return {};
      }
    },
    //进度条颜色
    proColor: {
      type: String,
      default: 'rgb(64, 158, 255)'
    },
    disabled: {
      type: Boolean,
      default: false
    },
    showDownload: {
      type: Boolean,
      default: true
    },
    handleDownload: {
      type: Function,
      default: function _default() {}
    }
  },
  data: function data() {
    return {};
  },

  filters: {
    //格式化文件大小
    formatFileSize: function formatFileSize(value) {
      if (value == null || value == '' || value == '0') {
        return '-';
      }
      var unitArr = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
      var index = 0;
      var srcsize = parseFloat(value);
      index = Math.floor(Math.log(srcsize) / Math.log(1024));
      var size = srcsize / Math.pow(1024, index);
      size = size.toFixed(2); // 保留的小数位数
      return size + unitArr[index];
    }
  },
  watch: {},
  computed: {},
  methods: {
    //根据文件类型确定图标样式
    fileType: function fileType(filename) {
      var fileA = filename.split('.');
      var type = 'doc_blank';
      Object.keys(fileTypeIcon).forEach(function (key) {
        if (key == fileA[fileA.length - 1].toLowerCase()) {
          type = fileTypeIcon[key];
        }
      });
      return type;
    },
    getKey: function getKey(fileObj) {
      return fileObj.name + '&' + fileObj.lastModifiedDate;
    },

    //取消分片上传/删除已上传文件
    close: function close(fileObj, index) {
      var _this = this;

      var key = this.getKey(fileObj);

      if (this.percentage[key] < 100) {
        this.$emit('cancelFile', fileObj); //分片上传取消
      } else {
        var data = {
          f8s: new Array(fileObj.fileToken)
        };

        deleteFile(data).then(function (res) {
          if (res.status) {
            _this.fileArr.splice(index, 1);
            _this.$emit('update:fileArr', _this.fileArr);

            delete _this.percentage[key];
            _this.$emit('update:percentage', _this.percentage);
          }
        }).catch(function (err) {
          _this.$message.error('文件删除失败：' + err);
        });
      }
    },

    //删除回显的文件
    deleteEchoFile: function deleteEchoFile(fileObj, index) {
      var _this2 = this;

      var data = {
        f8s: new Array(fileObj.fileToken)
      };

      deleteFile(data).then(function (res) {
        if (res.status) {
          _this2.echoFileArr.splice(index, 1);
          _this2.$emit('update:echoFileArr', _this2.echoFileArr);
        }
      }).catch(function (err) {
        _this2.$message.error('文件删除失败：' + err);
      });
    }
  },
  created: function created() {},
  mounted: function mounted() {}
});
// CONCATENATED MODULE: ./packages/chunk-upload/src/UploadList/index.vue?vue&type=script&lang=js&
 /* harmony default export */ var src_UploadListvue_type_script_lang_js_ = (UploadListvue_type_script_lang_js_); 
// EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js
var componentNormalizer = __webpack_require__(0);

// CONCATENATED MODULE: ./packages/chunk-upload/src/UploadList/index.vue





/* normalize component */

var component = Object(componentNormalizer["a" /* default */])(
  src_UploadListvue_type_script_lang_js_,
  UploadListvue_type_template_id_2bb6bd40_render,
  UploadListvue_type_template_id_2bb6bd40_staticRenderFns,
  false,
  null,
  null,
  null
  
)

/* harmony default export */ var UploadList = (component.exports);
// EXTERNAL MODULE: external "fawkes-lib/lib/mixins/emitter"
var emitter_ = __webpack_require__(6);
var emitter_default = /*#__PURE__*/__webpack_require__.n(emitter_);

// CONCATENATED MODULE: ./packages/chunk-upload/src/api.js
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

/*
 * @Description: 
 * @Author: ye_xf
 * @Date: 2020-09-28 18:10:08
 * @LastEditTime: 2022-10-11 15:48:53
 * @LastEditors: wei_jt@ecidi.com
 * @Reference: 
 */


//获取当前文件的上传情况
function getUploadInfo(data) {
    return (external_vue_default.a.prototype.$axios || request["a" /* default */])({
        url: "/sys-storage/secondPass",
        method: "post",
        params: _extends({}, data)
    });
}

//获取当前上传文件唯一标识
function getUploadId(data) {
    return (external_vue_default.a.prototype.$axios || request["a" /* default */])({
        url: "/sys-storage/uploadId",
        method: "get",
        params: _extends({}, data)
    });
}

//获取当前文件已上传的分片列表
function getFileBlockList(data) {
    return (external_vue_default.a.prototype.$axios || request["a" /* default */])({
        url: "/sys-storage/parts",
        method: "get",
        params: _extends({}, data)
    });
}

//分片上传
// export function uploadFileBlock(data) {
//     return request({
//         url: "/sys-storage/bigFile",
//         method: "post",
//         data
//     });
// }

//取消上传，清空相关信息
function deleteFileInfo(data) {
    return (external_vue_default.a.prototype.$axios || request["a" /* default */])({
        url: '/sys-storage/abort/burst',
        method: 'delete',
        params: _extends({}, data)
    });
}

//分片上传完成，合并文件
function mergeFile(data) {
    return (external_vue_default.a.prototype.$axios || request["a" /* default */])({
        url: "/sys-storage/bigFile/together",
        method: "post",
        data: data,
        transformRequest: [function (data) {
            return JSON.stringify(data);
        }],
        headers: {
            'Content-Type': 'application/json;charset=UTF-8'
        }
    });
}

//查询文件组信息
function getGroupFileInfo(data) {
    return (external_vue_default.a.prototype.$axios || request["a" /* default */])({
        url: "/sys-storage/file",
        method: "post",
        data: data,
        transformRequest: [function (data) {
            return JSON.stringify(data);
        }],
        headers: {
            'Content-Type': 'application/json;charset=UTF-8'
        }
    });
}
// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/chunk-upload/src/index.vue?vue&type=script&lang=js&
var srcvue_type_script_lang_js_extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//









/* harmony default export */ var srcvue_type_script_lang_js_ = ({
  name: 'FksChunkUpload',
  mixins: [emitter_default.a],
  inject: {
    fksForm: {
      default: ''
    },
    fksFormItem: {
      default: ''
    }
  },
  components: {
    UploadList: UploadList
  },
  props: {
    // 文件组标识
    value: {
      type: String,
      default: ''
    },
    // 允许上传的文件类型
    accept: {
      type: Array,
      default: null
    },
    // 文件上传的最大数量
    fileNumLimit: {
      type: Number,
      default: 1
    },
    // 文件大小限制
    fileSingleSizeLimit: {
      type: Number,
      default: null
    },
    // 传递给后端的参数
    info: {
      type: Object,
      default: function _default() {
        return {};
      }
    },
    // 是否允许上传时选择多个文件
    isMultiple: {
      type: Boolean,
      default: false
    },
    // 文件分片大小
    fileBlockSize: {
      type: Number,
      default: 100 * 1024 * 1024 // 100M
    },
    minFileSize: {
      type: Number,
      default: 5 * 1024 * 1024
    },
    onDownload: {
      type: Function
    },
    drag: {
      type: Boolean,
      default: false
    },
    dragArea: {
      type: String,
      default: '#drag-area'
    },
    showDownload: {
      type: Boolean,
      default: true
    },
    disabled: {
      type: Boolean,
      default: false
    },
    readonly: {
      type: Boolean,
      default: false
    }

  },
  data: function data() {
    return {
      // window.navigator.onLine：H5新增对象，true表示在线
      isLine: navigator.onLine, // 当前网络状态
      btnId: '#picker', // 上传按钮id
      uploader: '', // webUploader对象
      accessToken: this.$storage.get('access_token'),
      url:  false ? undefined : '../api/sys-storage/bigFile', // 文件上传地址
      paramArr: {}, // 保存文件参数
      fileBlockListObj: {}, // 保存当前已上传的分片文件信息，文件合并时传递给后端
      blockInfoObj: {}, // 断点续传时暂存已上传的分片信息
      fileArr: [], // 已选文件数组
      echoFileArr: [], // 回显文件数组
      percentage: {}, // 上传进度
      md5Obj: {}, // 文件MD5信息
      groupToken: '',
      isPassSecond: {}, // 当前是否处于极速秒传状态
      e9y: '' // 指定文件上传的服务器
    };
  },

  computed: {
    // 格式化文件类型数组
    getAccept: function getAccept() {
      var arrs = this.accept;
      var exteensions = '';
      var mimeTypes = '';
      arrs.forEach(function (value) {
        exteensions += value + ', ';
        mimeTypes += '.' + value + ', ';
      });
      return {
        // 允许的文件格式
        exteensions: exteensions,
        mimeTypes: mimeTypes
      };
    },

    // 上传进度条的颜色
    proColor: function proColor() {
      return this.isLine ? 'rgb(64, 158, 255)' : 'rgb(144, 147, 153)';
    },
    uploadDisabled: function uploadDisabled() {
      return this.disabled || (this.fksForm || {}).disabled || (this.fksFormItem || {}).disabled || this.readonly || (this.fksForm || {}).readonly || (this.fksFormItem || {}).readonly;
    }
  },
  watch: {
    isLine: function isLine(val) {
      if (val) {
        this.$emit('lineChange', true);
        this.upload(null); // 重新上传

        // this.getFiles()
      } else {
        this.$emit('lineChange', false);
        this.stop(null); // 暂停上传

        // this.getFiles()
      }
    },

    uploadDisabled: {
      handler: function handler(val) {
        var _this2 = this;

        // 初始化webUploader
        if (!val && !this.uploader) {
          this.$nextTick(function () {
            _this2.initWebUpload();
          });
        }
        var input = document.querySelector(this.btnId + ' input');
        input && (input.disabled = val);
      },

      immediate: true
    }
  },
  methods: {
    // 获取当前网络状态
    getLineStatus: function getLineStatus(e) {
      this.isLine = e.type === 'online';
    },

    // 获取文件key
    getFileKey: function getFileKey(fileObj) {
      return fileObj.name + '&' + fileObj.lastModifiedDate;
    },

    // 获取文件的md5Key
    getMd5Key: function getMd5Key(fileObj) {
      var key = fileObj.name + fileObj.size + fileObj.lastModifiedDate; // 文件名+文件大小+最后修改时间戳

      return new Promise(function (res) {
        var md5Key = external_js_md5_default()(key);
        res(md5Key);
      });
    },

    // 修改暂存的信息
    amendInfo: function amendInfo(fileObj, key, isCancel) {
      var _this3 = this;

      this.reset(); // 重置队列

      this.fileArr.some(function (file, index) {
        if (file === fileObj) {
          _this3.fileArr.splice(index, 1);
          return true; // 中断循环
        }
      });

      delete this.percentage[key];
      delete this.md5Obj[key];
      delete this.fileBlockListObj[key];

      this.blockInfoObj = {};
    },

    // 初始化
    initWebUpload: function initWebUpload() {
      var _this4 = this;

      var dndData = this.drag && this.dragArea ? {
        dnd: this.dragArea,
        disableGlobalDnd: true
      } : {};
      this.uploader = external_webuploader_default.a.create(srcvue_type_script_lang_js_extends({
        auto: true, // 选择文件后自动上传
        // swf: './static/Uploader.swf', //swf文件路径
        server: this.url, // 文件上传地址
        pick: {
          id: this.btnId, // 文件上传的按钮
          multiple: this.isMultiple // 是否允许上传时选择多个文件
          // innerHTML: '上传' //指定按钮文字
        },
        accept: this.accept ? this.getAccept : '', // 允许上传的文件格式
        // threads: 1, //分片上传并发数 默认值：3
        fileNumLimit: this.fileNumLimit, // 限制上传文件总数
        fileSingleSizeLimit: this.fileSingleSizeLimit, // 限制单个上传文件的大小
        chunked: true, // 分片上传
        chunkSize: this.fileBlockSize, // 分片大小 插件默认值：5M
        // chunkRetry: false, //当前分片的最大重传次数 默认值：2
        // prepareNextFile: true, //上传当前文件时预处理下一文件 默认值：false
        duplicate: true, // 重复上传
        formData: { e9y: this.e9y } }, dndData));
      // 当文件被加入到队列前触发
      this.uploader.on('beforeFileQueued', function (fileObj) {
        var key = _this4.getFileKey(fileObj);
        if (_this4.uploadDisabled) {
          return false;
        }
        if (_this4.percentage[key]) {
          _this4.$message.error('相同文件请勿重复上传');
          _this4.$emit('uploadError', 1, fileObj, '相同文件请勿重复上传');
          return false;
        } else if (_this4.fileArr.length + _this4.echoFileArr.length >= _this4.fileNumLimit) {
          _this4.$message.error('上传文件的数量超出限制');
          _this4.$emit('uploadError', 1, fileObj, '上传文件的数量超出限制');
          return false;
        } else if (fileObj.size === 0) {
          _this4.$message.error('请勿上传空文件');
          _this4.$emit('uploadError', 1, fileObj, '请勿上传空文件');
          return false;
        } else if (fileObj.size < _this4.minFileSize) {
          var num = (Math.trunc(_this4.minFileSize / 1024 / 1024 * 100) / 100).toFixed(2);
          _this4.$message.error('\u4E0A\u4F20\u6587\u4EF6\u5927\u5C0F\u9700\u5927\u4E8E' + num + 'MB');
          _this4.$emit('uploadError', 1, fileObj, '\u4E0A\u4F20\u6587\u4EF6\u5927\u5C0F\u9700\u5927\u4E8E' + num + 'MB');
          return false;
        }

        _this4.fileArr.push(fileObj);
        _this4.$set(_this4.percentage, key, 1);
      });

      // 当文件被加入到队列后触发
      this.uploader.on('fileQueued', function (file) {});

      // 文件开始上传前触发，一个文件只会触发一次
      this.uploader.on('uploadStart', function (file) {
        _this4.$emit('uploadStart', file);
      });

      // 当前文件的分片在发送前触发
      this.uploader.on('uploadBeforeSend', function (fileObj, data, headers) {
        headers['Fawkes-Auth'] = _this4.accessToken;
      });

      // 上传过程中触发，更新上传进度
      this.uploader.on('uploadProgress', function (fileObj, progress) {
        var key = _this4.getFileKey(fileObj);
        _this4.$emit('uploadProgress', fileObj, progress);
        var num = Math.round(progress * 100);
        if (_this4.percentage[key] && _this4.percentage[key] > num) {
          return;
        }
        if (num == 100) {
          _this4.$set(_this4.percentage, key, 99);
        } else _this4.$set(_this4.percentage, key, num);
      });

      // 当分片文件上传到服务端响应后触发
      this.uploader.on('uploadAccept', function (fileBlockObj, res) {
        if (!res.status) {
          var _fileObj = fileBlockObj.file; // 获取当前分片的主文件
          var key = _this4.getFileKey(_fileObj);

          _this4.amendInfo(_fileObj, key); // 修改暂存的信息

          _this4.$emit('uploadError', 2, _fileObj, res);
        }
      });

      // 完整文件上传成功时触发：通知后台进行文件合并
      this.uploader.on('uploadSuccess', function (fileObj, response) {
        var key = _this4.getFileKey(fileObj);
        // 容错：处理上传进度误差
        if (_this4.percentage[key] < 100) {
          _this4.percentage[key] = 100;
        }
        // 极速秒传时不需要通知合并
        if (_this4.isPassSecond[key]) {
          _this4.$emit('uploadSuccess', fileObj, '极速秒传成功');
          // this.reset(); // 重置队列
          return;
        }

        var data = {
          e9y: _this4.e9y,
          md5: _this4.md5Obj[key],
          list: _this4.fileBlockListObj[key],
          uploadId: _this4.paramArr[key].uploadId,
          objectName: _this4.paramArr[key].objectName,
          fileName: fileObj.name,
          fileSize: fileObj.size,
          groupToken: _this4.groupToken,
          info: _this4.info
        };
        mergeFile(data).then(function (res) {
          if (res.status) {
            _this4.fileArr.some(function (file, index) {
              if (file === fileObj) {
                _this4.$set(_this4.fileArr[index], 'fileToken', res.data.fileToken);
                return true; // 中断循环
              }
            });

            delete _this4.fileBlockListObj[key];

            _this4.blockInfoObj = {};

            // this.reset(); // 重置队列

            _this4.$emit('uploadSuccess', fileObj, res);
          } else {
            _this4.amendInfo(fileObj, key);
            _this4.$emit('uploadError', 3, fileObj, res);
          }
        }).catch(function (error) {
          _this4.$emit('uploadError', 3, fileObj, error);
        });
      });
      this.uploader.on('uploadFinished', function () {
        _this4.$emit('uploadFinished');
        _this4.reset();
      });
      // 文件上传出错时触发
      this.uploader.on('uploadError', function (fileObj, reason) {
        // 放过断网引起的error
        if (reason && reason.statusText === 'abort') {
          return;
        }

        var key = _this4.getFileKey(fileObj);

        _this4.amendInfo(fileObj, key); // 修改暂存的信息

        _this4.$emit('uploadError', 2, fileObj, reason);
      });

      // 内置错误类型
      this.uploader.on('error', function (type) {
        var errorMessage = void 0;

        if (type === 'F_EXCEED_SIZE') {
          errorMessage = '上传文件的大小不能超过' + _this4.fileSingleSizeLimit / (1024 * 1000) + 'M';
        } else if (type === 'Q_EXCEED_NUM_LIMIT') {
          errorMessage = '文件并发上传数量超出限制';
        } else if (type === 'Q_TYPE_DENIED') {
          errorMessage = '上传文件的类型超出限制';
        } else {
          errorMessage = '文件上传出错，请检查后重新上传';
        }

        var fileObj = _this4.fileArr.pop(); // 删除已选文件数组中新增的文件

        var key = _this4.getFileKey(fileObj);
        delete _this4.percentage[key];

        _this4.$emit('uploadError', 1, null, errorMessage);
      });

      // 完整文件上传完成时触发：无论上传成功或上传失败
      this.uploader.on('uploadComplete', function (file, response) {
        // 检查当前文件的所有分片是否上传完成
        if (!_this4.uploader.isInProgress(file)) {
          // 当前文件的所有分片已上传完成
          // 开始上传下一个文件
          _this4.uploader.uploadNext();
        }
      });
    },

    // 开始文件上传：从初始状态调用开始上传流程或从暂停状态调用，继续上传流程
    upload: function upload(fileObj) {
      if (!fileObj) {
        this.uploader.upload();
      } else {
        this.uploader.upload(fileObj.id);
      }
    },

    // 暂停文件上传：第一个参数为是否中断当前正在上传的文件，若第一个参数是文件，则只暂停指定文件
    stop: function stop(fileObj) {
      this.uploader.stop(true); // 暂停队列中所有的文件
      // this.uploader.stop(fileObj, true) //暂停指定文件：个人认为源码存在bug，无法正常使用，只能对单个分片的文件生效
    },

    // 重试上传
    retry: function retry(fileObj) {
      this.uploader.retry();
      // this.uploader.retry(fileObj)
    },

    // 重置队列
    reset: function reset() {
      this.uploader.reset();
    },

    // 取消（从上传列表中删除）并中断文件上传 - 主动取消
    cancelFile: function cancelFile(fileObj) {
      var key = this.getFileKey(fileObj);

      this.uploader.cancelFile(fileObj);

      this.amendInfo(fileObj, key);
      if (!this.isPassSecond[key] && this.paramArr[key]) {

        var data = {
          objectName: this.paramArr[key].objectName,
          uploadId: this.paramArr[key].uploadId,
          endPointKey: this.e9y
        };
        // 通知后台清空对应文件信息
        deleteFileInfo(data);
      }
      this.$emit('uploadCancel', fileObj);
    },

    // 在队列中移除文件，默认标记文件状态为已取消，若第二个参数为true,则会从队列中移除
    removeFile: function removeFile(fileObj, bool) {
      if (bool) {
        this.uploader.removeFile(fileObj.id, bool);
      } else {
        this.uploader.removeFile(fileObj.id);
      }
    }
  },
  created: function created() {
    var _this5 = this;

    if (!this.value) {
      this.groupToken = Object(util_["uuid"])(16, 32);
      this.$emit('input', this.groupToken);
      return;
    }

    this.groupToken = this.value;

    var data = {
      g9s: new Array(this.groupToken)
    };

    // 获取已上传的文件组信息
    getGroupFileInfo(data).then(function (res) {
      if (res.status && res.data) {
        res.data.forEach(function (file) {
          _this5.echoFileArr.push(file);
        });
      }
    });
  },
  mounted: function mounted() {
    var _this6 = this;

    var _this = this;

    window.addEventListener('online', this.getLineStatus); // 网络由异常状态到正常状态
    window.addEventListener('offline', this.getLineStatus); // 网络有正常状态到异常状态

    external_webuploader_default.a.Uploader.register({
      name: 'bsf',
      // 文件开始上传前触发
      'before-send-file': function beforeSendFile(fileObj) {
        var deferred = external_webuploader_default.a.Deferred();

        var key = _this.getFileKey(fileObj);

        _this.getMd5Key(fileObj).then(function (md5) {
          _this.$set(_this.md5Obj, key, md5); // 保存文件的md5Key

          var data = {
            fileName: fileObj.name,
            fileSize: fileObj.size,
            md5: md5,
            g9s: _this.groupToken
          };

          getUploadInfo(data).then(function (res) {
            if (!res.status) {
              // 异常状态：文件类型不符合后端限制等情况
              _this6.$message.error(res.message);
              _this.$emit('uploadError', 4, fileObj, res);
              _this.amendInfo(fileObj, key);
              deferred.reject(); // 注意：会触发webUpload的uploadError
            } else if (res.data.resultType === 0) {
              // 极速秒传
              _this.isPassSecond[key] = true;
              _this.$set(_this.percentage, key, 99);

              _this.fileArr.some(function (file, index) {
                if (file === fileObj) {
                  _this.$set(_this.fileArr[index], 'fileToken', res.data.sysOssVO.fileToken);
                  return true; // 中断循环
                }
              });
              _this.uploader.skipFile(fileObj); // 跳过当前文件
              _this.uploader.trigger('uploadProgress', fileObj, 1);
              // _this.uploader.trigger('uploadSuccess', fileObj);
              // _this.uploader.trigger('uploadComplete', fileObj);
              deferred.resolve();
            } else if (res.data.resultType === 2) {
              // 断点续传
              var _data = {
                objectName: res.data.bigFileVO.objectName,
                uploadId: res.data.bigFileVO.uploadId,
                endPointKey: _this.e9y
              };

              _this.$set(_this.paramArr, key, {
                objectName: res.data.bigFileVO.objectName,
                uploadId: res.data.bigFileVO.uploadId
              });

              // 完整文件 <= 分片大小时，需要手动添加chunk参数
              if (fileObj.size <= _this.fileBlockSize) {
                _this.uploader.options.formData.chunk = 0;
              }

              // 获取当前文件已上传的分片列表
              getFileBlockList(_data).then(function (res) {
                if (res.status) {
                  // 暂存已上传分片信息
                  res.data.forEach(function (item) {
                    _this.$set(_this.blockInfoObj, item.etag, item.size + '-' + item.partNumber);
                  });

                  deferred.resolve();
                } else {
                  _this.$emit('uploadError', 4, fileObj, res);
                  _this.amendInfo(fileObj, key);
                  deferred.reject();
                }
              });
            } else {
              // 普通上传
              var _data2 = {
                fileName: fileObj.name,
                md5: md5,
                e9y: _this.e9y
              };

              // 获取当前上传文件唯一标识
              getUploadId(_data2).then(function (res) {
                if (res.status) {
                  _this.$set(_this.paramArr, key, {
                    objectName: res.data.objectName,
                    uploadId: res.data.uploadId
                  });

                  // 完整文件 <= 分片大小时，需要手动添加chunk参数
                  if (fileObj.size <= _this.fileBlockSize) {
                    _this.uploader.options.formData.chunk = 0;
                  }

                  deferred.resolve();
                } else {
                  _this.$emit('uploadError', 4, fileObj, res);
                  _this.amendInfo(fileObj, key);
                  deferred.reject();
                }
              }).catch(function (error) {
                _this.$emit('uploadError', 4, fileObj, error);
                _this.amendInfo(fileObj, key);
              });
            }
          }).catch(function (error) {
            _this.$emit('uploadError', 4, fileObj, error);
            _this.amendInfo(fileObj, key);
            deferred.reject();
          });
        }).catch(function (error) {
          _this.$emit('uploadError', 2, fileObj, '文件的md5Key计算出错');
          _this.amendInfo(fileObj, key);
        });

        return deferred.promise(); // 继续执行分片上传
      }
    });

    external_webuploader_default.a.Uploader.register({
      name: 'bs',
      // 分片文件在发送前触发：检查当前分片是否已经上传 断点续传
      'before-send': function beforeSend(fileBlock) {
        var deferred = external_webuploader_default.a.Deferred();
        var key = _this6.getFileKey(fileBlock.file);
        _this.uploader.options.formData.uploadId = _this.paramArr[key].uploadId; // 文件唯一标识
        _this.uploader.options.formData.objectName = _this.paramArr[key].objectName;

        _this.uploader.md5File(fileBlock.blob).then(function (md5) {
          if (!_this.fileBlockListObj[key]) {
            _this.$set(_this.fileBlockListObj, key, new Array({
              etag: md5,
              number: fileBlock.chunk + 1
            }));
          } else {
            _this.fileBlockListObj[key].push({
              etag: md5,
              number: fileBlock.chunk + 1
            });
          }

          if (_this.blockInfoObj[md5]) {
            deferred.reject(); // 跳过当前分片 注意：不会触发webUpload的uploadError
          } else {
            _this.uploader.options.formData.uploadId = _this.paramArr[key].uploadId; // 文件唯一标识
            _this.uploader.options.formData.objectName = _this.paramArr[key].objectName;
            deferred.resolve();
          }
        }).catch(function (error) {
          _this.$emit('uploadError', 2, fileObj, '分片的md5计算出错');
          _this.amendInfo(fileObj, key);
        });

        return deferred.promise(); // 继续执行分片上传
      }
    });
  },
  beforeDestroy: function beforeDestroy() {
    window.removeEventListener('online', this.getLineStatus);
    window.removeEventListener('offline', this.getLineStatus);

    external_webuploader_default.a.Uploader.unRegister('bsf');
    external_webuploader_default.a.Uploader.unRegister('bs');
  }
});
// CONCATENATED MODULE: ./packages/chunk-upload/src/index.vue?vue&type=script&lang=js&
 /* harmony default export */ var chunk_upload_srcvue_type_script_lang_js_ = (srcvue_type_script_lang_js_); 
// CONCATENATED MODULE: ./packages/chunk-upload/src/index.vue





/* normalize component */

var src_component = Object(componentNormalizer["a" /* default */])(
  chunk_upload_srcvue_type_script_lang_js_,
  render,
  staticRenderFns,
  false,
  null,
  null,
  null
  
)

/* harmony default export */ var src = (src_component.exports);
// CONCATENATED MODULE: ./packages/chunk-upload/index.js
/*
 * @Author: gao_m3
 * @Date: 2021-08-30 15:32:48
 * @LastEditors: Please set LastEditors
 * @LastEditTime: 2021-08-30 15:34:44
 * @Descripttion:
 */


/* istanbul ignore next */
src.install = function (Vue) {
  Vue.component(src.name, src);
};

/* harmony default export */ var chunk_upload = __webpack_exports__["default"] = (src);

/***/ }),

/***/ 13:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: external "axios"
var external_axios_ = __webpack_require__(16);
var external_axios_default = /*#__PURE__*/__webpack_require__.n(external_axios_);

// EXTERNAL MODULE: external "qs"
var external_qs_ = __webpack_require__(25);
var external_qs_default = /*#__PURE__*/__webpack_require__.n(external_qs_);

// EXTERNAL MODULE: external "crypto-js/hmac-sha1"
var hmac_sha1_ = __webpack_require__(18);
var hmac_sha1_default = /*#__PURE__*/__webpack_require__.n(hmac_sha1_);

// EXTERNAL MODULE: external "crypto-js/enc-base64"
var enc_base64_ = __webpack_require__(19);
var enc_base64_default = /*#__PURE__*/__webpack_require__.n(enc_base64_);

// EXTERNAL MODULE: external "vue"
var external_vue_ = __webpack_require__(5);
var external_vue_default = /*#__PURE__*/__webpack_require__.n(external_vue_);

// EXTERNAL MODULE: external "fawkes-lib/lib/utils/types"
var types_ = __webpack_require__(8);

// CONCATENATED MODULE: ./src/utils/util.js
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };




var util_hasOwnProperty = Object.prototype.hasOwnProperty;

function noop() {}

function hasOwn(obj, key) {
  return util_hasOwnProperty.call(obj, key);
}

function extend(to, _from) {
  for (var key in _from) {
    to[key] = _from[key];
  }
  return to;
}
/**
 * @description 生成UUID
 * @param {Integer} len uuid长度
 * @param {Integer} radix uuid基数
 * @returns {String} UUID
 */
function uuid(len, radix) {
  var chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split('');
  var uuid = [],
      i = void 0;
  radix = radix || chars.length;

  if (len) {
    // Compact form
    for (i = 0; i < len; i++) {
      uuid[i] = chars[0 | Math.random() * radix];
    }
  } else {
    // rfc4122, version 4 form
    var r = void 0;
    // rfc4122 requires these characters
    uuid[8] = uuid[13] = uuid[18] = uuid[23] = '-';
    uuid[14] = '4';
    // Fill in random data.  At i==19 set the high bits of clock sequence as
    // per rfc4122, sec. 4.1.5
    for (i = 0; i < 36; i++) {
      if (!uuid[i]) {
        r = 0 | Math.random() * 16;
        uuid[i] = chars[i == 19 ? r & 0x3 | 0x8 : r];
      }
    }
  }
  return uuid.join('');
}

function toObject(arr) {
  var res = {};
  for (var i = 0; i < arr.length; i++) {
    if (arr[i]) {
      extend(res, arr[i]);
    }
  }
  return res;
}

var getValueByPath = function getValueByPath(object, prop) {
  prop = prop || '';
  var paths = prop.split('.');
  var current = object;
  var result = null;
  for (var i = 0, j = paths.length; i < j; i++) {
    var path = paths[i];
    if (!current) break;

    if (i === j - 1) {
      result = current[path];
      break;
    }
    current = current[path];
  }
  return result;
};

function getPropByPath(obj, path, strict) {
  var tempObj = obj;
  path = path.replace(/\[(\w+)\]/g, '.$1');
  path = path.replace(/^\./, '');

  var keyArr = path.split('.');
  var i = 0;
  for (var len = keyArr.length; i < len - 1; ++i) {
    if (!tempObj && !strict) break;
    var key = keyArr[i];
    if (key in tempObj) {
      tempObj = tempObj[key];
    } else {
      if (strict) {
        throw new Error('please transfer a valid prop path to form item!');
      }
      break;
    }
  }
  return {
    o: tempObj,
    k: keyArr[i],
    v: tempObj ? tempObj[keyArr[i]] : null
  };
}

var generateId = function generateId() {
  return Math.floor(Math.random() * 10000);
};

var valueEquals = function valueEquals(a, b) {
  // see: https://stackoverflow.com/questions/3115982/how-to-check-if-two-arrays-are-equal-with-javascript
  if (a === b) return true;
  if (!(a instanceof Array)) return false;
  if (!(b instanceof Array)) return false;
  if (a.length !== b.length) return false;
  for (var i = 0; i !== a.length; ++i) {
    if (a[i] !== b[i]) return false;
  }
  return true;
};

var escapeRegexpString = function escapeRegexpString() {
  var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  return String(value).replace(/[|\\{}()[\]^$+*?.]/g, '\\$&');
};

// TODO: use native Array.find, Array.findIndex when IE support is dropped
var arrayFindIndex = function arrayFindIndex(arr, pred) {
  for (var i = 0; i !== arr.length; ++i) {
    if (pred(arr[i])) {
      return i;
    }
  }
  return -1;
};

var arrayFind = function arrayFind(arr, pred) {
  var idx = arrayFindIndex(arr, pred);
  return idx !== -1 ? arr[idx] : undefined;
};
var treeFind = function treeFind(arr, pred) {
  for (var i = 0; i !== arr.length; ++i) {
    if (pred(arr[i])) {
      return arr[i];
    } else if (Array.isArray(arr[i].children) && arr[i].children.length > 0) {
      var res = treeFind(arr[i].children, pred);
      if (res) return res;
    }
  }
  return undefined;
};
// coerce truthy value to array
var coerceTruthyValueToArray = function coerceTruthyValueToArray(val) {
  if (Array.isArray(val)) {
    return val;
  } else if (val) {
    return [val];
  } else {
    return [];
  }
};

var util_isIE = function isIE() {
  return !external_vue_default.a.prototype.$isServer && !isNaN(Number(document.documentMode));
};

var util_isEdge = function isEdge() {
  return !external_vue_default.a.prototype.$isServer && navigator.userAgent.indexOf('Edge') > -1;
};

var util_isFirefox = function isFirefox() {
  return !external_vue_default.a.prototype.$isServer && !!window.navigator.userAgent.match(/firefox/i);
};

var autoprefixer = function autoprefixer(style) {
  if ((typeof style === 'undefined' ? 'undefined' : _typeof(style)) !== 'object') return style;
  var rules = ['transform', 'transition', 'animation'];
  var prefixes = ['ms-', 'webkit-'];
  rules.forEach(function (rule) {
    var value = style[rule];
    if (rule && value) {
      prefixes.forEach(function (prefix) {
        style[prefix + rule] = value;
      });
    }
  });
  return style;
};

var kebabCase = function kebabCase(str) {
  var hyphenateRE = /([^-])([A-Z])/g;
  return str.replace(hyphenateRE, '$1-$2').replace(hyphenateRE, '$1-$2').toLowerCase();
};

var util_capitalize = function capitalize(str) {
  if (!Object(types_["isString"])(str)) return str;
  return str.charAt(0).toUpperCase() + str.slice(1);
};

var util_looseEqual = function looseEqual(a, b) {
  var isObjectA = Object(types_["isObject"])(a);
  var isObjectB = Object(types_["isObject"])(b);
  if (isObjectA && isObjectB) {
    return JSON.stringify(a) === JSON.stringify(b);
  } else if (!isObjectA && !isObjectB) {
    return String(a) === String(b);
  } else {
    return false;
  }
};

var arrayEquals = function arrayEquals(arrayA, arrayB) {
  arrayA = arrayA || [];
  arrayB = arrayB || [];

  if (arrayA.length !== arrayB.length) {
    return false;
  }

  for (var i = 0; i < arrayA.length; i++) {
    if (!util_looseEqual(arrayA[i], arrayB[i])) {
      return false;
    }
  }

  return true;
};

var isEqual = function isEqual(value1, value2) {
  if (Array.isArray(value1) && Array.isArray(value2)) {
    return arrayEquals(value1, value2);
  }
  return util_looseEqual(value1, value2);
};

var isEmpty = function isEmpty(val) {
  // null or undefined
  if (val == null) return true;

  if (typeof val === 'boolean') return false;

  if (typeof val === 'number') return !val;

  if (val instanceof Error) return val.message === '';

  switch (Object.prototype.toString.call(val)) {
    // String or Array
    case '[object String]':
    case '[object Array]':
      return !val.length;

    // Map or Set or File
    case '[object File]':
    case '[object Map]':
    case '[object Set]':
      {
        return !val.size;
      }
    // Plain Object
    case '[object Object]':
      {
        return !Object.keys(val).length;
      }
  }

  return false;
};

function rafThrottle(fn) {
  var locked = false;
  return function () {
    var _this = this;

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    if (locked) return;
    locked = true;
    window.requestAnimationFrame(function (_) {
      fn.apply(_this, args);
      locked = false;
    });
  };
}

function objToArray(obj) {
  if (Array.isArray(obj)) {
    return obj;
  }
  return isEmpty(obj) ? [] : [obj];
}
// CONCATENATED MODULE: ./src/utils/sign.js
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

/*
 * @Author: gao_m3
 * @Date: 2021-03-29 17:51:08
 * @LastEditors: wei_jt@ecidi.com
 * @LastEditTime: 2022-03-31 09:36:48
 * @Descripttion: 
 */




var CLIENT = 'fawkes'; //'dca84d27aeaa6783b6405fd222a2897a'//应用id
var CLIENT_SECRET = 'fawkes_secret'; //'73af5c8eb55cd81e696f97ec8151cf5eafa62ce2659c0139ebda3dec41e18594'
var dayjs = __webpack_require__(27);
//获取加密后的url参数字符串
var sign_getUrl = function getUrl(rest) {
  var Params = "";
  var ts = dayjs().unix();
  var ttl = 30;
  var obj = rest;
  Params += "ts=" + ts + "&ttl=" + ttl + "&uid=" + CLIENT + (isEmpty(obj) ? '' : "&" + objTransUrlParams(obj));
  var ParamArr = sortUrlParams(Params);
  ParamArr = objKeySort(ParamArr);
  var paramstr = [];
  for (var i in ParamArr) {
    paramstr.push(i + "=" + ParamArr[i]);
  }
  paramstr = paramstr.join("&");
  var signWordArray = hmac_sha1_default()(paramstr, CLIENT_SECRET);
  var sign = enc_base64_default.a.stringify(signWordArray);
  var encodeSign = encodeURIComponent(sign);
  return paramstr + "&sign=" + encodeSign;
};

//获取加密后的参数对象
var sign_getSign = function getSign(rest) {
  var Params = "";
  var ts = dayjs().unix();
  var ttl = 180;
  var obj = rest;
  Params += "ts=" + ts + "&ttl=" + ttl + "&uid=" + CLIENT + (isEmpty(obj) ? '' : "&" + objTransUrlParams(obj));
  var ParamArr = sortUrlParams(Params);
  ParamArr = objKeySort(ParamArr);
  var paramstr = [];
  for (var i in ParamArr) {
    paramstr.push(i + "=" + ParamArr[i]);
  }
  paramstr = paramstr.join("&");
  var signWordArray = hmac_sha1_default()(paramstr, CLIENT_SECRET);
  var sign = enc_base64_default.a.stringify(signWordArray);
  return _extends({ sign: sign, ts: ts, ttl: ttl, uid: CLIENT }, ParamArr);
};

var objKeySort = function objKeySort(obj) {
  var newkey = Object.keys(obj).sort();
  var newObj = {};
  for (var i = 0; i < newkey.length; i++) {
    newObj[newkey[i]] = obj[newkey[i]];
  }
  return newObj;
};

var sortUrlParams = function sortUrlParams(str) {
  if (typeof str !== 'string') {
    return {};
  }
  var paramObj = {};
  var paramArr = decodeURI(str).split('&');
  // let paramArr = str.split('&');
  for (var i = 0; i < paramArr.length; i++) {
    var tmp = paramArr[i].split('=');
    var key = tmp[0];
    var value = tmp[1] || "";
    //if (typeof value === 'string' && isNaN(Number(value)) === false && value !== "") {
    //  value = Number(value);
    //}
    if (typeof paramObj[key] === 'undefined') {
      paramObj[key] = value;
    } else {
      var newValue = Array.isArray(paramObj[key]) ? paramObj[key] : [paramObj[key]];
      newValue.push(value);
      paramObj[key] = newValue;
    }
  }
  return paramObj;
};

var objTransUrlParams = function objTransUrlParams(obj) {
  var params = [];
  Object.keys(obj).forEach(function (key) {
    var value = obj[key];
    if (typeof value === 'undefined') {
      value = '';
    }
    params.push([key, value].join('='));
  });
  return params.join('&');
};


// CONCATENATED MODULE: ./src/utils/request.js
/*
 * @Author: wei_jt@ecidi.com
 * @Date: 2019-07-05 16:35:39
 * @LastEditors: Please set LastEditors
 * @LastEditTime: 2021-03-10 15:06:30
 * @Description: 请求配置
 */

 //qs一般装了axios就自带不用再装，如果没有，自己安装下
 //签名校验

//开发环境添加代理前缀
var prefix = '../api';
if (false) {}

var request = external_axios_default.a.create({
  baseURL: prefix, //这里配置你自己的url
  transformRequest: [function (data) {
    data = external_qs_default.a.stringify(data); //序列化参数
    return data;
  }],
  withCredentials: true // 允许携带cookie
});
var pending = []; //声明一个数组用于存储每个ajax请求的取消函数和ajax标识

var cancelToken = external_axios_default.a.CancelToken;

var removePending = function removePending(config) {
  for (var p in pending) {
    if (config.remove) {
      //当当前请求在数组中存在时执行函数体
      pending[p].f(); //执行取消操作
      pending.splice(p, 1); //把这条记录从数组中移除
    }
  }
};
//添加请求拦截器
request.interceptors.request.use(function (config) {
  removePending(config); //在一个ajax发送前执行一下取消操作
  config.cancelToken = new cancelToken(function (c) {
    //这里的ajax标识我是用请求地址&请求方式拼接的字符串，当然你可以选择其他的一些方式
    if (config.remove) {
      pending.push({
        u: config.url + '&' + config.method,
        f: c
      });
    }
  });
  config.params = sign_getSign(config.params);
  // config.headers['Fawkes-Auth'] = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJjbGllbnRJZCI6ImZhd2tlcyIsInVzZXJfbmFtZSI6IndlaV9qdCIsInNleCI6IueUtyIsInVzZXJObyI6IjIwMTgyNzMiLCJ1c2VyTmFtZSI6IndlaV9qdCIsImNsaWVudF9pZCI6ImZhd2tlcyIsImxpY2Vuc2UiOiJwb3dlcmVkIGJ5IGZhd2tlcyIsImF1ZCI6WyJvYXV0aDItcmVzb3VyY2UiLCJvYXV0aDItc2VydmVyIl0sInBob25lIjoiMTM3MzU4OTk3NDEiLCJzY29wZSI6WyJhbGwiXSwidGVuYW50SWQiOjEwMDAwMCwidXNlckZ1bGxuYW1lIjoi6Z-m6ZSm5rabIiwiaWQiOiIxMTkwMTUzNDcyMTkyODkyOTg1IiwiZXhwIjoxNTk5NzE3NjA0LCJqdGkiOiI0ODM5OGRiYy03OWM2LTQ5NDUtYTI4MC1mZDdkOWMzYTY5YzciLCJlbWFpbCI6IndlaV9qdEBlY2lkaS5jb20ifQ.LqK4UszX71C89SpMSo6MTKtfWB2v5ow0-jjrUZb3iiA'

  return config;
}, function (error) {
  return Promise.reject(error);
});
//添加响应拦截器
request.interceptors.response.use(function (res) {
  removePending(res.config); //在一个ajax响应后再执行一下取消操作，把已经完成的请求从pending中移除
  return res.data;
}, function (error) {
  return {
    // data: {
    //   errmsg: error.message
    // }
  };
});
/* harmony default export */ var utils_request = __webpack_exports__["a"] = (request);

/***/ }),

/***/ 16:
/***/ (function(module, exports) {

module.exports = require("axios");

/***/ }),

/***/ 18:
/***/ (function(module, exports) {

module.exports = require("crypto-js/hmac-sha1");

/***/ }),

/***/ 19:
/***/ (function(module, exports) {

module.exports = require("crypto-js/enc-base64");

/***/ }),

/***/ 25:
/***/ (function(module, exports) {

module.exports = require("qs");

/***/ }),

/***/ 27:
/***/ (function(module, exports) {

module.exports = require("dayjs");

/***/ }),

/***/ 3:
/***/ (function(module, exports) {

module.exports = require("fawkes-lib/lib/utils/util");

/***/ }),

/***/ 42:
/***/ (function(module, exports) {

module.exports = require("webuploader");

/***/ }),

/***/ 5:
/***/ (function(module, exports) {

module.exports = require("vue");

/***/ }),

/***/ 6:
/***/ (function(module, exports) {

module.exports = require("fawkes-lib/lib/mixins/emitter");

/***/ }),

/***/ 64:
/***/ (function(module, exports) {

module.exports = require("js-md5");

/***/ }),

/***/ 8:
/***/ (function(module, exports) {

module.exports = require("fawkes-lib/lib/utils/types");

/***/ })

/******/ });