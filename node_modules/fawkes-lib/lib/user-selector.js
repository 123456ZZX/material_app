module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/dist/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 112);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return normalizeComponent; });
/* globals __VUE_SSR_CONTEXT__ */

// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).
// This module is a runtime utility for cleaner component module output and will
// be included in the final webpack user bundle.

function normalizeComponent(
  scriptExports,
  render,
  staticRenderFns,
  functionalTemplate,
  injectStyles,
  scopeId,
  moduleIdentifier /* server only */,
  shadowMode /* vue-cli only */
) {
  // Vue.extend constructor export interop
  var options =
    typeof scriptExports === 'function' ? scriptExports.options : scriptExports

  // render functions
  if (render) {
    options.render = render
    options.staticRenderFns = staticRenderFns
    options._compiled = true
  }

  // functional template
  if (functionalTemplate) {
    options.functional = true
  }

  // scopedId
  if (scopeId) {
    options._scopeId = 'data-v-' + scopeId
  }

  var hook
  if (moduleIdentifier) {
    // server build
    hook = function (context) {
      // 2.3 injection
      context =
        context || // cached call
        (this.$vnode && this.$vnode.ssrContext) || // stateful
        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional
      // 2.2 with runInNewContext: true
      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
        context = __VUE_SSR_CONTEXT__
      }
      // inject component styles
      if (injectStyles) {
        injectStyles.call(this, context)
      }
      // register component module identifier for async chunk inferrence
      if (context && context._registeredComponents) {
        context._registeredComponents.add(moduleIdentifier)
      }
    }
    // used by ssr in case component is cached and beforeCreate
    // never gets called
    options._ssrRegister = hook
  } else if (injectStyles) {
    hook = shadowMode
      ? function () {
          injectStyles.call(
            this,
            (options.functional ? this.parent : this).$root.$options.shadowRoot
          )
        }
      : injectStyles
  }

  if (hook) {
    if (options.functional) {
      // for template-only hot-reload because in that case the render fn doesn't
      // go through the normalizer
      options._injectStyles = hook
      // register for functional component in vue file
      var originalRender = options.render
      options.render = function renderWithStyleInjection(h, context) {
        hook.call(context)
        return originalRender(h, context)
      }
    } else {
      // inject component registration as beforeCreate hook
      var existing = options.beforeCreate
      options.beforeCreate = existing ? [].concat(existing, hook) : [hook]
    }
  }

  return {
    exports: scriptExports,
    options: options
  }
}


/***/ }),

/***/ 112:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/user-selector/src/user-selector.vue?vue&type=template&id=904bc870&
var render = function () {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "div",
    { staticClass: "fks-user-selector-page", style: { width: _vm.width } },
    [
      _c("span", { on: { click: _vm.open } }, [_vm._t("reference")], 2),
      !_vm.reference
        ? _c(
            "div",
            { staticClass: "fks-user-selector-input", on: { click: _vm.open } },
            [
              _c(
                "div",
                {
                  ref: "tags",
                  staticClass: "fks-user-selector-input__tags",
                  class: {
                    suffix: _vm.fksForm.statusIcon,
                    "is-disabled": _vm.uploadReadOnly || _vm.forbidden,
                  },
                },
                [
                  _vm.collapseTags
                    ? _c(
                        "span",
                        { staticStyle: { width: "100%" } },
                        [
                          _vm.sureList.length > 0
                            ? _c(
                                "fks-tag",
                                {
                                  class: {
                                    closable:
                                      !_vm.uploadReadOnly && !_vm.forbidden,
                                  },
                                  attrs: {
                                    closable:
                                      !_vm.uploadReadOnly && !_vm.forbidden,
                                    size: _vm.size,
                                    type: "info",
                                    "disable-transitions": "",
                                  },
                                  on: {
                                    close: function ($event) {
                                      return _vm.deleteOne(_vm.sureList[0])
                                    },
                                  },
                                },
                                [
                                  _c(
                                    "span",
                                    { staticClass: "fks-select__tags-text" },
                                    [
                                      _vm._v(
                                        _vm._s(_vm.sureList[0].userFullname)
                                      ),
                                    ]
                                  ),
                                ]
                              )
                            : _vm._e(),
                          _vm.sureList.length > 1
                            ? _c(
                                "fks-tag",
                                {
                                  attrs: {
                                    closable: false,
                                    size: _vm.size,
                                    type: "info",
                                    "disable-transitions": "",
                                  },
                                },
                                [
                                  _c(
                                    "span",
                                    { staticClass: "fks-select__tags-text" },
                                    [
                                      _vm._v(
                                        "+ " + _vm._s(_vm.sureList.length - 1)
                                      ),
                                    ]
                                  ),
                                ]
                              )
                            : _vm._e(),
                        ],
                        1
                      )
                    : _vm._e(),
                  !_vm.collapseTags
                    ? _c(
                        "span",
                        { staticStyle: { display: "contents", width: "100%" } },
                        _vm._l(_vm.sureList, function (tag, index) {
                          return _c(
                            "fks-tag",
                            {
                              key: index,
                              class: {
                                closable: !_vm.uploadReadOnly && !_vm.forbidden,
                              },
                              attrs: {
                                closable: !_vm.uploadReadOnly && !_vm.forbidden,
                                size: _vm.size,
                                "disable-transitions": "",
                                type: "info",
                              },
                              on: {
                                close: function ($event) {
                                  return _vm.deleteOne(tag)
                                },
                              },
                            },
                            [
                              _c(
                                "span",
                                { staticClass: "fks-select__tags-text" },
                                [_vm._v(_vm._s(tag.userFullname))]
                              ),
                            ]
                          )
                        }),
                        1
                      )
                    : _vm._e(),
                ]
              ),
              _c(
                "div",
                [
                  _c(
                    "fks-input",
                    {
                      ref: "input",
                      staticClass: "fks-user-out-input",
                      attrs: {
                        readonly: "",
                        disabled: _vm.forbidden,
                        value: _vm.username,
                        size: _vm.size,
                        placeholder:
                          _vm.sureList.length > 0
                            ? ""
                            : _vm.placeholder
                            ? _vm.placeholder
                            : _vm.t("fks.user.placeholder"),
                      },
                    },
                    [
                      !_vm.uploadReadOnly && !_vm.forbidden
                        ? _c("template", { slot: "suffix" }, [
                            _c("i", {
                              staticClass:
                                "fks-icon-circle-plus-outline fks-input__icon",
                              staticStyle: { cursor: "pointer" },
                              on: { click: _vm.open },
                            }),
                          ])
                        : _vm._e(),
                    ],
                    2
                  ),
                ],
                1
              ),
            ]
          )
        : _vm._e(),
      _c("user-selector-dialog", {
        attrs: {
          multiple: _vm.multiple,
          multipleLimit: _vm.multipleLimit,
          recentUser: _vm.recentUser,
          visual: _vm.visible,
          userSureList: _vm.sureList,
          params: _vm.params,
          layout: _vm.layout,
          orgParams: _vm.orgParams,
          urlParams: _vm.urlParams,
          urlPath: _vm.urlPath,
          orgPath: _vm.orgPath,
          multiPortal: _vm.multiPortal,
          multiIndex: _vm.multiIndex,
          filterLogout: _vm.filterLogout,
          initSelect: _vm.initSelect,
          url: _vm.url,
          deptExpand: _vm.deptExpand,
          roleFixed: _vm.roleFixed,
          headers: _vm.headers,
          customClass: _vm.customClass,
          handleOrg: _vm.handleOrg,
        },
        on: {
          "update:visual": function ($event) {
            _vm.visible = $event
          },
          "update:userSureList": function ($event) {
            _vm.sureList = $event
          },
          "update:user-sure-list": function ($event) {
            _vm.sureList = $event
          },
          updateSureList: _vm.updateSureList,
        },
      }),
    ],
    1
  )
}
var staticRenderFns = []
render._withStripped = true


// CONCATENATED MODULE: ./packages/user-selector/src/user-selector.vue?vue&type=template&id=904bc870&

// EXTERNAL MODULE: ./src/mixins/selector.js
var selector = __webpack_require__(24);

// EXTERNAL MODULE: external "fawkes-lib/lib/mixins/locale"
var locale_ = __webpack_require__(4);
var locale_default = /*#__PURE__*/__webpack_require__.n(locale_);

// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/user-selector/src/user-selector-dialog.vue?vue&type=template&id=4c2706bf&
var user_selector_dialogvue_type_template_id_4c2706bf_render = function () {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "fks-dialog",
    {
      attrs: {
        visible: _vm.visible,
        width: "1200px",
        top: "8vh",
        "append-to-body": "",
        "custom-class": "fks-user-transfer-dialog " + _vm.customClass,
        "before-close": _vm.closeDialog,
      },
      on: {
        "update:visible": function ($event) {
          _vm.visible = $event
        },
      },
    },
    [
      _c("template", { slot: "title" }, [
        _c("i", { staticClass: "fks-icon-user" }),
        _c("span", [_vm._v(_vm._s(_vm.t("fks.user.selectmember")))]),
      ]),
      _c(
        "div",
        [
          _c(
            "fks-tabs",
            {
              on: { "tab-click": _vm.handleTabChange },
              model: {
                value: _vm.activeName,
                callback: function ($$v) {
                  _vm.activeName = $$v
                },
                expression: "activeName",
              },
            },
            [
              _vm.layout.split(",").indexOf("branch") > -1
                ? _c("fks-tab-pane", {
                    attrs: { label: _vm.t("fks.user.branch"), name: "first" },
                  })
                : _vm._e(),
              _vm.layout.split(",").indexOf("role") > -1
                ? _c("fks-tab-pane", {
                    attrs: { label: _vm.t("fks.user.role"), name: "second" },
                  })
                : _vm._e(),
              _c(
                "fks-row",
                { attrs: { gutter: 68 } },
                [
                  _c(
                    "fks-col",
                    { attrs: { span: 12 } },
                    [
                      _c(
                        "fks-input",
                        {
                          attrs: {
                            placeholder: _vm.t("fks.user.searchname"),
                            size: "medium",
                          },
                          nativeOn: {
                            keyup: function ($event) {
                              if (
                                !$event.type.indexOf("key") &&
                                _vm._k(
                                  $event.keyCode,
                                  "enter",
                                  13,
                                  $event.key,
                                  "Enter"
                                )
                              ) {
                                return null
                              }
                              return _vm.searchUser.apply(null, arguments)
                            },
                          },
                          model: {
                            value: _vm.searchKey,
                            callback: function ($$v) {
                              _vm.searchKey = $$v
                            },
                            expression: "searchKey",
                          },
                        },
                        [
                          _c("i", {
                            staticClass: "fks-input__icon fks-icon-search",
                            attrs: { slot: "suffix" },
                            on: {
                              click: function ($event) {
                                $event.stopPropagation()
                                return _vm.searchUser.apply(null, arguments)
                              },
                            },
                            slot: "suffix",
                          }),
                        ]
                      ),
                    ],
                    1
                  ),
                  _c(
                    "fks-col",
                    { attrs: { span: 12 } },
                    [
                      _c("fks-org-selector", {
                        directives: [
                          {
                            name: "show",
                            rawName: "v-show",
                            value: _vm.activeName === "first",
                            expression: "activeName === 'first'",
                          },
                        ],
                        ref: "orgSel",
                        attrs: {
                          deptExpand: _vm.deptExpand,
                          width: "100%",
                          "popper-class": _vm.customClass,
                          url: _vm.url,
                          multiPortal: _vm.multiPortal,
                          multiIndex: _vm.multiIndex,
                          deptId: _vm.deptid,
                          urlPath: _vm.orgPath,
                          params: _vm.orgParamsExt,
                        },
                        on: {
                          "update:deptId": function ($event) {
                            _vm.deptid = $event
                          },
                          "update:dept-id": function ($event) {
                            _vm.deptid = $event
                          },
                          change: _vm.handleDeptChange,
                          ready: _vm.handleReady,
                        },
                        model: {
                          value: _vm.dept,
                          callback: function ($$v) {
                            _vm.dept = $$v
                          },
                          expression: "dept",
                        },
                      }),
                      _c(
                        "fks-select",
                        {
                          directives: [
                            {
                              name: "show",
                              rawName: "v-show",
                              value: _vm.activeName === "second",
                              expression: "activeName === 'second'",
                            },
                          ],
                          staticStyle: { width: "100%" },
                          attrs: {
                            readonly: _vm.roleReadonly,
                            "popper-class": _vm.customClass,
                            placeholder: _vm.t("fks.user.selectRole"),
                          },
                          on: { change: _vm.handleRoleSelect },
                          model: {
                            value: _vm.roleValue,
                            callback: function ($$v) {
                              _vm.roleValue = $$v
                            },
                            expression: "roleValue",
                          },
                        },
                        _vm._l(_vm.roleList, function (item) {
                          return _c("fks-option", {
                            key: item.id,
                            attrs: { label: item.name, value: item.id },
                          })
                        }),
                        1
                      ),
                    ],
                    1
                  ),
                ],
                1
              ),
              _c(
                "fks-row",
                {
                  staticClass: "fks-user-transfer-container",
                  attrs: { gutter: 68 },
                },
                [
                  _c(
                    "fks-col",
                    { attrs: { span: 12 } },
                    [
                      _vm.multiple
                        ? _c(
                            "div",
                            { staticClass: "right-button" },
                            [
                              _c(
                                "fks-button",
                                {
                                  staticClass: "second-button",
                                  attrs: { size: "small", plain: "" },
                                  on: { click: _vm.chooseAll },
                                },
                                [
                                  _c("i", {
                                    staticClass: "fks-icon-select-all",
                                  }),
                                  _vm._v(_vm._s(_vm.t("fks.user.allselect"))),
                                ]
                              ),
                            ],
                            1
                          )
                        : _vm._e(),
                      _c(
                        "fks-tabs",
                        {
                          staticClass: "fks-user-transfer-tabs",
                          attrs: { type: "card" },
                          model: {
                            value: _vm.editableTabsValue,
                            callback: function ($$v) {
                              _vm.editableTabsValue = $$v
                            },
                            expression: "editableTabsValue",
                          },
                        },
                        [
                          _vm.dataShow
                            ? _c(
                                "fks-tab-pane",
                                {
                                  attrs: {
                                    label: _vm.t("fks.user.memberlist"),
                                    name: "first",
                                  },
                                },
                                [
                                  _vm.editableTabsValue == "first"
                                    ? _c(
                                        "div",
                                        {
                                          staticClass:
                                            "fks-user-transfer-container__table-cont",
                                        },
                                        [
                                          _c(
                                            "fks-table",
                                            {
                                              directives: [
                                                {
                                                  name: "loading",
                                                  rawName: "v-loading",
                                                  value: _vm.loading,
                                                  expression: "loading",
                                                },
                                              ],
                                              staticStyle: { width: "100%" },
                                              attrs: {
                                                data: _vm.tableList,
                                                height: "400px",
                                                border: "",
                                              },
                                              on: {
                                                "sort-change": _vm.sortHandler,
                                                "row-click": _vm.addToRight,
                                              },
                                            },
                                            [
                                              _c("fks-table-column", {
                                                attrs: {
                                                  prop: "userFullname",
                                                  label: _vm.t("fks.user.name"),
                                                  "min-width": "20%",
                                                  sortable: "custom",
                                                },
                                              }),
                                              _c("fks-table-column", {
                                                attrs: {
                                                  prop: "userName",
                                                  label:
                                                    _vm.t("fks.user.username"),
                                                  "min-width": "25%",
                                                },
                                              }),
                                              _c("fks-table-column", {
                                                attrs: {
                                                  prop: "sex",
                                                  label: _vm.t("fks.gender"),
                                                  "min-width": "20%",
                                                },
                                              }),
                                              _vm.activeName === "first"
                                                ? _c("fks-table-column", {
                                                    attrs: {
                                                      label: _vm.t(
                                                        "fks.user.belongbranch"
                                                      ),
                                                      "show-overflow-tooltip":
                                                        "",
                                                      "min-width": "35%",
                                                      "class-name":
                                                        "my-table-tc1",
                                                      align: "left",
                                                    },
                                                    scopedSlots: _vm._u(
                                                      [
                                                        {
                                                          key: "default",
                                                          fn: function (scope) {
                                                            return [
                                                              _vm._v(
                                                                _vm._s(
                                                                  scope.row
                                                                    .orgList
                                                                    ? _vm.handleOrg(
                                                                        scope
                                                                          .row
                                                                          .orgList
                                                                      )
                                                                    : ""
                                                                )
                                                              ),
                                                            ]
                                                          },
                                                        },
                                                      ],
                                                      null,
                                                      false,
                                                      798443817
                                                    ),
                                                  })
                                                : _vm._e(),
                                            ],
                                            1
                                          ),
                                          _c(
                                            "div",
                                            {
                                              staticClass: "fks-user-left-page",
                                            },
                                            [
                                              _c("fks-pagination", {
                                                attrs: {
                                                  "pager-count": 5,
                                                  "page-sizes": [
                                                    25, 50, 100, 200,
                                                  ],
                                                  "page-size": _vm.pageSize,
                                                  total: _vm.totalCount,
                                                  layout:
                                                    "prev, pager, next,total, sizes",
                                                },
                                                on: {
                                                  "size-change":
                                                    _vm.handleSizeChange,
                                                  "current-change":
                                                    _vm.handleCurrentChange,
                                                },
                                              }),
                                            ],
                                            1
                                          ),
                                        ],
                                        1
                                      )
                                    : _vm._e(),
                                ]
                              )
                            : _vm._e(),
                          _vm.recentUser
                            ? _c(
                                "fks-tab-pane",
                                {
                                  attrs: {
                                    label: _vm.t("fks.user.recentadd"),
                                    name: "second",
                                  },
                                },
                                [
                                  _vm.editableTabsValue == "second"
                                    ? _c(
                                        "div",
                                        { staticClass: "table-cont" },
                                        [
                                          _c(
                                            "fks-table",
                                            {
                                              staticStyle: { width: "100%" },
                                              attrs: {
                                                data: _vm.tableData,
                                                height: "400px",
                                                border: "",
                                              },
                                              on: {
                                                "row-click": _vm.addToRight,
                                              },
                                            },
                                            [
                                              _c("fks-table-column", {
                                                attrs: {
                                                  prop: "userFullname",
                                                  label: _vm.t("fks.user.name"),
                                                  "min-width": "20%",
                                                },
                                              }),
                                              _c("fks-table-column", {
                                                attrs: {
                                                  prop: "userName",
                                                  label:
                                                    _vm.t("fks.user.username"),
                                                  "min-width": "25%",
                                                },
                                              }),
                                              _c("fks-table-column", {
                                                attrs: {
                                                  prop: "sex",
                                                  label: _vm.t("fks.gender"),
                                                  "min-width": "20%",
                                                },
                                              }),
                                              _vm.activeName === "first"
                                                ? _c("fks-table-column", {
                                                    attrs: {
                                                      label: _vm.t(
                                                        "fks.user.belongbranch"
                                                      ),
                                                      "show-overflow-tooltip":
                                                        "",
                                                      "min-width": "35%",
                                                      "class-name":
                                                        "my-table-tc1",
                                                      align: "left",
                                                    },
                                                    scopedSlots: _vm._u(
                                                      [
                                                        {
                                                          key: "default",
                                                          fn: function (scope) {
                                                            return [
                                                              _vm._v(
                                                                _vm._s(
                                                                  scope.row
                                                                    .orgList
                                                                    ? _vm.handleOrg(
                                                                        scope
                                                                          .row
                                                                          .orgList
                                                                      )
                                                                    : ""
                                                                )
                                                              ),
                                                            ]
                                                          },
                                                        },
                                                      ],
                                                      null,
                                                      false,
                                                      798443817
                                                    ),
                                                  })
                                                : _vm._e(),
                                            ],
                                            1
                                          ),
                                          _c(
                                            "div",
                                            {
                                              staticClass: "fks-user-left-page",
                                            },
                                            [
                                              _c("fks-pagination", {
                                                attrs: {
                                                  total: _vm.tableData.length,
                                                  layout: "total",
                                                },
                                              }),
                                            ],
                                            1
                                          ),
                                        ],
                                        1
                                      )
                                    : _vm._e(),
                                ]
                              )
                            : _vm._e(),
                        ],
                        1
                      ),
                    ],
                    1
                  ),
                  _c("fks-col", { attrs: { span: 12 } }, [
                    _c(
                      "div",
                      { staticClass: "right-button" },
                      [
                        _c(
                          "fks-button",
                          {
                            staticClass: "second-button",
                            attrs: { size: "small", plain: "" },
                            on: { click: _vm.clearChosed },
                          },
                          [
                            _c("i", { staticClass: "fks-icon-reset" }),
                            _vm._v(_vm._s(_vm.t("fks.clear"))),
                          ]
                        ),
                      ],
                      1
                    ),
                    _c("div", { staticClass: "fks-user-right-transfer" }, [
                      _c(
                        "div",
                        { staticClass: "fks-user-right-transfer__title" },
                        [
                          _vm._v(
                            "\n              " +
                              _vm._s(_vm.t("fks.user.selectedmember")) +
                              "\n            "
                          ),
                        ]
                      ),
                      _c(
                        "div",
                        { staticClass: "fks-user-right-transfer__content" },
                        [
                          _c(
                            "fks-table",
                            {
                              staticStyle: { width: "100%" },
                              attrs: {
                                data: _vm.chosedList,
                                height: "436px",
                                "header-row-class-name": "my-table-head",
                                "row-class-name": "my-table-row",
                                border: "",
                              },
                              on: { "row-click": _vm.deletPerson },
                            },
                            [
                              _c("fks-table-column", {
                                attrs: {
                                  prop: "userFullname",
                                  label: _vm.t("fks.user.name"),
                                  "min-width": "20%",
                                },
                              }),
                              _c("fks-table-column", {
                                attrs: {
                                  prop: "userName",
                                  label: _vm.t("fks.user.username"),
                                  "min-width": "25%",
                                },
                              }),
                              _c("fks-table-column", {
                                attrs: {
                                  prop: "sex",
                                  label: _vm.t("fks.gender"),
                                  "min-width": "20%",
                                },
                              }),
                              _vm.activeName === "first"
                                ? _c("fks-table-column", {
                                    attrs: {
                                      prop: "orgList",
                                      label: _vm.t("fks.user.belongbranch"),
                                      "show-overflow-tooltip": "",
                                      "min-width": "35%",
                                      "class-name": "my-table-tc1",
                                      align: "left",
                                    },
                                    scopedSlots: _vm._u(
                                      [
                                        {
                                          key: "default",
                                          fn: function (scope) {
                                            return [
                                              _vm._v(
                                                _vm._s(
                                                  scope.row.orgList
                                                    ? _vm.handleOrg(
                                                        scope.row.orgList
                                                      )
                                                    : ""
                                                )
                                              ),
                                            ]
                                          },
                                        },
                                      ],
                                      null,
                                      false,
                                      798443817
                                    ),
                                  })
                                : _vm._e(),
                            ],
                            1
                          ),
                        ],
                        1
                      ),
                    ]),
                  ]),
                ],
                1
              ),
            ],
            1
          ),
        ],
        1
      ),
      _c(
        "div",
        {
          staticClass: "fks-user-transfer-footer",
          attrs: { slot: "footer" },
          slot: "footer",
        },
        [
          _c(
            "fks-row",
            [
              _c(
                "fks-button",
                {
                  staticClass: "fks-icon-check",
                  attrs: { type: "primary" },
                  on: { click: _vm.subUser },
                },
                [_vm._v(_vm._s(_vm.t("fks.confirm")))]
              ),
            ],
            1
          ),
        ],
        1
      ),
    ],
    2
  )
}
var user_selector_dialogvue_type_template_id_4c2706bf_staticRenderFns = []
user_selector_dialogvue_type_template_id_4c2706bf_render._withStripped = true


// CONCATENATED MODULE: ./packages/user-selector/src/user-selector-dialog.vue?vue&type=template&id=4c2706bf&

// EXTERNAL MODULE: ./src/utils/request.js + 2 modules
var request = __webpack_require__(13);

// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/user-selector/src/user-selector-dialog.vue?vue&type=script&lang=js&
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//




/* harmony default export */ var user_selector_dialogvue_type_script_lang_js_ = ({
  name: 'UserSelectorDialog',
  mixins: [selector["a" /* default */], locale_default.a],
  props: {
    deptExpand: {
      type: Boolean,
      default: false
    },
    customClass: {
      type: String,
      default: ''
    },
    layout: {
      type: String,
      default: 'branch,role'
    },
    initSelect: {
      type: Boolean,
      default: false
    },
    filterLogout: {
      type: Boolean,
      default: true
    },
    multiPortal: {
      type: Boolean
    },
    multiIndex: {
      type: Array
    },
    multiple: {
      type: Boolean
    },
    userSureList: {
      type: Array
    },
    visual: {
      type: Boolean
    },
    recentUser: {
      type: Boolean
    },
    orgParams: {
      type: Object,
      default: function _default() {
        return {};
      }
    },
    urlParams: {
      type: Object,
      default: function _default() {
        return {};
      }
    },
    headers: {},
    urlPath: {
      type: String
    },
    orgPath: {
      type: String,
      default: '/sys-user/orgs/tree'
    },
    url: {
      type: String
    },
    roleFixed: {
      type: Boolean,
      default: false
    },
    handleOrg: {
      type: Function,
      default: function _default(orgList) {
        return orgList.length ? orgList[0].name : '';
      }
    }
  },
  data: function data() {
    return {
      sort: '',
      roleReadonly: false,
      visible: false,
      roleValue: '', //角色选择器value
      ifDataRender: false, //初次打开时部门选择器数据是否渲染完成
      ifChooseFirst: false, //是否是打开时初始化部门选择器动作（防止触发handleDeptChange
      activeName: 'first', // 部门角色tabs
      dept: {}, // chosed dept
      searchKey: '',
      editableTabsValue: 'second',
      // table data relative
      dataShow: false,
      loading: false,
      roleList: [], //角色列表
      tableList: [],
      tableData: this.$storage.get('latestUser') ? JSON.parse(this.$storage.get('latestUser')).reverse() : [], // 最近添加数据
      chosedList: [],
      sureList: [], // 显示tags用
      // 分页相关
      pageSize: 25,
      totalCount: 0,
      currentPage: 1,
      rolePage: 1,
      totalPage: 1,
      deptid: this.params.orgNo || '',
      orgParamsExt: Object.assign({
        id: this.params.orgNo,
        portalId: this.params.portalId
      }, this.orgParams),
      enterFirst: true //是否组件渲染后初次打开（涉及最近添加页逻辑
    };
  },

  watch: {
    visual: function visual(val) {
      var _this = this;

      //监听父组件对visual的改变
      this.visible = val;
      this.chosedList = this.sureList.concat();
      if (val) {
        this.activeName = this.layout.split(',').indexOf('branch') > -1 ? 'first' : 'second';
        if (this.layout == 'role' || this.activeName === 'second') {
          this.initialRoleList();
        }
        if (this.recentUser) {
          this.editableTabsValue = 'second';
        } else {
          this.editableTabsValue = 'first';
          this.dataShow = true;
        }
        //组件不是初次打开从父组件调用子组件方法，组件是初次打开时由内部data渲染完成触发子组件方法调用
        if (this.ifDataRender && !this.ifChooseFirst) {
          this.$nextTick(function () {
            _this.selectOrgFirst();
          });
        }
      }
    },
    userSureList: function userSureList(val) {
      this.sureList = val;
    }
  },
  methods: {
    sortHandler: function sortHandler(data) {
      this.sort = data.order == 'ascending' ? 'asc' : 'desc';
      this.getList();
    },

    //筛选模式（按部门/角色）切换
    handleTabChange: function handleTabChange(tab, event) {
      this.tableList = [];
      //初次选择角色分类时初始化角色选择列表
      if (this.activeName === 'second' && !this.roleList.length) {
        this.initialRoleList();
      } else {
        this.getList();
      }
    },
    getList: function getList() {
      switch (this.activeName) {
        case 'first':
          this.getUser(this.deptid, this.searchKey, this.pageSize, this.currentPage, this.sort);
          break;
        case 'second':
          this.getUser(this.roleValue, this.searchKey, this.pageSize, this.rolePage, this.sort);
          break;
      }
    },

    //选择角色列表
    handleRoleSelect: function handleRoleSelect(val) {
      this.dataShow = true;
      this.rolePage = 1;
      this.editableTabsValue = 'first';
      this.getUser(val, this.searchKey, this.pageSize, this.rolePage);
    },

    //部门选择器数据渲染完成
    handleReady: function handleReady(val) {
      if (val && !this.ifDataRender) {
        if (this.initSelect && this.activeName == 'first') this.deptid = this.$refs.orgSel.selectFirst();
        this.dataShow = true;
        this.currentPage = 1;
        //如果部门树预填失败（即返回空） 触发初次进入
        if (!this.deptid) this.enterFirst = false;
        this.getUser(this.deptid, this.searchKey, this.pageSize, this.currentPage);
        this.ifDataRender = true;
        this.ifChooseFirst = true;
      }
    },
    selectOrgFirst: function selectOrgFirst() {
      if (this.initSelect && this.activeName == 'first') this.deptid = this.$refs.orgSel.selectFirst();
      this.dataShow = true;
      this.currentPage = 1;
      this.ifChooseFirst = true;
      this.getUser(this.deptid, this.searchKey, this.pageSize, this.currentPage);
    },
    closeDialog: function closeDialog() {
      this.searchKey = '';
      this.roleValue = '';
      this.ifChooseFirst = false;
      this.visible = false;
      this.$emit('update:visual', false);
    },
    addToRight: function addToRight(row, column, event) {
      // 左右穿梭框数据的添加
      var result = this.chosedList.some(function (item) {
        // 采用some为了避免查询结果相同的对象因指针不同而可以再次添加
        if (item.userName == row.userName) {
          return true;
        }
      });
      if (result) {
        return false;
      } else {
        if (!this.multiple) {
          this.chosedList.shift();
          this.chosedList.push(row);
        } else if (this.multipleLimit <= 0 || this.chosedList.length < this.multipleLimit) {
          this.chosedList.push(row);
        }
      }
    },
    deletPerson: function deletPerson(row, column, event) {
      // 左右穿梭框数据的删除
      this.chosedList.splice(this.chosedList.indexOf(row), 1);
    },
    chooseAll: function chooseAll() {
      // 全选
      if (this.editableTabsValue == 'first') {
        this.chooseFunc(this.tableList);
        //this.chosedList = this.tableList.concat()
      } else {
        this.chooseFunc(this.tableData);
        // this.chosedList = this.tableData.concat()
      }
    },
    chooseFunc: function chooseFunc(arr) {
      if (!this.multiple) {
        this.chosedList.shift();
        this.chosedList.push(arr[0]);
      } else if (this.multipleLimit <= 0 || this.chosedList.length < this.multipleLimit) {
        this.chosedList = [];
        var len = this.multipleLimit != 0 ? this.multipleLimit : arr.length;
        for (var a = 0; a < len; a++) {
          this.chosedList.push(arr[a]);
        }
      }
    },
    clearChosed: function clearChosed() {
      // 清空已选
      this.chosedList = [];
    },
    handleDeptChange: function handleDeptChange(item) {
      // 选中部门树
      this.currentPage = 1;
      this.deptid = item[0] && item[0].id || '';
      this.deptTree = item.label;
      this.dataShow = true;
      if (this.enterFirst) {
        //初次进入时
        this.enterFirst = false;
      } else {
        if (!this.tableData.length) this.editableTabsValue = 'first';
        //当数据渲染完成且不是打开组件进行部门选择器初始化时（即点击部门树时）
        if (this.ifDataRender && this.ifChooseFirst) {
          this.getUser(this.deptid, this.searchKey, this.pageSize, this.currentPage);
        }
      }
    },
    searchUser: function searchUser(serval) {
      // 按人员搜索，触发条件是onchange,每次搜索都要重新请求数据，并不是在已有的数据下进行过滤
      this.dataShow = true;
      this.editableTabsValue = 'first';
      if (this.activeName === 'first') {
        this.currentPage = 1;
        this.getUser(this.deptid, this.searchKey, this.pageSize, this.currentPage);
      }
      if (this.activeName === 'second') {
        this.rolePage = 1;
        this.getUser(this.roleValue, this.searchKey, this.pageSize, this.rolePage);
      }
    },
    clearSearchKey: function clearSearchKey() {
      // 清空按账号或姓名搜索框
      this.searchKey = '';
    },
    handleSizeChange: function handleSizeChange(val) {
      // 更改每页条数需要重新请求数据
      this.pageSize = val;
      switch (this.activeName) {
        case 'first':
          this.currentPage = 1;
          this.getUser(this.deptid, this.searchKey, val, this.currentPage);
          break;
        case 'second':
          this.rolePage = 1;
          this.getUser(this.roleValue, this.searchKey, val, this.rolePage);
          break;
      }
    },
    handleCurrentChange: function handleCurrentChange(val) {
      // 切换当前页需要重新请求数据
      if (this.activeName === 'first') {
        this.currentPage = val;
        this.getUser(this.deptid, this.searchKey, this.pageSize, val);
      }
      if (this.activeName === 'second') {
        this.rolePage = val;
        this.getUser(this.roleValue, this.searchKey, this.pageSize, val);
      }
    },
    jumpPage: function jumpPage(val) {
      if (val == 'first') {
        this.currentPage = 1;
        this.getUser(this.deptid, this.searchKey, this.pageSize, this.currentPage);
      } else {
        this.currentPage = this.totalPage;
        this.getUser(this.deptid, this.searchKey, this.pageSize, this.currentPage);
      }
    },

    /**
     * @description: 通过参数获取分页人员数据
     * @param {deptNo} 部门编号
     * @param {searchkey} 搜索关键字
     * @param {pagesize} 页面数据大小
     * @param {currentpage} 页码
     * @return:
     */
    getUser: function getUser(deptNo, searchkey, pagesize, currentpage, sort) {
      var _this2 = this;

      // size=  page= currentPage
      this.loading = true;
      var params = {};
      var tempURL = this.url + this.urlPath;
      if (this.activeName === 'first') {
        params = {
          orgNo: !!deptNo ? Number(deptNo) : null,
          searchValue: searchkey.trim(),
          pageSize: pagesize,
          pageNo: currentpage,
          accountStatus: this.filterLogout ? '1' : '',
          sort: sort
        };
        params = Object.assign({}, this.params, params, this.urlParams);
        //当且仅当多门户开启且当前tab页不为当前门户时，已有部门id则不需要门户id
        if (!!params.orgNo && this.multiPortal && this.$refs.orgSel.activeTab != 'present') params.portalId = '';
      }
      if (this.activeName === 'second') {
        //如果是没有portalId的请求会系统异常，不发送
        if (!deptNo) {
          this.loading = false;
          this.tableList = [];
          this.totalCount = 0;
          this.totalPage = 1;
          return;
        }
        tempURL = '/sys-user/role/users/page';
        params = {
          searchValue: searchkey.trim(),
          roleId: deptNo,
          pageSize: pagesize,
          pageNo: currentpage,
          sort: sort
        };
      }

      var r = this.$axios || request["a" /* default */];
      r({
        method: 'get',
        url: tempURL,
        params: params,
        headers: this.headers
      }).then(function (res) {
        var response = res;
        if (res.data.status) {
          //排除拦截器影响
          response = res.data;
        }
        if (response.status) {
          _this2.tableList = response.data.content || response.data.list;
          _this2.totalCount = response.data.totalElements || response.data.total;
          _this2.totalPage = response.data.totalPages || response.data.pages;
          _this2.loading = false;
        } else {
          _this2.loading = false;
        }
      }).catch(function (err) {
        _this2.loading = false;
        console.log(err);
      });
    },

    //初始化角色选择列表
    initialRoleList: function initialRoleList() {
      var _this3 = this;

      //大小暂时写死
      this.totalCount = 0;
      this.totalPage = 1;
      var tempDeptId = this.params.portalId;
      if (!tempDeptId) tempDeptId = this.$storage.get('portal') ? JSON.parse(this.$storage.get('portal')).id : '';
      //如果params没有走缓存
      var params = {
        pageSize: 100,
        pageNo: 1,
        portalId: tempDeptId
      };
      var r = this.$axios || request["a" /* default */];
      r({
        method: 'get',
        url: '/sys-system/roles/page',
        params: params,
        headers: this.headers
      }).then(function (res) {
        var response = res;
        if (res.data.status) {
          //排除拦截器影响
          response = res.data;
        }
        if (response.status) {
          _this3.roleList = response.data.list;
          if (_this3.params.role) {
            _this3.roleValue = _this3.params.role;
            _this3.roleReadonly = _this3.roleFixed;
            _this3.getList();
          }
        } else {
          console.log('角色列表获取失败');
        }
      }).catch(function (err) {
        console.log(err);
      });
    },
    subUser: function subUser() {
      var _this4 = this;

      this.sureList = this.chosedList.concat();
      this.$emit('update:userSureList', this.sureList);
      this.$emit('updateSureList', this.sureList);
      if (this.$storage.get('latestUser')) {
        (function () {
          var latestUser = JSON.parse(_this4.$storage.get('latestUser'));

          var _loop = function _loop(i) {
            var indexT = 0;
            var result = latestUser.some(function (item) {
              if (item.userName == _this4.chosedList[i].userName) {
                indexT = latestUser.indexOf(item);
                return true;
              }
            });
            if (result) {
              latestUser.splice(indexT, 1);
              latestUser.push(_this4.chosedList[i]);
            } else {
              latestUser.push(_this4.chosedList[i]);
            }
          };

          for (var i = 0; i < _this4.chosedList.length; i++) {
            _loop(i);
          }
          if (latestUser.length > 20) {
            latestUser = latestUser.splice(latestUser.length - 20, 20);
          }
          _this4.$storage.set('latestUser', JSON.stringify(latestUser));
        })();
      } else {
        var latestUser = this.chosedList.concat();
        if (latestUser.length > 20) {
          latestUser = latestUser.splice(latestUser.length - 20, 20);
        }
        this.$storage.set('latestUser', JSON.stringify(latestUser));
      }
      this.tableData = JSON.parse(this.$storage.get('latestUser')).reverse();
      //重载部门选择器，清空搜索栏
      //提交时不清空已选
      this.searchKey = '';
      this.visible = false;
      this.roleValue = '';
      this.$emit('update:visual', false);
    }
  },
  mounted: function mounted() {}
});
// CONCATENATED MODULE: ./packages/user-selector/src/user-selector-dialog.vue?vue&type=script&lang=js&
 /* harmony default export */ var src_user_selector_dialogvue_type_script_lang_js_ = (user_selector_dialogvue_type_script_lang_js_); 
// EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js
var componentNormalizer = __webpack_require__(0);

// CONCATENATED MODULE: ./packages/user-selector/src/user-selector-dialog.vue





/* normalize component */

var component = Object(componentNormalizer["a" /* default */])(
  src_user_selector_dialogvue_type_script_lang_js_,
  user_selector_dialogvue_type_template_id_4c2706bf_render,
  user_selector_dialogvue_type_template_id_4c2706bf_staticRenderFns,
  false,
  null,
  null,
  null
  
)

/* harmony default export */ var user_selector_dialog = (component.exports);
// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/user-selector/src/user-selector.vue?vue&type=script&lang=js&
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//




/* harmony default export */ var user_selectorvue_type_script_lang_js_ = ({
  name: 'FksUserSelector',
  mixins: [selector["a" /* default */], locale_default.a],
  components: { UserSelectorDialog: user_selector_dialog },
  props: {
    deptExpand: {
      type: Boolean,
      default: false
    },
    customClass: {
      type: String,
      default: 'fks-user-transfer-dialog'
    },
    layout: {
      type: String,
      default: 'branch,role'
    },
    placeholder: {
      type: String,
      default: ''
    },
    initSelect: {
      type: Boolean,
      default: false
    },
    filterLogout: {
      type: Boolean,
      default: true
    },
    multiPortal: {
      type: Boolean
    },
    multiIndex: {
      type: Array
    },
    recentUser: {
      type: Boolean,
      default: true
    },
    username: {
      type: String,
      default: ''
    },
    userfullname: {
      type: String,
      default: ''
    },
    orgParams: {
      type: Object,
      default: function _default() {
        return {};
      }
    },
    urlParams: {
      type: Object,
      default: function _default() {
        return {};
      }
    },
    orgPath: {
      type: String,
      default: '/sys-user/orgs/tree'
    },
    urlPath: {
      type: String,
      default: '/sys-user/users/page'
    },
    roleFixed: {
      type: Boolean,
      default: false
    },
    handleOrg: {
      type: Function
    }
  },
  data: function data() {
    return {
      visible: false,
      reference: '', // slot对应
      sureList: [], // 显示tags用
      // 分页相关
      innerFlag: false
    };
  },

  watch: {
    username: function username(val) {
      if (!this.innerFlag) {
        this.initialList();
      }
      this.innerFlag = false;
    }
  },
  methods: {
    updateSureList: function updateSureList(val) {
      this.innerFlag = true;
      this.updateProps(this.sureList);
    },
    updateProps: function updateProps(val) {
      this.innerFlag = true;
      var usernameStr = '';
      var userfullnameStr = '';
      if (val.length == 0) {
        this.$emit('update:username', '');
        this.$emit('update:userfullname', '');
        this.$emit('change', val);
      } else {
        val.forEach(function (item) {
          usernameStr += item.userName + ',';
          userfullnameStr += item.userFullname + ',';
        });
        this.$emit('update:username', usernameStr.substring(0, usernameStr.length - 1));
        this.$emit('update:userfullname', userfullnameStr.substring(0, userfullnameStr.length - 1));
        this.$emit('change', val);
      }
      if (this.multiple && !this.collapseTags) {
        this.resetInputHeight();
      }
    },

    //根据username初始化tag输入框
    initialList: function initialList() {
      var _this = this;

      var userfullnameArr = this.userfullname ? this.userfullname.split(',') : [];
      var usernameArr = this.username ? this.username.split(',') : [];
      var len = userfullnameArr.length;
      var len2 = usernameArr.length;

      if (this.userfullname && this.username) {
        if (len !== len2) {
          console.error(this.$options.name + ' \u4E2D\u521D\u59CB\u4EBA\u5458\u6570\u503C\u9519\u8BEF');
          return false;
        }
        if (len > 1 && !this.multiple) {
          console.error(this.$options.name + ' \u4E2D\u4EBA\u5458\u521D\u503C\u4E3A\u591A\u4E2A\uFF0C\u8BF7\u6DFB\u52A0multiple\u5C5E\u6027');
        } else {
          this.sureList = [];
          usernameArr.forEach(function (e, index) {
            var obj = {
              userFullname: userfullnameArr[index],
              userName: e
            };
            _this.sureList.push(obj);
          });
        }
      } else if (!this.userfullname && !this.username) {
        this.sureList = [];
      } else {
        console.error('\u8BF7\u5728 ' + this.$options.name + ' \u8F93\u5165\u6B63\u786E\u7684\u4EBA\u5458\u6570\u636E,\u4EBA\u5458id\u548C\u4EBA\u5458\u540D\u79F0\u9700\u540C\u65F6\u8D4B\u503C');
      }
      if (this.multiple && !this.collapseTags) {
        this.resetInputHeight();
      }
    },

    /**
     * @description: 打开选人面板
     * @param {}
     * @return:
     */
    open: function open() {
      if (this.uploadReadOnly || this.forbidden) {
        return false;
      }
      this.visible = true;
    },
    deleteOne: function deleteOne(tag) {
      // 删除标签中的人员
      this.sureList.splice(this.sureList.findIndex(function (item) {
        return item.userName == tag.userName;
      }), 1);
      this.updateProps(this.sureList);
    }
  },
  mounted: function mounted() {
    /**获取slot内容，判断显示内容 */
    this.reference = '';
    if (this.$slots.reference && this.$slots.reference[0]) {
      this.reference = this.$slots.reference[0].elm;
    }
    this.initialList();
  }
});
// CONCATENATED MODULE: ./packages/user-selector/src/user-selector.vue?vue&type=script&lang=js&
 /* harmony default export */ var src_user_selectorvue_type_script_lang_js_ = (user_selectorvue_type_script_lang_js_); 
// CONCATENATED MODULE: ./packages/user-selector/src/user-selector.vue





/* normalize component */

var user_selector_component = Object(componentNormalizer["a" /* default */])(
  src_user_selectorvue_type_script_lang_js_,
  render,
  staticRenderFns,
  false,
  null,
  null,
  null
  
)

/* harmony default export */ var user_selector = (user_selector_component.exports);
// CONCATENATED MODULE: ./packages/user-selector/index.js
// 导入组件，组件必须声明 name


// 为组件提供 install 安装方法，供按需引入
user_selector.install = function (Vue) {
  Vue.component(user_selector.name, user_selector);
};

// 默认导出组件
/* harmony default export */ var packages_user_selector = __webpack_exports__["default"] = (user_selector);

/***/ }),

/***/ 13:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: external "axios"
var external_axios_ = __webpack_require__(16);
var external_axios_default = /*#__PURE__*/__webpack_require__.n(external_axios_);

// EXTERNAL MODULE: external "qs"
var external_qs_ = __webpack_require__(25);
var external_qs_default = /*#__PURE__*/__webpack_require__.n(external_qs_);

// EXTERNAL MODULE: external "crypto-js/hmac-sha1"
var hmac_sha1_ = __webpack_require__(18);
var hmac_sha1_default = /*#__PURE__*/__webpack_require__.n(hmac_sha1_);

// EXTERNAL MODULE: external "crypto-js/enc-base64"
var enc_base64_ = __webpack_require__(19);
var enc_base64_default = /*#__PURE__*/__webpack_require__.n(enc_base64_);

// EXTERNAL MODULE: external "vue"
var external_vue_ = __webpack_require__(5);
var external_vue_default = /*#__PURE__*/__webpack_require__.n(external_vue_);

// EXTERNAL MODULE: external "fawkes-lib/lib/utils/types"
var types_ = __webpack_require__(8);

// CONCATENATED MODULE: ./src/utils/util.js
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };




var util_hasOwnProperty = Object.prototype.hasOwnProperty;

function noop() {}

function hasOwn(obj, key) {
  return util_hasOwnProperty.call(obj, key);
}

function extend(to, _from) {
  for (var key in _from) {
    to[key] = _from[key];
  }
  return to;
}
/**
 * @description 生成UUID
 * @param {Integer} len uuid长度
 * @param {Integer} radix uuid基数
 * @returns {String} UUID
 */
function uuid(len, radix) {
  var chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split('');
  var uuid = [],
      i = void 0;
  radix = radix || chars.length;

  if (len) {
    // Compact form
    for (i = 0; i < len; i++) {
      uuid[i] = chars[0 | Math.random() * radix];
    }
  } else {
    // rfc4122, version 4 form
    var r = void 0;
    // rfc4122 requires these characters
    uuid[8] = uuid[13] = uuid[18] = uuid[23] = '-';
    uuid[14] = '4';
    // Fill in random data.  At i==19 set the high bits of clock sequence as
    // per rfc4122, sec. 4.1.5
    for (i = 0; i < 36; i++) {
      if (!uuid[i]) {
        r = 0 | Math.random() * 16;
        uuid[i] = chars[i == 19 ? r & 0x3 | 0x8 : r];
      }
    }
  }
  return uuid.join('');
}

function toObject(arr) {
  var res = {};
  for (var i = 0; i < arr.length; i++) {
    if (arr[i]) {
      extend(res, arr[i]);
    }
  }
  return res;
}

var getValueByPath = function getValueByPath(object, prop) {
  prop = prop || '';
  var paths = prop.split('.');
  var current = object;
  var result = null;
  for (var i = 0, j = paths.length; i < j; i++) {
    var path = paths[i];
    if (!current) break;

    if (i === j - 1) {
      result = current[path];
      break;
    }
    current = current[path];
  }
  return result;
};

function getPropByPath(obj, path, strict) {
  var tempObj = obj;
  path = path.replace(/\[(\w+)\]/g, '.$1');
  path = path.replace(/^\./, '');

  var keyArr = path.split('.');
  var i = 0;
  for (var len = keyArr.length; i < len - 1; ++i) {
    if (!tempObj && !strict) break;
    var key = keyArr[i];
    if (key in tempObj) {
      tempObj = tempObj[key];
    } else {
      if (strict) {
        throw new Error('please transfer a valid prop path to form item!');
      }
      break;
    }
  }
  return {
    o: tempObj,
    k: keyArr[i],
    v: tempObj ? tempObj[keyArr[i]] : null
  };
}

var generateId = function generateId() {
  return Math.floor(Math.random() * 10000);
};

var valueEquals = function valueEquals(a, b) {
  // see: https://stackoverflow.com/questions/3115982/how-to-check-if-two-arrays-are-equal-with-javascript
  if (a === b) return true;
  if (!(a instanceof Array)) return false;
  if (!(b instanceof Array)) return false;
  if (a.length !== b.length) return false;
  for (var i = 0; i !== a.length; ++i) {
    if (a[i] !== b[i]) return false;
  }
  return true;
};

var escapeRegexpString = function escapeRegexpString() {
  var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  return String(value).replace(/[|\\{}()[\]^$+*?.]/g, '\\$&');
};

// TODO: use native Array.find, Array.findIndex when IE support is dropped
var arrayFindIndex = function arrayFindIndex(arr, pred) {
  for (var i = 0; i !== arr.length; ++i) {
    if (pred(arr[i])) {
      return i;
    }
  }
  return -1;
};

var arrayFind = function arrayFind(arr, pred) {
  var idx = arrayFindIndex(arr, pred);
  return idx !== -1 ? arr[idx] : undefined;
};
var treeFind = function treeFind(arr, pred) {
  for (var i = 0; i !== arr.length; ++i) {
    if (pred(arr[i])) {
      return arr[i];
    } else if (Array.isArray(arr[i].children) && arr[i].children.length > 0) {
      var res = treeFind(arr[i].children, pred);
      if (res) return res;
    }
  }
  return undefined;
};
// coerce truthy value to array
var coerceTruthyValueToArray = function coerceTruthyValueToArray(val) {
  if (Array.isArray(val)) {
    return val;
  } else if (val) {
    return [val];
  } else {
    return [];
  }
};

var util_isIE = function isIE() {
  return !external_vue_default.a.prototype.$isServer && !isNaN(Number(document.documentMode));
};

var util_isEdge = function isEdge() {
  return !external_vue_default.a.prototype.$isServer && navigator.userAgent.indexOf('Edge') > -1;
};

var util_isFirefox = function isFirefox() {
  return !external_vue_default.a.prototype.$isServer && !!window.navigator.userAgent.match(/firefox/i);
};

var autoprefixer = function autoprefixer(style) {
  if ((typeof style === 'undefined' ? 'undefined' : _typeof(style)) !== 'object') return style;
  var rules = ['transform', 'transition', 'animation'];
  var prefixes = ['ms-', 'webkit-'];
  rules.forEach(function (rule) {
    var value = style[rule];
    if (rule && value) {
      prefixes.forEach(function (prefix) {
        style[prefix + rule] = value;
      });
    }
  });
  return style;
};

var kebabCase = function kebabCase(str) {
  var hyphenateRE = /([^-])([A-Z])/g;
  return str.replace(hyphenateRE, '$1-$2').replace(hyphenateRE, '$1-$2').toLowerCase();
};

var util_capitalize = function capitalize(str) {
  if (!Object(types_["isString"])(str)) return str;
  return str.charAt(0).toUpperCase() + str.slice(1);
};

var util_looseEqual = function looseEqual(a, b) {
  var isObjectA = Object(types_["isObject"])(a);
  var isObjectB = Object(types_["isObject"])(b);
  if (isObjectA && isObjectB) {
    return JSON.stringify(a) === JSON.stringify(b);
  } else if (!isObjectA && !isObjectB) {
    return String(a) === String(b);
  } else {
    return false;
  }
};

var arrayEquals = function arrayEquals(arrayA, arrayB) {
  arrayA = arrayA || [];
  arrayB = arrayB || [];

  if (arrayA.length !== arrayB.length) {
    return false;
  }

  for (var i = 0; i < arrayA.length; i++) {
    if (!util_looseEqual(arrayA[i], arrayB[i])) {
      return false;
    }
  }

  return true;
};

var isEqual = function isEqual(value1, value2) {
  if (Array.isArray(value1) && Array.isArray(value2)) {
    return arrayEquals(value1, value2);
  }
  return util_looseEqual(value1, value2);
};

var isEmpty = function isEmpty(val) {
  // null or undefined
  if (val == null) return true;

  if (typeof val === 'boolean') return false;

  if (typeof val === 'number') return !val;

  if (val instanceof Error) return val.message === '';

  switch (Object.prototype.toString.call(val)) {
    // String or Array
    case '[object String]':
    case '[object Array]':
      return !val.length;

    // Map or Set or File
    case '[object File]':
    case '[object Map]':
    case '[object Set]':
      {
        return !val.size;
      }
    // Plain Object
    case '[object Object]':
      {
        return !Object.keys(val).length;
      }
  }

  return false;
};

function rafThrottle(fn) {
  var locked = false;
  return function () {
    var _this = this;

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    if (locked) return;
    locked = true;
    window.requestAnimationFrame(function (_) {
      fn.apply(_this, args);
      locked = false;
    });
  };
}

function objToArray(obj) {
  if (Array.isArray(obj)) {
    return obj;
  }
  return isEmpty(obj) ? [] : [obj];
}
// CONCATENATED MODULE: ./src/utils/sign.js
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

/*
 * @Author: gao_m3
 * @Date: 2021-03-29 17:51:08
 * @LastEditors: wei_jt@ecidi.com
 * @LastEditTime: 2022-03-31 09:36:48
 * @Descripttion: 
 */




var CLIENT = 'fawkes'; //'dca84d27aeaa6783b6405fd222a2897a'//应用id
var CLIENT_SECRET = 'fawkes_secret'; //'73af5c8eb55cd81e696f97ec8151cf5eafa62ce2659c0139ebda3dec41e18594'
var dayjs = __webpack_require__(27);
//获取加密后的url参数字符串
var sign_getUrl = function getUrl(rest) {
  var Params = "";
  var ts = dayjs().unix();
  var ttl = 30;
  var obj = rest;
  Params += "ts=" + ts + "&ttl=" + ttl + "&uid=" + CLIENT + (isEmpty(obj) ? '' : "&" + objTransUrlParams(obj));
  var ParamArr = sortUrlParams(Params);
  ParamArr = objKeySort(ParamArr);
  var paramstr = [];
  for (var i in ParamArr) {
    paramstr.push(i + "=" + ParamArr[i]);
  }
  paramstr = paramstr.join("&");
  var signWordArray = hmac_sha1_default()(paramstr, CLIENT_SECRET);
  var sign = enc_base64_default.a.stringify(signWordArray);
  var encodeSign = encodeURIComponent(sign);
  return paramstr + "&sign=" + encodeSign;
};

//获取加密后的参数对象
var sign_getSign = function getSign(rest) {
  var Params = "";
  var ts = dayjs().unix();
  var ttl = 180;
  var obj = rest;
  Params += "ts=" + ts + "&ttl=" + ttl + "&uid=" + CLIENT + (isEmpty(obj) ? '' : "&" + objTransUrlParams(obj));
  var ParamArr = sortUrlParams(Params);
  ParamArr = objKeySort(ParamArr);
  var paramstr = [];
  for (var i in ParamArr) {
    paramstr.push(i + "=" + ParamArr[i]);
  }
  paramstr = paramstr.join("&");
  var signWordArray = hmac_sha1_default()(paramstr, CLIENT_SECRET);
  var sign = enc_base64_default.a.stringify(signWordArray);
  return _extends({ sign: sign, ts: ts, ttl: ttl, uid: CLIENT }, ParamArr);
};

var objKeySort = function objKeySort(obj) {
  var newkey = Object.keys(obj).sort();
  var newObj = {};
  for (var i = 0; i < newkey.length; i++) {
    newObj[newkey[i]] = obj[newkey[i]];
  }
  return newObj;
};

var sortUrlParams = function sortUrlParams(str) {
  if (typeof str !== 'string') {
    return {};
  }
  var paramObj = {};
  var paramArr = decodeURI(str).split('&');
  // let paramArr = str.split('&');
  for (var i = 0; i < paramArr.length; i++) {
    var tmp = paramArr[i].split('=');
    var key = tmp[0];
    var value = tmp[1] || "";
    //if (typeof value === 'string' && isNaN(Number(value)) === false && value !== "") {
    //  value = Number(value);
    //}
    if (typeof paramObj[key] === 'undefined') {
      paramObj[key] = value;
    } else {
      var newValue = Array.isArray(paramObj[key]) ? paramObj[key] : [paramObj[key]];
      newValue.push(value);
      paramObj[key] = newValue;
    }
  }
  return paramObj;
};

var objTransUrlParams = function objTransUrlParams(obj) {
  var params = [];
  Object.keys(obj).forEach(function (key) {
    var value = obj[key];
    if (typeof value === 'undefined') {
      value = '';
    }
    params.push([key, value].join('='));
  });
  return params.join('&');
};


// CONCATENATED MODULE: ./src/utils/request.js
/*
 * @Author: wei_jt@ecidi.com
 * @Date: 2019-07-05 16:35:39
 * @LastEditors: Please set LastEditors
 * @LastEditTime: 2021-03-10 15:06:30
 * @Description: 请求配置
 */

 //qs一般装了axios就自带不用再装，如果没有，自己安装下
 //签名校验

//开发环境添加代理前缀
var prefix = '../api';
if (false) {}

var request = external_axios_default.a.create({
  baseURL: prefix, //这里配置你自己的url
  transformRequest: [function (data) {
    data = external_qs_default.a.stringify(data); //序列化参数
    return data;
  }],
  withCredentials: true // 允许携带cookie
});
var pending = []; //声明一个数组用于存储每个ajax请求的取消函数和ajax标识

var cancelToken = external_axios_default.a.CancelToken;

var removePending = function removePending(config) {
  for (var p in pending) {
    if (config.remove) {
      //当当前请求在数组中存在时执行函数体
      pending[p].f(); //执行取消操作
      pending.splice(p, 1); //把这条记录从数组中移除
    }
  }
};
//添加请求拦截器
request.interceptors.request.use(function (config) {
  removePending(config); //在一个ajax发送前执行一下取消操作
  config.cancelToken = new cancelToken(function (c) {
    //这里的ajax标识我是用请求地址&请求方式拼接的字符串，当然你可以选择其他的一些方式
    if (config.remove) {
      pending.push({
        u: config.url + '&' + config.method,
        f: c
      });
    }
  });
  config.params = sign_getSign(config.params);
  // config.headers['Fawkes-Auth'] = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJjbGllbnRJZCI6ImZhd2tlcyIsInVzZXJfbmFtZSI6IndlaV9qdCIsInNleCI6IueUtyIsInVzZXJObyI6IjIwMTgyNzMiLCJ1c2VyTmFtZSI6IndlaV9qdCIsImNsaWVudF9pZCI6ImZhd2tlcyIsImxpY2Vuc2UiOiJwb3dlcmVkIGJ5IGZhd2tlcyIsImF1ZCI6WyJvYXV0aDItcmVzb3VyY2UiLCJvYXV0aDItc2VydmVyIl0sInBob25lIjoiMTM3MzU4OTk3NDEiLCJzY29wZSI6WyJhbGwiXSwidGVuYW50SWQiOjEwMDAwMCwidXNlckZ1bGxuYW1lIjoi6Z-m6ZSm5rabIiwiaWQiOiIxMTkwMTUzNDcyMTkyODkyOTg1IiwiZXhwIjoxNTk5NzE3NjA0LCJqdGkiOiI0ODM5OGRiYy03OWM2LTQ5NDUtYTI4MC1mZDdkOWMzYTY5YzciLCJlbWFpbCI6IndlaV9qdEBlY2lkaS5jb20ifQ.LqK4UszX71C89SpMSo6MTKtfWB2v5ow0-jjrUZb3iiA'

  return config;
}, function (error) {
  return Promise.reject(error);
});
//添加响应拦截器
request.interceptors.response.use(function (res) {
  removePending(res.config); //在一个ajax响应后再执行一下取消操作，把已经完成的请求从pending中移除
  return res.data;
}, function (error) {
  return {
    // data: {
    //   errmsg: error.message
    // }
  };
});
/* harmony default export */ var utils_request = __webpack_exports__["a"] = (request);

/***/ }),

/***/ 16:
/***/ (function(module, exports) {

module.exports = require("axios");

/***/ }),

/***/ 18:
/***/ (function(module, exports) {

module.exports = require("crypto-js/hmac-sha1");

/***/ }),

/***/ 19:
/***/ (function(module, exports) {

module.exports = require("crypto-js/enc-base64");

/***/ }),

/***/ 24:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/*
 * @Author: wei_jt@ecidi.com
 * @Date: 2019-07-19 19:40:56
 * @LastEditors: Please set LastEditors
 * @LastEditTime: 2021-03-09 16:12:13
 * @Description: 选择组件通用部分
 */
/* harmony default export */ __webpack_exports__["a"] = ({
  inject: {
    fksForm: {
      default: function _default() {
        return {};
      }
    },
    fksFormItem: {
      default: function _default() {
        return {};
      }
    }
  },
  props: {
    showAllUser: {
      type: Boolean,
      default: false
    },
    width: {
      type: String,
      default: '100%'
    },
    url: {
      type: String,
      default: ''
    },
    params: {
      type: Object,
      default: function _default() {
        return {};
      }
    },
    headers: {
      type: Object,
      default: function _default() {
        return {};
      }
    },
    multiple: Boolean,
    multipleLimit: {
      type: Number,
      default: 0
    },
    readonly: Boolean,
    disabled: Boolean,
    /** 标签是否收缩 */
    collapseTags: Boolean,
    size: String,
    related: {
      type: Object,
      default: function _default() {
        return {};
      }
    }
  },
  data: function data() {
    return {
      initialInputHeight: 0,
      visible: false
    };
  },

  computed: {
    collapseTagSize: function collapseTagSize() {
      return ['small', 'mini'].indexOf(this.size) > -1 ? 'mini' : 'small';
    },
    forbidden: function forbidden() {
      return this.disabled || !!(this.fksForm && this.fksForm.disabled) || ((this.fksForm || {}).flowConfig || {})[(this.fksFormItem || {}).prop] == 'disabled';
    },
    uploadReadOnly: function uploadReadOnly() {
      return this.readonly || ((this.fksForm || {}).flowConfig || {})[(this.fksFormItem || {}).prop] == 'readonly';
    }
  },
  methods: {
    resetInputHeight: function resetInputHeight() {
      var _this = this;

      this.$nextTick(function () {
        if (!_this.$refs.input) return;
        var inputChildNodes = _this.$refs.input.$el.childNodes;
        var input = [].filter.call(inputChildNodes, function (item) {
          return item.tagName === 'INPUT';
        })[0];
        var tags = _this.$refs.tags;
        var sizeInMap = _this.initialInputHeight || 36;
        var list = _this.sureList || _this.chosedList;
        input.style.height = list.length === 0 ? sizeInMap + 'px' : Math.max(tags ? tags.clientHeight + (tags.clientHeight > sizeInMap ? 4 : 0) : 0, sizeInMap) + 'px';
      });
    }
  },
  watch: {
    collapseTags: function collapseTags() {
      if (this.multiple) {
        this.resetInputHeight();
      }
    }
  },
  mounted: function mounted() {
    var sizeMap = {
      large: 40,
      small: 32,
      mini: 28
    };
    this.initialInputHeight = sizeMap[this.size];
  }
});

/***/ }),

/***/ 25:
/***/ (function(module, exports) {

module.exports = require("qs");

/***/ }),

/***/ 27:
/***/ (function(module, exports) {

module.exports = require("dayjs");

/***/ }),

/***/ 4:
/***/ (function(module, exports) {

module.exports = require("fawkes-lib/lib/mixins/locale");

/***/ }),

/***/ 5:
/***/ (function(module, exports) {

module.exports = require("vue");

/***/ }),

/***/ 8:
/***/ (function(module, exports) {

module.exports = require("fawkes-lib/lib/utils/types");

/***/ })

/******/ });