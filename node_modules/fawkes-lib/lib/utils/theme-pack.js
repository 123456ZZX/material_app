'use strict';

/*
 * @Author: gao_m3
 * @Date: 2021-07-21 15:03:35
 * @LastEditors: Please set LastEditors
 * @LastEditTime: 2021-07-28 15:25:15
 * @Descripttion:
 */
var fs = require('fs');
var path = require('path');
var exec = require('child_process').exec;
var basePath = path.resolve(__dirname, '../..//packages/theme-chalk/src/common/var.scss');
//读取common/var.scss文件
fs.readFile(basePath, function (err, data) {
    if (err) {
        console.log(err);
    } else {
        var temp = data.toString();
        var theme = process.env.npm_config_primary ? process.env.npm_config_primary : '409EFF';
        var variable = '$--color-primary:#' + theme + ';';

        //首行插入基础样式，写入新的scss 
        fs.writeFile(basePath, variable + temp, function (err) {
            if (err) {
                console.log(err);
            } else {
                //编译scss->css 文件路径为index.css
                exec('gulp build --gulpfile node_modules/fawkes-lib/packages/theme-chalk/gulpfile.js', function (err) {
                    if (err) console.log(err);else {
                        //删除var.scss中新增的variable
                        fs.writeFile(basePath, temp, function (err) {
                            if (err) {
                                console.log(err);
                            } else {
                                var destPath = path.resolve(__dirname, '../../packages/theme-chalk/lib/index.css');
                                var stream = fs.createReadStream(destPath);
                                var responseData = [];
                                if (stream) {
                                    stream.on('data', function (chunk) {
                                        responseData.push(chunk);
                                    });
                                    stream.on('end', function () {
                                        var finalData = Buffer.concat(responseData);
                                        //写入本地某个路径
                                        //用户自定义目标路径
                                        var base = '../../../../src/assets/css/index_' + theme + '.css';
                                        var destPath = path.resolve(__dirname, base);
                                        console.log(destPath);
                                        fs.writeFile(destPath, finalData, "binary", function (err) {
                                            if (err) {
                                                console.log("下载失败");
                                            } else console.log("样式文件生成成功");
                                            //在utils/theme中引入

                                            var export_path = path.resolve(__dirname, '../../../../src/utils/theme.js');
                                            fs.readFile(export_path, function (err, data) {
                                                if (err) {
                                                    console.log('读取主题色导出文件错误');
                                                } else {
                                                    //buffer文件转string
                                                    var StringDecoder = require('string_decoder').StringDecoder;
                                                    var decoder = new StringDecoder('utf8');
                                                    var str = decoder.write(Buffer.from(data)); //str为string类型文件 
                                                    if (str.indexOf(theme) > -1) {
                                                        console.log('该样式已存在');
                                                    } else {
                                                        var theme_append = str.slice(-30);
                                                        var theme_data = str.replace('\}', '').replace('export default themeMap', '').trim();
                                                        var theme_variable = 'const index_' + theme + ' = () => import(\'@/assets/css/index_' + theme + '.css\')';
                                                        var thememap_variable = '\'#' + theme + '\': index_' + theme + ',';
                                                        fs.writeFile(export_path, theme_variable + '\r\n' + theme_data + '\r\n' + '    ' + thememap_variable + theme_append, function (err) {
                                                            if (err) console.log('写入主题色导出失败');else console.log('主题色导出文件写入成功');
                                                        });
                                                    }
                                                }
                                            });
                                        });
                                    });
                                }
                            }
                        });
                    }
                });
            }
        });
    }
});