'use strict';

exports.__esModule = true;
exports.buildUniqueUrl = exports.cache = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _request = require('./request');

var _request2 = _interopRequireDefault(_request);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; } /*
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * @Author: wei_jt@ecidi.com
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * @Date: 2019-11-23 14:30:50
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * @LastEditors: wei_jt@ecidi.com
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * @LastEditTime: 2020-03-10 14:44:05
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * @Description: request缓存，非get方法慎用
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            */

/**
 * 使用方法
 * import cache from '@/utils/cache'
 * export function getSvgs(params) {
 *  return request({
 *    url: process.env.VUE_APP_SVG_URL + '/icons',
 *    method: 'get',
 *    params: {
 *      ...params
 *    },
 *    adapter: cache({
 *      time: 1000 //time 表示可缓存的时间，默认为0，在没有清除内存之前永久缓存（浏览器窗口标签关闭，应用程序关闭等会清除内存）
 *    })
 *  })
 *  } 
 */


// 数据存储
var cache = exports.cache = {
  data: {},
  set: function set(key, data) {
    this.data[key] = data;
  },
  get: function get(key) {
    return this.data[key];
  },
  clear: function clear(key) {
    delete this.data[key];
  }
};

// 建立唯一的key值
var buildUniqueUrl = exports.buildUniqueUrl = function buildUniqueUrl(url, method) {
  var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var data = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

  var paramStr = function paramStr(obj) {
    if (Object.prototype.toString.call(obj) === '[object Object]') {
      return JSON.stringify(Object.keys(obj).sort().reduce(function (result, key) {
        result[key] = obj[key];
        return result;
      }, {}));
    } else {
      return JSON.stringify(obj);
    }
  };
  url += '?' + paramStr(params) + '&' + paramStr(data) + '&' + method;
  return url;
};

// 防止重复请求

exports.default = function () {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(config) {
      var defaultOptions, index, responsePromise;
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              defaultOptions = _extends({
                time: 0 }, options);
              index = buildUniqueUrl(config.url, config.method, config.params, config.data);
              responsePromise = cache.get(index);

              if (!responsePromise) {
                responsePromise = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
                  var r, response;
                  return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                      switch (_context.prev = _context.next) {
                        case 0:
                          _context.prev = 0;
                          r = defaultOptions.request || _request2.default;
                          _context.next = 4;
                          return r.defaults.adapter(config);

                        case 4:
                          response = _context.sent;
                          return _context.abrupt('return', Promise.resolve(response));

                        case 8:
                          _context.prev = 8;
                          _context.t0 = _context['catch'](0);

                          cache.clear(index);
                          return _context.abrupt('return', Promise.reject(_context.t0));

                        case 12:
                        case 'end':
                          return _context.stop();
                      }
                    }
                  }, _callee, undefined, [[0, 8]]);
                }))();
                cache.set(index, responsePromise);
                if (defaultOptions.time !== 0) {
                  setTimeout(function () {
                    cache.clear(index);
                  }, defaultOptions.time);
                }
              }
              return _context2.abrupt('return', responsePromise.then(function (data) {
                return JSON.parse(JSON.stringify(data));
              }));

            case 5:
            case 'end':
              return _context2.stop();
          }
        }
      }, _callee2, undefined);
    }));

    return function (_x4) {
      return _ref.apply(this, arguments);
    };
  }();
};